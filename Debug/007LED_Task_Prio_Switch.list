
007LED_Task_Prio_Switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005088  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005218  08005218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005350  08005350  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005358  08005358  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005360  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00014428  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014438  20014438  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114fc  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002943  00000000  00000000  0001853c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0001ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d19  00000000  00000000  0001bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023133  00000000  00000000  0001cca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d0f  00000000  00000000  0003fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6cdb  00000000  00000000  00052ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001297be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004704  00000000  00000000  00129804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  0012df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005200 	.word	0x08005200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005200 	.word	0x08005200

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e64 	.word	0x20012e64

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fbd1 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f855 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8bd 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
#if (SEGGER_UART_REC == 1)
  SEGGER_UART_init(500000);
#endif
  /*Enable the CYCCNT*/
  DWT_CTRL|= (1<< 0);
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <main+0x98>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <main+0x98>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80005ae:	f003 f9d9 	bl	8003964 <SEGGER_SYSVIEW_Conf>

#if (SEGGER_UART_REC == 0)
  SEGGER_SYSVIEW_Start();
 80005b2:	f004 f86f 	bl	8004694 <SEGGER_SYSVIEW_Start>
#endif

  status = xTaskCreate(taskLED_Green_handler, "Task-LED", 200, "Green_LED_Task Activation", 3, &taskLED_Green_handle);
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <main+0x9c>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2303      	movs	r3, #3
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <main+0xa0>)
 80005c0:	22c8      	movs	r2, #200	@ 0xc8
 80005c2:	491c      	ldr	r1, [pc, #112]	@ (8000634 <main+0xa4>)
 80005c4:	481c      	ldr	r0, [pc, #112]	@ (8000638 <main+0xa8>)
 80005c6:	f001 fea4 	bl	8002312 <xTaskCreate>
 80005ca:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00b      	beq.n	80005ea <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d6:	f383 8811 	msr	BASEPRI, r3
 80005da:	f3bf 8f6f 	isb	sy
 80005de:	f3bf 8f4f 	dsb	sy
 80005e2:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	e7fd      	b.n	80005e6 <main+0x56>
/*
  status = xTaskCreate(taskLED_Blue_handler, "Task-LED", 200, "Blue_LED_Task Activation", 4, &taskLED_Blue_handle);
  configASSERT(status == pdPASS);
*/
  status = xTaskCreate(taskLED_Red_handler, "Task-LED", 200, "Red_LED_Task Activation", 2, &taskLED_Red_handle);
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <main+0xac>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <main+0xb0>)
 80005f4:	22c8      	movs	r2, #200	@ 0xc8
 80005f6:	490f      	ldr	r1, [pc, #60]	@ (8000634 <main+0xa4>)
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <main+0xb4>)
 80005fa:	f001 fe8a 	bl	8002312 <xTaskCreate>
 80005fe:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d00b      	beq.n	800061e <main+0x8e>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	607b      	str	r3, [r7, #4]
    }
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0x8a>
/*
  status = xTaskCreate(taskUser_Btn_handler, "Task-Btn", 200, "User_Btn_Task Activation", 1, &taskUser_Btn_handle);
  configASSERT(status == pdPASS);
  */
  /*Start the scheduler*/
  vTaskStartScheduler();
 800061e:	f002 f90b 	bl	8002838 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x92>
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	20000030 	.word	0x20000030
 8000630:	08005218 	.word	0x08005218
 8000634:	08005234 	.word	0x08005234
 8000638:	080009e9 	.word	0x080009e9
 800063c:	20000034 	.word	0x20000034
 8000640:	08005240 	.word	0x08005240
 8000644:	08000a29 	.word	0x08000a29

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fd98 	bl	800518c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006bc:	2332      	movs	r3, #50	@ 0x32
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fe71 	bl	80013b4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 fa22 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006e4:	2380      	movs	r3, #128	@ 0x80
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f8d2 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 fa0b 	bl	8000b20 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4ba6      	ldr	r3, [pc, #664]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4aa5      	ldr	r2, [pc, #660]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4ba3      	ldr	r3, [pc, #652]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b9f      	ldr	r3, [pc, #636]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a9e      	ldr	r2, [pc, #632]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b9c      	ldr	r3, [pc, #624]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b98      	ldr	r3, [pc, #608]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a97      	ldr	r2, [pc, #604]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b95      	ldr	r3, [pc, #596]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b91      	ldr	r3, [pc, #580]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a90      	ldr	r2, [pc, #576]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b8e      	ldr	r3, [pc, #568]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b8a      	ldr	r3, [pc, #552]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a89      	ldr	r2, [pc, #548]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b87      	ldr	r3, [pc, #540]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b83      	ldr	r3, [pc, #524]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a82      	ldr	r2, [pc, #520]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b80      	ldr	r3, [pc, #512]	@ (80009d0 <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	487d      	ldr	r0, [pc, #500]	@ (80009d4 <MX_GPIO_Init+0x2b8>)
 80007e0:	f000 fd90 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	487b      	ldr	r0, [pc, #492]	@ (80009d8 <MX_GPIO_Init+0x2bc>)
 80007ea:	f000 fd8b 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007f4:	4879      	ldr	r0, [pc, #484]	@ (80009dc <MX_GPIO_Init+0x2c0>)
 80007f6:	f000 fd85 	bl	8001304 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4870      	ldr	r0, [pc, #448]	@ (80009d4 <MX_GPIO_Init+0x2b8>)
 8000812:	f000 fbdb 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	486a      	ldr	r0, [pc, #424]	@ (80009d8 <MX_GPIO_Init+0x2bc>)
 800082e:	f000 fbcd 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4862      	ldr	r0, [pc, #392]	@ (80009d8 <MX_GPIO_Init+0x2bc>)
 800084e:	f000 fbbd 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000856:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	485e      	ldr	r0, [pc, #376]	@ (80009e0 <MX_GPIO_Init+0x2c4>)
 8000868:	f000 fbb0 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800086c:	2310      	movs	r3, #16
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800087c:	2306      	movs	r3, #6
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4856      	ldr	r0, [pc, #344]	@ (80009e0 <MX_GPIO_Init+0x2c4>)
 8000888:	f000 fba0 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800088c:	23e0      	movs	r3, #224	@ 0xe0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089c:	2305      	movs	r3, #5
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	484e      	ldr	r0, [pc, #312]	@ (80009e0 <MX_GPIO_Init+0x2c4>)
 80008a8:	f000 fb90 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4849      	ldr	r0, [pc, #292]	@ (80009e4 <MX_GPIO_Init+0x2c8>)
 80008c0:	f000 fb84 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4840      	ldr	r0, [pc, #256]	@ (80009e4 <MX_GPIO_Init+0x2c8>)
 80008e2:	f000 fb73 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4837      	ldr	r0, [pc, #220]	@ (80009dc <MX_GPIO_Init+0x2c0>)
 8000900:	f000 fb64 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000904:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482d      	ldr	r0, [pc, #180]	@ (80009d8 <MX_GPIO_Init+0x2bc>)
 8000922:	f000 fb53 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0x2c4>)
 800093c:	f000 fb46 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000940:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000952:	230a      	movs	r3, #10
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4820      	ldr	r0, [pc, #128]	@ (80009e0 <MX_GPIO_Init+0x2c4>)
 800095e:	f000 fb35 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4819      	ldr	r0, [pc, #100]	@ (80009dc <MX_GPIO_Init+0x2c0>)
 8000976:	f000 fb29 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800097a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_GPIO_Init+0x2c8>)
 8000998:	f000 fb18 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <MX_GPIO_Init+0x2b8>)
 80009b2:	f000 fb0b 	bl	8000fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2106      	movs	r1, #6
 80009ba:	2006      	movs	r0, #6
 80009bc:	f000 fadc 	bl	8000f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c0:	2006      	movs	r0, #6
 80009c2:	f000 faf5 	bl	8000fb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400

080009e8 <taskLED_Green_handler>:
	xTaskNotifyFromISR(next_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);/*Notify the currently running task*/
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
}

static void taskLED_Green_handler(void* parameters)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	BaseType_t Delay_Sts = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xLastWakeTime = xTaskGetTickCount();
 80009f4:	f002 f88a 	bl	8002b0c <xTaskGetTickCount>
 80009f8:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009fe:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <taskLED_Green_handler+0x38>)
 8000a00:	f000 fc99 	bl	8001336 <HAL_GPIO_TogglePin>
		HAL_Delay(pdMS_TO_TICKS(1000));
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f000 f9da 	bl	8000dc0 <HAL_Delay>
		if(User_Btn_Clicked == 1u){
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <taskLED_Green_handler+0x3c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d1ef      	bne.n	80009f4 <taskLED_Green_handler+0xc>
			Priority_Swtich();
 8000a14:	f000 f834 	bl	8000a80 <Priority_Swtich>
			User_Btn_Clicked = 0u;
 8000a18:	4b02      	ldr	r3, [pc, #8]	@ (8000a24 <taskLED_Green_handler+0x3c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
		xLastWakeTime = xTaskGetTickCount();
 8000a1e:	e7e9      	b.n	80009f4 <taskLED_Green_handler+0xc>
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	2000002c 	.word	0x2000002c

08000a28 <taskLED_Red_handler>:

	}
}

static void taskLED_Red_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	BaseType_t Delay_Sts = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xLastWakeTime = xTaskGetTickCount();
 8000a34:	f002 f86a 	bl	8002b0c <xTaskGetTickCount>
 8000a38:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <taskLED_Red_handler+0x38>)
 8000a40:	f000 fc79 	bl	8001336 <HAL_GPIO_TogglePin>
		HAL_Delay(pdMS_TO_TICKS(100));
 8000a44:	2064      	movs	r0, #100	@ 0x64
 8000a46:	f000 f9bb 	bl	8000dc0 <HAL_Delay>
		if(User_Btn_Clicked == 1u){
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <taskLED_Red_handler+0x3c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d1f0      	bne.n	8000a34 <taskLED_Red_handler+0xc>
			Priority_Swtich();
 8000a52:	f000 f815 	bl	8000a80 <Priority_Swtich>
			User_Btn_Clicked = 0u;
 8000a56:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <taskLED_Red_handler+0x3c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
		xLastWakeTime = xTaskGetTickCount();
 8000a5c:	e7ea      	b.n	8000a34 <taskLED_Red_handler+0xc>
 8000a5e:	bf00      	nop
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	2000002c 	.word	0x2000002c

08000a68 <taskUser_Btn_handler>:
		}
	}
}

void taskUser_Btn_handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
//
//		User_Btn_Toggle_Last = User_Btn_Toggle;
//		User_Btn_Toggle = User_Btn_Sts_Debounce;
//
//		if(User_Btn_Toggle > User_Btn_Toggle_Last){
			User_Btn_Clicked = 1u;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <taskUser_Btn_handler+0x14>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
//		}
//	}
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	2000002c 	.word	0x2000002c

08000a80 <Priority_Swtich>:

static void Priority_Swtich(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

	UBaseType_t prio_red = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
	UBaseType_t prio_green = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
	TaskHandle_t curr_handle = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]

	prio_red = uxTaskPriorityGet(taskLED_Red_handle);
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <Priority_Swtich+0x74>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fdc6 	bl	8002628 <uxTaskPriorityGet>
 8000a9c:	60f8      	str	r0, [r7, #12]
	prio_green = uxTaskPriorityGet(taskLED_Green_handle);
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <Priority_Swtich+0x78>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fdc0 	bl	8002628 <uxTaskPriorityGet>
 8000aa8:	60b8      	str	r0, [r7, #8]

	curr_handle = xTaskGetCurrentTaskHandle();
 8000aaa:	f002 fa89 	bl	8002fc0 <xTaskGetCurrentTaskHandle>
 8000aae:	6078      	str	r0, [r7, #4]

	if (curr_handle == taskLED_Red_handle){
 8000ab0:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <Priority_Swtich+0x74>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d10c      	bne.n	8000ad4 <Priority_Swtich+0x54>
		vTaskPrioritySet(taskLED_Red_handle, prio_green);
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <Priority_Swtich+0x74>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fdcb 	bl	800265c <vTaskPrioritySet>
		vTaskPrioritySet(taskLED_Green_handle, prio_red);
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <Priority_Swtich+0x78>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68f9      	ldr	r1, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fdc5 	bl	800265c <vTaskPrioritySet>
	}
	else{
		vTaskPrioritySet(taskLED_Green_handle, prio_red);
		vTaskPrioritySet(taskLED_Red_handle, prio_green);
	}
}
 8000ad2:	e00b      	b.n	8000aec <Priority_Swtich+0x6c>
		vTaskPrioritySet(taskLED_Green_handle, prio_red);
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <Priority_Swtich+0x78>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68f9      	ldr	r1, [r7, #12]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fdbe 	bl	800265c <vTaskPrioritySet>
		vTaskPrioritySet(taskLED_Red_handle, prio_green);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <Priority_Swtich+0x74>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fdb8 	bl	800265c <vTaskPrioritySet>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000034 	.word	0x20000034
 8000af8:	20000030 	.word	0x20000030

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b0e:	f000 f937 	bl	8000d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40001000 	.word	0x40001000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b6a:	f002 fb6f 	bl	800324c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b33      	ldr	r3, [pc, #204]	@ (8000c60 <HAL_InitTick+0xe4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a32      	ldr	r2, [pc, #200]	@ (8000c60 <HAL_InitTick+0xe4>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b30      	ldr	r3, [pc, #192]	@ (8000c60 <HAL_InitTick+0xe4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba8:	f107 0210 	add.w	r2, r7, #16
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 f882 	bl	8001cbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bc2:	f001 f867 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8000bc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bc8:	e004      	b.n	8000bd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bca:	f001 f863 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bd6:	4a23      	ldr	r2, [pc, #140]	@ (8000c64 <HAL_InitTick+0xe8>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	0c9b      	lsrs	r3, r3, #18
 8000bde:	3b01      	subs	r3, #1
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <HAL_InitTick+0xec>)
 8000be4:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <HAL_InitTick+0xf0>)
 8000be6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <HAL_InitTick+0xec>)
 8000bea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <HAL_InitTick+0xec>)
 8000bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <HAL_InitTick+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_InitTick+0xec>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <HAL_InitTick+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c08:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <HAL_InitTick+0xec>)
 8000c0a:	f001 f889 	bl	8001d20 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d11b      	bne.n	8000c54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c1c:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <HAL_InitTick+0xec>)
 8000c1e:	f001 f8d9 	bl	8001dd4 <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d111      	bne.n	8000c54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c30:	2036      	movs	r0, #54	@ 0x36
 8000c32:	f000 f9bd 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d808      	bhi.n	8000c4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2036      	movs	r0, #54	@ 0x36
 8000c42:	f000 f999 	bl	8000f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_InitTick+0xf4>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e002      	b.n	8000c54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3738      	adds	r7, #56	@ 0x38
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	431bde83 	.word	0x431bde83
 8000c68:	20000038 	.word	0x20000038
 8000c6c:	40001000 	.word	0x40001000
 8000c70:	20000004 	.word	0x20000004

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  taskUser_Btn_handler();/*Calling the handler*/
 8000ca0:	f7ff fee2 	bl	8000a68 <taskUser_Btn_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);/*Cleaning the interrupt*/
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f000 fb61 	bl	800136c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <TIM6_DAC_IRQHandler+0x10>)
 8000cb6:	f001 f8fd 	bl	8001eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000038 	.word	0x20000038

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cec:	f7ff ffea 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f004 fa41 	bl	800519c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc39 	bl	8000590 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d2c:	08005360 	.word	0x08005360
  ldr r2, =_sbss
 8000d30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d34:	20014438 	.word	0x20014438

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f8fc 	bl	8000f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff ff06 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fedc 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000080 	.word	0x20000080

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000080 	.word	0x20000080

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	@ (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff61 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb1 	bl	8000efc <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff80 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff54 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b60      	ldr	r3, [pc, #384]	@ (80012d8 <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a5f      	ldr	r2, [pc, #380]	@ (80012d8 <HAL_GPIO_Init+0x30c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5b      	ldr	r2, [pc, #364]	@ (80012dc <HAL_GPIO_Init+0x310>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	@ (80012e0 <HAL_GPIO_Init+0x314>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	@ (80012e4 <HAL_GPIO_Init+0x318>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	@ (80012e8 <HAL_GPIO_Init+0x31c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_GPIO_Init+0x320>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x328>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	@ (80012f8 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	@ (80012fc <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	@ (80012dc <HAL_GPIO_Init+0x310>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_GPIO_Init+0x334>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	@ (8001300 <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <HAL_GPIO_Init+0x334>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	@ (8001300 <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_GPIO_Init+0x334>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	@ (8001300 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_GPIO_Init+0x334>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43d9      	mvns	r1, r3
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	400b      	ands	r3, r1
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f806 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e267      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013d2:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d157      	bne.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e242      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x74>
 800141a:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b70      	ldr	r3, [pc, #448]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6f      	ldr	r2, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6c      	ldr	r2, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 800144c:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a68      	ldr	r2, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a65      	ldr	r2, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc9c 	bl	8000da8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc98 	bl	8000da8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e207      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b5b      	ldr	r3, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xc0>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fc88 	bl	8000da8 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fc84 	bl	8000da8 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1f3      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c7      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4937      	ldr	r1, [pc, #220]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fc3d 	bl	8000da8 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fc39 	bl	8000da8 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a8      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4925      	ldr	r1, [pc, #148]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc1c 	bl	8000da8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc18 	bl	8000da8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e187      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d036      	beq.n	800160c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fbfc 	bl	8000da8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fbf8 	bl	8000da8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e167      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x200>
 80015d2:	e01b      	b.n	800160c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fbe5 	bl	8000da8 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e00e      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fbe1 	bl	8000da8 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d907      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e150      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470000 	.word	0x42470000
 80015fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ea      	bne.n	80015e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8097 	beq.w	8001748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b81      	ldr	r3, [pc, #516]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b7d      	ldr	r3, [pc, #500]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a7c      	ldr	r2, [pc, #496]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b77      	ldr	r3, [pc, #476]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b74      	ldr	r3, [pc, #464]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a73      	ldr	r2, [pc, #460]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fba1 	bl	8000da8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fb9d 	bl	8000da8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e10c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x2ea>
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x30c>
 80016a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 80016c0:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c4:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80016cc:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a54      	ldr	r2, [pc, #336]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fb62 	bl	8000da8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fb5e 	bl	8000da8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0cb      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ee      	beq.n	80016e8 <HAL_RCC_OscConfig+0x334>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fb4c 	bl	8000da8 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff fb48 	bl	8000da8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0b5      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ee      	bne.n	8001714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a38      	ldr	r2, [pc, #224]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a1 	beq.w	8001894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d05c      	beq.n	8001818 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d141      	bne.n	80017ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fb1c 	bl	8000da8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fb18 	bl	8000da8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e087      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff faf1 	bl	8000da8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff faed 	bl	8000da8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e05c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x416>
 80017e8:	e054      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fada 	bl	8000da8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fad6 	bl	8000da8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e045      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
 8001816:	e03d      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e038      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d028      	beq.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d121      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff fa08 	bl	8000da8 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa04 	bl	8000da8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f896 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08005320 	.word	0x08005320
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b094      	sub	sp, #80	@ 0x50
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b79      	ldr	r3, [pc, #484]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80e1 	bhi.w	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e0db      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aa8:	e0db      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aae:	e0d8      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b6d      	ldr	r3, [pc, #436]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4621      	mov	r1, r4
 8001afc:	1a51      	subs	r1, r2, r1
 8001afe:	6139      	str	r1, [r7, #16]
 8001b00:	4629      	mov	r1, r5
 8001b02:	eb63 0301 	sbc.w	r3, r3, r1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b14:	4659      	mov	r1, fp
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1e:	4651      	mov	r1, sl
 8001b20:	018a      	lsls	r2, r1, #6
 8001b22:	4651      	mov	r1, sl
 8001b24:	ebb2 0801 	subs.w	r8, r2, r1
 8001b28:	4659      	mov	r1, fp
 8001b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	eb49 0303 	adc.w	r3, r9, r3
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b62:	4629      	mov	r1, r5
 8001b64:	024b      	lsls	r3, r1, #9
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	024a      	lsls	r2, r1, #9
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b76:	2200      	movs	r2, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b80:	f7fe fb70 	bl	8000264 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b8c:	e058      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	4611      	mov	r1, r2
 8001b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	0159      	lsls	r1, r3, #5
 8001bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bba:	0150      	lsls	r0, r2, #5
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be0:	ebb2 040a 	subs.w	r4, r2, sl
 8001be4:	eb63 050b 	sbc.w	r5, r3, fp
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	00eb      	lsls	r3, r5, #3
 8001bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf6:	00e2      	lsls	r2, r4, #3
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	18e3      	adds	r3, r4, r3
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	464b      	mov	r3, r9
 8001c04:	eb45 0303 	adc.w	r3, r5, r3
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c16:	4629      	mov	r1, r5
 8001c18:	028b      	lsls	r3, r1, #10
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c20:	4621      	mov	r1, r4
 8001c22:	028a      	lsls	r2, r1, #10
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	61fa      	str	r2, [r7, #28]
 8001c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c34:	f7fe fb16 	bl	8000264 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3750      	adds	r7, #80	@ 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08005330 	.word	0x08005330

08001cbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	220f      	movs	r2, #15
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <HAL_RCC_GetClockConfig+0x60>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0207 	and.w	r2, r3, #7
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e041      	b.n	8001db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f839 	bl	8001dbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f9c0 	bl	80020e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e04e      	b.n	8001e8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e16:	d01d      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <HAL_TIM_Base_Start_IT+0xd8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d111      	bne.n	8001e78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d010      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e76:	e007      	b.n	8001e88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40010400 	.word	0x40010400
 8001eac:	40014000 	.word	0x40014000
 8001eb0:	40001800 	.word	0x40001800

08001eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0202 	mvn.w	r2, #2
 8001ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8d2 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8c4 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8d5 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d020      	beq.n	8001f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0204 	mvn.w	r2, #4
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8ac 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f89e 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8af 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0208 	mvn.w	r2, #8
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f886 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f878 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f889 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0210 	mvn.w	r2, #16
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f860 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f852 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f863 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0201 	mvn.w	r2, #1
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fd6e 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f906 	bl	8002250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f834 	bl	80020d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0220 	mvn.w	r2, #32
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8d8 	bl	800223c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a46      	ldr	r2, [pc, #280]	@ (8002210 <TIM_Base_SetConfig+0x12c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002102:	d00f      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a43      	ldr	r2, [pc, #268]	@ (8002214 <TIM_Base_SetConfig+0x130>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00b      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a42      	ldr	r2, [pc, #264]	@ (8002218 <TIM_Base_SetConfig+0x134>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a41      	ldr	r2, [pc, #260]	@ (800221c <TIM_Base_SetConfig+0x138>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a40      	ldr	r2, [pc, #256]	@ (8002220 <TIM_Base_SetConfig+0x13c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d108      	bne.n	8002136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800212a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a35      	ldr	r2, [pc, #212]	@ (8002210 <TIM_Base_SetConfig+0x12c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002144:	d027      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <TIM_Base_SetConfig+0x130>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d023      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a31      	ldr	r2, [pc, #196]	@ (8002218 <TIM_Base_SetConfig+0x134>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a30      	ldr	r2, [pc, #192]	@ (800221c <TIM_Base_SetConfig+0x138>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <TIM_Base_SetConfig+0x13c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d017      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2e      	ldr	r2, [pc, #184]	@ (8002224 <TIM_Base_SetConfig+0x140>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2d      	ldr	r2, [pc, #180]	@ (8002228 <TIM_Base_SetConfig+0x144>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00f      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2c      	ldr	r2, [pc, #176]	@ (800222c <TIM_Base_SetConfig+0x148>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2b      	ldr	r2, [pc, #172]	@ (8002230 <TIM_Base_SetConfig+0x14c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <TIM_Base_SetConfig+0x150>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a29      	ldr	r2, [pc, #164]	@ (8002238 <TIM_Base_SetConfig+0x154>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d108      	bne.n	80021a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800219c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <TIM_Base_SetConfig+0x12c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d003      	beq.n	80021dc <TIM_Base_SetConfig+0xf8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <TIM_Base_SetConfig+0x13c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f023 0201 	bic.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]
  }
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40010400 	.word	0x40010400
 8002224:	40014000 	.word	0x40014000
 8002228:	40014400 	.word	0x40014400
 800222c:	40014800 	.word	0x40014800
 8002230:	40001800 	.word	0x40001800
 8002234:	40001c00 	.word	0x40001c00
 8002238:	40002000 	.word	0x40002000

0800223c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 0208 	add.w	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f103 0208 	add.w	r2, r3, #8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 0208 	add.w	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6892      	ldr	r2, [r2, #8]
 80022d4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6852      	ldr	r2, [r2, #4]
 80022de:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d103      	bne.n	80022f2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002312:	b580      	push	{r7, lr}
 8002314:	b08c      	sub	sp, #48	@ 0x30
 8002316:	af04      	add	r7, sp, #16
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f942 	bl	80035b0 <pvPortMalloc>
 800232c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002334:	2058      	movs	r0, #88	@ 0x58
 8002336:	f001 f93b 	bl	80035b0 <pvPortMalloc>
 800233a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002342:	2258      	movs	r2, #88	@ 0x58
 8002344:	2100      	movs	r1, #0
 8002346:	69f8      	ldr	r0, [r7, #28]
 8002348:	f002 ff20 	bl	800518c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
 8002352:	e005      	b.n	8002360 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002354:	6978      	ldr	r0, [r7, #20]
 8002356:	f001 f9e7 	bl	8003728 <vPortFree>
 800235a:	e001      	b.n	8002360 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d013      	beq.n	800238e <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	2300      	movs	r3, #0
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f80e 	bl	800239e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002382:	69f8      	ldr	r0, [r7, #28]
 8002384:	f000 f89c 	bl	80024c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002388:	2301      	movs	r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e002      	b.n	8002394 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002394:	69bb      	ldr	r3, [r7, #24]
    }
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	461a      	mov	r2, r3
 80023b6:	21a5      	movs	r1, #165	@ 0xa5
 80023b8:	f002 fee8 	bl	800518c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023c6:	3b01      	subs	r3, #1
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f023 0307 	bic.w	r3, r3, #7
 80023d4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	617b      	str	r3, [r7, #20]
    }
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01e      	beq.n	800243c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e012      	b.n	800242a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	7819      	ldrb	r1, [r3, #0]
 800240c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4413      	add	r3, r2
 8002412:	3334      	adds	r3, #52	@ 0x34
 8002414:	460a      	mov	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3301      	adds	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d9e9      	bls.n	8002404 <prvInitialiseNewTask+0x66>
 8002430:	e000      	b.n	8002434 <prvInitialiseNewTask+0x96>
            {
                break;
 8002432:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	2b05      	cmp	r3, #5
 8002440:	d90b      	bls.n	800245a <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	613b      	str	r3, [r7, #16]
    }
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	e7fd      	b.n	8002456 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	2b05      	cmp	r3, #5
 800245e:	d901      	bls.n	8002464 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002460:	2305      	movs	r3, #5
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002468:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800246e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	3304      	adds	r3, #4
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff15 	bl	80022a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	3318      	adds	r3, #24
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff10 	bl	80022a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002488:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248c:	f1c3 0206 	rsb	r2, r3, #6
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	69b8      	ldr	r0, [r7, #24]
 80024a0:	f000 fd9e 	bl	8002fe0 <pxPortInitialiseStack>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024b6:	bf00      	nop
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80024c8:	f000 ff40 	bl	800334c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024cc:	4b4f      	ldr	r3, [pc, #316]	@ (800260c <prvAddNewTaskToReadyList+0x14c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	4a4e      	ldr	r2, [pc, #312]	@ (800260c <prvAddNewTaskToReadyList+0x14c>)
 80024d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80024d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002610 <prvAddNewTaskToReadyList+0x150>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80024de:	4a4c      	ldr	r2, [pc, #304]	@ (8002610 <prvAddNewTaskToReadyList+0x150>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024e4:	4b49      	ldr	r3, [pc, #292]	@ (800260c <prvAddNewTaskToReadyList+0x14c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d110      	bne.n	800250e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80024ec:	f000 fcce 	bl	8002e8c <prvInitialiseTaskLists>
 80024f0:	e00d      	b.n	800250e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80024f2:	4b48      	ldr	r3, [pc, #288]	@ (8002614 <prvAddNewTaskToReadyList+0x154>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024fa:	4b45      	ldr	r3, [pc, #276]	@ (8002610 <prvAddNewTaskToReadyList+0x150>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	429a      	cmp	r2, r3
 8002506:	d802      	bhi.n	800250e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002508:	4a41      	ldr	r2, [pc, #260]	@ (8002610 <prvAddNewTaskToReadyList+0x150>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800250e:	4b42      	ldr	r3, [pc, #264]	@ (8002618 <prvAddNewTaskToReadyList+0x158>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	4a40      	ldr	r2, [pc, #256]	@ (8002618 <prvAddNewTaskToReadyList+0x158>)
 8002516:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002518:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <prvAddNewTaskToReadyList+0x158>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <prvAddNewTaskToReadyList+0x94>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 fc11 	bl	8004d50 <SEGGER_SYSVIEW_OnTaskCreate>
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	461d      	mov	r5, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461c      	mov	r4, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	1ae3      	subs	r3, r4, r3
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	462b      	mov	r3, r5
 8002550:	f001 faaa 	bl	8003aa8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fc7e 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartReady>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <prvAddNewTaskToReadyList+0x15c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	4a2c      	ldr	r2, [pc, #176]	@ (800261c <prvAddNewTaskToReadyList+0x15c>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002572:	492b      	ldr	r1, [pc, #172]	@ (8002620 <prvAddNewTaskToReadyList+0x160>)
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3304      	adds	r3, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	3204      	adds	r2, #4
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <prvAddNewTaskToReadyList+0x160>)
 80025b2:	441a      	add	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025bc:	4918      	ldr	r1, [pc, #96]	@ (8002620 <prvAddNewTaskToReadyList+0x160>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1c59      	adds	r1, r3, #1
 80025cc:	4814      	ldr	r0, [pc, #80]	@ (8002620 <prvAddNewTaskToReadyList+0x160>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4403      	add	r3, r0
 80025d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025da:	f000 fee9 	bl	80033b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <prvAddNewTaskToReadyList+0x154>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00e      	beq.n	8002604 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <prvAddNewTaskToReadyList+0x150>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <prvAddNewTaskToReadyList+0x164>)
 80025f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bdb0      	pop	{r4, r5, r7, pc}
 800260c:	20000170 	.word	0x20000170
 8002610:	20000084 	.word	0x20000084
 8002614:	2000017c 	.word	0x2000017c
 8002618:	2000018c 	.word	0x2000018c
 800261c:	20000178 	.word	0x20000178
 8002620:	20000088 	.word	0x20000088
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002630:	f000 fe8c 	bl	800334c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <uxTaskPriorityGet+0x18>
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <uxTaskPriorityGet+0x30>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e000      	b.n	8002642 <uxTaskPriorityGet+0x1a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800264a:	f000 feb1 	bl	80033b0 <vPortExitCritical>

        return uxReturn;
 800264e:	68bb      	ldr	r3, [r7, #8]
    }
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000084 	.word	0x20000084

0800265c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af02      	add	r7, sp, #8
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d90b      	bls.n	8002688 <vTaskPrioritySet+0x2c>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	60bb      	str	r3, [r7, #8]
    }
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d901      	bls.n	8002692 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800268e:	2305      	movs	r3, #5
 8002690:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002692:	f000 fe5b 	bl	800334c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <vTaskPrioritySet+0x46>
 800269c:	4b62      	ldr	r3, [pc, #392]	@ (8002828 <vTaskPrioritySet+0x1cc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	e000      	b.n	80026a4 <vTaskPrioritySet+0x48>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fc17 	bl	8004edc <SEGGER_SYSVIEW_ShrinkId>
 80026ae:	4603      	mov	r3, r0
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	2028      	movs	r0, #40	@ 0x28
 80026b6:	f001 ff93 	bl	80045e0 <SEGGER_SYSVIEW_RecordU32x2>
 80026ba:	69b8      	ldr	r0, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	461a      	mov	r2, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	f001 fa52 	bl	8003b78 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	f000 809c 	beq.w	800281c <vTaskPrioritySet+0x1c0>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d90d      	bls.n	8002708 <vTaskPrioritySet+0xac>
                {
                    if( pxTCB != pxCurrentTCB )
 80026ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002828 <vTaskPrioritySet+0x1cc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d00f      	beq.n	8002716 <vTaskPrioritySet+0xba>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80026f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002828 <vTaskPrioritySet+0x1cc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d309      	bcc.n	8002716 <vTaskPrioritySet+0xba>
                        {
                            xYieldRequired = pdTRUE;
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e006      	b.n	8002716 <vTaskPrioritySet+0xba>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002708:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <vTaskPrioritySet+0x1cc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	d101      	bne.n	8002716 <vTaskPrioritySet+0xba>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002724:	429a      	cmp	r2, r3
 8002726:	d102      	bne.n	800272e <vTaskPrioritySet+0xd2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db04      	blt.n	8002746 <vTaskPrioritySet+0xea>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f1c3 0206 	rsb	r2, r3, #6
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6959      	ldr	r1, [r3, #20]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4a35      	ldr	r2, [pc, #212]	@ (800282c <vTaskPrioritySet+0x1d0>)
 8002756:	4413      	add	r3, r2
 8002758:	4299      	cmp	r1, r3
 800275a:	d154      	bne.n	8002806 <vTaskPrioritySet+0x1aa>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3304      	adds	r3, #4
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fdac 	bl	80022be <uxListRemove>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <vTaskPrioritySet+0x124>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800276c:	2201      	movs	r2, #1
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43da      	mvns	r2, r3
 8002776:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <vTaskPrioritySet+0x1d4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4013      	ands	r3, r2
 800277c:	4a2c      	ldr	r2, [pc, #176]	@ (8002830 <vTaskPrioritySet+0x1d4>)
 800277e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4618      	mov	r0, r3
 8002784:	f002 fb68 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	2201      	movs	r2, #1
 800278e:	409a      	lsls	r2, r3
 8002790:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <vTaskPrioritySet+0x1d4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <vTaskPrioritySet+0x1d4>)
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800279e:	4923      	ldr	r1, [pc, #140]	@ (800282c <vTaskPrioritySet+0x1d0>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3304      	adds	r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	3204      	adds	r2, #4
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	1d1a      	adds	r2, r3, #4
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4a13      	ldr	r2, [pc, #76]	@ (800282c <vTaskPrioritySet+0x1d0>)
 80027de:	441a      	add	r2, r3
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	4910      	ldr	r1, [pc, #64]	@ (800282c <vTaskPrioritySet+0x1d0>)
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c59      	adds	r1, r3, #1
 80027f8:	480c      	ldr	r0, [pc, #48]	@ (800282c <vTaskPrioritySet+0x1d0>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4403      	add	r3, r0
 8002804:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <vTaskPrioritySet+0x1c0>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <vTaskPrioritySet+0x1d8>)
 800280e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800281c:	f000 fdc8 	bl	80033b0 <vPortExitCritical>
    }
 8002820:	bf00      	nop
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000084 	.word	0x20000084
 800282c:	20000088 	.word	0x20000088
 8002830:	20000178 	.word	0x20000178
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800283e:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <vTaskStartScheduler+0x98>)
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	2282      	movs	r2, #130	@ 0x82
 800284a:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <vTaskStartScheduler+0x9c>)
 800284c:	4822      	ldr	r0, [pc, #136]	@ (80028d8 <vTaskStartScheduler+0xa0>)
 800284e:	f7ff fd60 	bl	8002312 <xTaskCreate>
 8002852:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d124      	bne.n	80028a4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	60bb      	str	r3, [r7, #8]
    }
 800286c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <vTaskStartScheduler+0xa4>)
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <vTaskStartScheduler+0xa8>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800287c:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <vTaskStartScheduler+0xac>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002882:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <vTaskStartScheduler+0xb0>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <vTaskStartScheduler+0x98>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d102      	bne.n	8002894 <vTaskStartScheduler+0x5c>
 800288e:	f002 fa43 	bl	8004d18 <SEGGER_SYSVIEW_OnIdle>
 8002892:	e004      	b.n	800289e <vTaskStartScheduler+0x66>
 8002894:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <vTaskStartScheduler+0xb0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fa9b 	bl	8004dd4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800289e:	f000 fc31 	bl	8003104 <xPortStartScheduler>
 80028a2:	e00f      	b.n	80028c4 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d10b      	bne.n	80028c4 <vTaskStartScheduler+0x8c>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	607b      	str	r3, [r7, #4]
    }
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <vTaskStartScheduler+0xb4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000194 	.word	0x20000194
 80028d4:	08005258 	.word	0x08005258
 80028d8:	08002e5d 	.word	0x08002e5d
 80028dc:	20000190 	.word	0x20000190
 80028e0:	2000017c 	.word	0x2000017c
 80028e4:	20000174 	.word	0x20000174
 80028e8:	20000084 	.word	0x20000084
 80028ec:	08005338 	.word	0x08005338

080028f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <vTaskSuspendAll+0x18>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	4a03      	ldr	r2, [pc, #12]	@ (8002908 <vTaskSuspendAll+0x18>)
 80028fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	20000198 	.word	0x20000198

0800290c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800291a:	4b73      	ldr	r3, [pc, #460]	@ (8002ae8 <xTaskResumeAll+0x1dc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <xTaskResumeAll+0x2e>
        __asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	607b      	str	r3, [r7, #4]
    }
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800293a:	f000 fd07 	bl	800334c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800293e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae8 <xTaskResumeAll+0x1dc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3b01      	subs	r3, #1
 8002944:	4a68      	ldr	r2, [pc, #416]	@ (8002ae8 <xTaskResumeAll+0x1dc>)
 8002946:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002948:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <xTaskResumeAll+0x1dc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 80c4 	bne.w	8002ada <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002952:	4b66      	ldr	r3, [pc, #408]	@ (8002aec <xTaskResumeAll+0x1e0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80bf 	beq.w	8002ada <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800295c:	e08e      	b.n	8002a7c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800295e:	4b64      	ldr	r3, [pc, #400]	@ (8002af0 <xTaskResumeAll+0x1e4>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	6a12      	ldr	r2, [r2, #32]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	69d2      	ldr	r2, [r2, #28]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3318      	adds	r3, #24
 8002988:	429a      	cmp	r2, r3
 800298a:	d103      	bne.n	8002994 <xTaskResumeAll+0x88>
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2200      	movs	r2, #0
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	6892      	ldr	r2, [r2, #8]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d103      	bne.n	80029d2 <xTaskResumeAll+0xc6>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 fa37 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	2201      	movs	r2, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	4b40      	ldr	r3, [pc, #256]	@ (8002af4 <xTaskResumeAll+0x1e8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	4a3e      	ldr	r2, [pc, #248]	@ (8002af4 <xTaskResumeAll+0x1e8>)
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a00:	493d      	ldr	r1, [pc, #244]	@ (8002af8 <xTaskResumeAll+0x1ec>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	3204      	adds	r2, #4
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	1d1a      	adds	r2, r3, #4
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002af8 <xTaskResumeAll+0x1ec>)
 8002a40:	441a      	add	r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a4a:	492b      	ldr	r1, [pc, #172]	@ (8002af8 <xTaskResumeAll+0x1ec>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c59      	adds	r1, r3, #1
 8002a5a:	4827      	ldr	r0, [pc, #156]	@ (8002af8 <xTaskResumeAll+0x1ec>)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4403      	add	r3, r0
 8002a66:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6c:	4b23      	ldr	r3, [pc, #140]	@ (8002afc <xTaskResumeAll+0x1f0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002a76:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <xTaskResumeAll+0x1f4>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <xTaskResumeAll+0x1e4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f af6c 	bne.w	800295e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a8c:	f000 fa7c 	bl	8002f88 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <xTaskResumeAll+0x1f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a9c:	f000 f858 	bl	8002b50 <xTaskIncrementTick>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <xTaskResumeAll+0x1f4>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f1      	bne.n	8002a9c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <xTaskResumeAll+0x1f8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <xTaskResumeAll+0x1f4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002aca:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <xTaskResumeAll+0x1fc>)
 8002acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ada:	f000 fc69 	bl	80033b0 <vPortExitCritical>

    return xAlreadyYielded;
 8002ade:	69bb      	ldr	r3, [r7, #24]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000198 	.word	0x20000198
 8002aec:	20000170 	.word	0x20000170
 8002af0:	20000130 	.word	0x20000130
 8002af4:	20000178 	.word	0x20000178
 8002af8:	20000088 	.word	0x20000088
 8002afc:	20000084 	.word	0x20000084
 8002b00:	20000184 	.word	0x20000184
 8002b04:	20000180 	.word	0x20000180
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <xTaskGetTickCount+0x1c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000174 	.word	0x20000174

08002b2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b32:	f000 fcfb 	bl	800352c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b3a:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <xTaskGetTickCountFromISR+0x20>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b40:	683b      	ldr	r3, [r7, #0]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000174 	.word	0x20000174

08002b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b5a:	4b80      	ldr	r3, [pc, #512]	@ (8002d5c <xTaskIncrementTick+0x20c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 80f1 	bne.w	8002d46 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b64:	4b7e      	ldr	r3, [pc, #504]	@ (8002d60 <xTaskIncrementTick+0x210>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8002d60 <xTaskIncrementTick+0x210>)
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d121      	bne.n	8002bbc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b78:	4b7a      	ldr	r3, [pc, #488]	@ (8002d64 <xTaskIncrementTick+0x214>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <xTaskIncrementTick+0x4a>
        __asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	607b      	str	r3, [r7, #4]
    }
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <xTaskIncrementTick+0x46>
 8002b9a:	4b72      	ldr	r3, [pc, #456]	@ (8002d64 <xTaskIncrementTick+0x214>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	4b71      	ldr	r3, [pc, #452]	@ (8002d68 <xTaskIncrementTick+0x218>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a6f      	ldr	r2, [pc, #444]	@ (8002d64 <xTaskIncrementTick+0x214>)
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4a6f      	ldr	r2, [pc, #444]	@ (8002d68 <xTaskIncrementTick+0x218>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b6f      	ldr	r3, [pc, #444]	@ (8002d6c <xTaskIncrementTick+0x21c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a6d      	ldr	r2, [pc, #436]	@ (8002d6c <xTaskIncrementTick+0x21c>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	f000 f9e6 	bl	8002f88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <xTaskIncrementTick+0x220>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	f0c0 80aa 	bcc.w	8002d1c <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bc8:	4b66      	ldr	r3, [pc, #408]	@ (8002d64 <xTaskIncrementTick+0x214>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd2:	4b67      	ldr	r3, [pc, #412]	@ (8002d70 <xTaskIncrementTick+0x220>)
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	601a      	str	r2, [r3, #0]
                    break;
 8002bda:	e09f      	b.n	8002d1c <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bdc:	4b61      	ldr	r3, [pc, #388]	@ (8002d64 <xTaskIncrementTick+0x214>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d203      	bcs.n	8002bfc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8002d70 <xTaskIncrementTick+0x220>)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002bfa:	e08f      	b.n	8002d1c <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d103      	bne.n	8002c2a <xTaskIncrementTick+0xda>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01e      	beq.n	8002c80 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	6a12      	ldr	r2, [r2, #32]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	69d2      	ldr	r2, [r2, #28]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	3318      	adds	r3, #24
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d103      	bne.n	8002c70 <xTaskIncrementTick+0x120>
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2200      	movs	r2, #0
 8002c74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 f8e8 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <xTaskIncrementTick+0x224>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	4a37      	ldr	r2, [pc, #220]	@ (8002d74 <xTaskIncrementTick+0x224>)
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9e:	4936      	ldr	r1, [pc, #216]	@ (8002d78 <xTaskIncrementTick+0x228>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3304      	adds	r3, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	3204      	adds	r2, #4
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4a26      	ldr	r2, [pc, #152]	@ (8002d78 <xTaskIncrementTick+0x228>)
 8002cde:	441a      	add	r2, r3
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	615a      	str	r2, [r3, #20]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce8:	4923      	ldr	r1, [pc, #140]	@ (8002d78 <xTaskIncrementTick+0x228>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1c59      	adds	r1, r3, #1
 8002cf8:	481f      	ldr	r0, [pc, #124]	@ (8002d78 <xTaskIncrementTick+0x228>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4403      	add	r3, r0
 8002d04:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d7c <xTaskIncrementTick+0x22c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f67f af59 	bls.w	8002bc8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d1a:	e755      	b.n	8002bc8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d1c:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <xTaskIncrementTick+0x22c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d22:	4915      	ldr	r1, [pc, #84]	@ (8002d78 <xTaskIncrementTick+0x228>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d901      	bls.n	8002d38 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002d38:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <xTaskIncrementTick+0x230>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d44:	e004      	b.n	8002d50 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <xTaskIncrementTick+0x234>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <xTaskIncrementTick+0x234>)
 8002d4e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3728      	adds	r7, #40	@ 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000198 	.word	0x20000198
 8002d60:	20000174 	.word	0x20000174
 8002d64:	20000128 	.word	0x20000128
 8002d68:	2000012c 	.word	0x2000012c
 8002d6c:	20000188 	.word	0x20000188
 8002d70:	20000190 	.word	0x20000190
 8002d74:	20000178 	.word	0x20000178
 8002d78:	20000088 	.word	0x20000088
 8002d7c:	20000084 	.word	0x20000084
 8002d80:	20000184 	.word	0x20000184
 8002d84:	20000180 	.word	0x20000180

08002d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <vTaskSwitchContext+0xbc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d96:	4b2c      	ldr	r3, [pc, #176]	@ (8002e48 <vTaskSwitchContext+0xc0>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002d9c:	e04e      	b.n	8002e3c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <vTaskSwitchContext+0xc0>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da4:	4b29      	ldr	r3, [pc, #164]	@ (8002e4c <vTaskSwitchContext+0xc4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	f1c3 031f 	rsb	r3, r3, #31
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	4925      	ldr	r1, [pc, #148]	@ (8002e50 <vTaskSwitchContext+0xc8>)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	607b      	str	r3, [r7, #4]
    }
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <vTaskSwitchContext+0x5a>
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4a17      	ldr	r2, [pc, #92]	@ (8002e50 <vTaskSwitchContext+0xc8>)
 8002df2:	4413      	add	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3308      	adds	r3, #8
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d104      	bne.n	8002e16 <vTaskSwitchContext+0x8e>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <vTaskSwitchContext+0xcc>)
 8002e1e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <vTaskSwitchContext+0xcc>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <vTaskSwitchContext+0xd0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d102      	bne.n	8002e32 <vTaskSwitchContext+0xaa>
 8002e2c:	f001 ff74 	bl	8004d18 <SEGGER_SYSVIEW_OnIdle>
}
 8002e30:	e004      	b.n	8002e3c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <vTaskSwitchContext+0xcc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 ffcc 	bl	8004dd4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e3c:	bf00      	nop
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000198 	.word	0x20000198
 8002e48:	20000184 	.word	0x20000184
 8002e4c:	20000178 	.word	0x20000178
 8002e50:	20000088 	.word	0x20000088
 8002e54:	20000084 	.word	0x20000084
 8002e58:	20000194 	.word	0x20000194

08002e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e64:	f000 f852 	bl	8002f0c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <prvIdleTask+0x28>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d9f9      	bls.n	8002e64 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <prvIdleTask+0x2c>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e80:	e7f0      	b.n	8002e64 <prvIdleTask+0x8>
 8002e82:	bf00      	nop
 8002e84:	20000088 	.word	0x20000088
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	e00c      	b.n	8002eb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <prvInitialiseTaskLists+0x60>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f9dc 	bl	8002264 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d9ef      	bls.n	8002e98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002eb8:	480d      	ldr	r0, [pc, #52]	@ (8002ef0 <prvInitialiseTaskLists+0x64>)
 8002eba:	f7ff f9d3 	bl	8002264 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002ebe:	480d      	ldr	r0, [pc, #52]	@ (8002ef4 <prvInitialiseTaskLists+0x68>)
 8002ec0:	f7ff f9d0 	bl	8002264 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <prvInitialiseTaskLists+0x6c>)
 8002ec6:	f7ff f9cd 	bl	8002264 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002eca:	480c      	ldr	r0, [pc, #48]	@ (8002efc <prvInitialiseTaskLists+0x70>)
 8002ecc:	f7ff f9ca 	bl	8002264 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ed0:	480b      	ldr	r0, [pc, #44]	@ (8002f00 <prvInitialiseTaskLists+0x74>)
 8002ed2:	f7ff f9c7 	bl	8002264 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <prvInitialiseTaskLists+0x78>)
 8002ed8:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <prvInitialiseTaskLists+0x64>)
 8002eda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <prvInitialiseTaskLists+0x7c>)
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <prvInitialiseTaskLists+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000088 	.word	0x20000088
 8002ef0:	20000100 	.word	0x20000100
 8002ef4:	20000114 	.word	0x20000114
 8002ef8:	20000130 	.word	0x20000130
 8002efc:	20000144 	.word	0x20000144
 8002f00:	2000015c 	.word	0x2000015c
 8002f04:	20000128 	.word	0x20000128
 8002f08:	2000012c 	.word	0x2000012c

08002f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f12:	e019      	b.n	8002f48 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002f14:	f000 fa1a 	bl	800334c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <prvCheckTasksWaitingTermination+0x50>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f9ca 	bl	80022be <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <prvCheckTasksWaitingTermination+0x54>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <prvCheckTasksWaitingTermination+0x54>)
 8002f32:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <prvCheckTasksWaitingTermination+0x58>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <prvCheckTasksWaitingTermination+0x58>)
 8002f3c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002f3e:	f000 fa37 	bl	80033b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f810 	bl	8002f68 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <prvCheckTasksWaitingTermination+0x58>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e1      	bne.n	8002f14 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000144 	.word	0x20000144
 8002f60:	20000170 	.word	0x20000170
 8002f64:	20000158 	.word	0x20000158

08002f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fbd7 	bl	8003728 <vPortFree>
            vPortFree( pxTCB );
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fbd4 	bl	8003728 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <prvResetNextTaskUnblockTime+0x30>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <prvResetNextTaskUnblockTime+0x34>)
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f9e:	e005      	b.n	8002fac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fa0:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <prvResetNextTaskUnblockTime+0x30>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <prvResetNextTaskUnblockTime+0x34>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000128 	.word	0x20000128
 8002fbc:	20000190 	.word	0x20000190

08002fc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002fc6:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <xTaskGetCurrentTaskHandle+0x1c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002fcc:	687b      	ldr	r3, [r7, #4]
    }
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000084 	.word	0x20000084

08002fe0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ff8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3b04      	subs	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f023 0201 	bic.w	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3b04      	subs	r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003010:	4a0c      	ldr	r2, [pc, #48]	@ (8003044 <pxPortInitialiseStack+0x64>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3b14      	subs	r3, #20
 800301a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3b04      	subs	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f06f 0202 	mvn.w	r2, #2
 800302e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3b20      	subs	r3, #32
 8003034:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	08003049 	.word	0x08003049

08003048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003052:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <prvTaskExitError+0x58>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d00b      	beq.n	8003074 <prvTaskExitError+0x2c>
        __asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	60fb      	str	r3, [r7, #12]
    }
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <prvTaskExitError+0x28>
        __asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60bb      	str	r3, [r7, #8]
    }
 8003086:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003088:	bf00      	nop
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0fc      	beq.n	800308a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	2000000c 	.word	0x2000000c
	...

080030b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <pxCurrentTCBConst2>)
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6808      	ldr	r0, [r1, #0]
 80030b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ba:	f380 8809 	msr	PSP, r0
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8811 	msr	BASEPRI, r0
 80030ca:	4770      	bx	lr
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst2>:
 80030d0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80030d8:	4808      	ldr	r0, [pc, #32]	@ (80030fc <prvPortStartFirstTask+0x24>)
 80030da:	6800      	ldr	r0, [r0, #0]
 80030dc:	6800      	ldr	r0, [r0, #0]
 80030de:	f380 8808 	msr	MSP, r0
 80030e2:	f04f 0000 	mov.w	r0, #0
 80030e6:	f380 8814 	msr	CONTROL, r0
 80030ea:	b662      	cpsie	i
 80030ec:	b661      	cpsie	f
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	df00      	svc	0
 80030f8:	bf00      	nop
 80030fa:	0000      	.short	0x0000
 80030fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop

08003104 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800310a:	4b47      	ldr	r3, [pc, #284]	@ (8003228 <xPortStartScheduler+0x124>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a47      	ldr	r2, [pc, #284]	@ (800322c <xPortStartScheduler+0x128>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10b      	bne.n	800312c <xPortStartScheduler+0x28>
        __asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	60fb      	str	r3, [r7, #12]
    }
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800312c:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <xPortStartScheduler+0x124>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3f      	ldr	r2, [pc, #252]	@ (8003230 <xPortStartScheduler+0x12c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10b      	bne.n	800314e <xPortStartScheduler+0x4a>
        __asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	613b      	str	r3, [r7, #16]
    }
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800314e:	4b39      	ldr	r3, [pc, #228]	@ (8003234 <xPortStartScheduler+0x130>)
 8003150:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	22ff      	movs	r2, #255	@ 0xff
 800315e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <xPortStartScheduler+0x134>)
 8003174:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003176:	4b31      	ldr	r3, [pc, #196]	@ (800323c <xPortStartScheduler+0x138>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800317c:	e009      	b.n	8003192 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800317e:	4b2f      	ldr	r3, [pc, #188]	@ (800323c <xPortStartScheduler+0x138>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <xPortStartScheduler+0x138>)
 8003186:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d0ef      	beq.n	800317e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800319e:	4b27      	ldr	r3, [pc, #156]	@ (800323c <xPortStartScheduler+0x138>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d00b      	beq.n	80031c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	60bb      	str	r3, [r7, #8]
    }
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	e7fd      	b.n	80031be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031c2:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <xPortStartScheduler+0x138>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <xPortStartScheduler+0x138>)
 80031ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <xPortStartScheduler+0x138>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031d4:	4a19      	ldr	r2, [pc, #100]	@ (800323c <xPortStartScheduler+0x138>)
 80031d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <xPortStartScheduler+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <xPortStartScheduler+0x13c>)
 80031e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031ec:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <xPortStartScheduler+0x13c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a13      	ldr	r2, [pc, #76]	@ (8003240 <xPortStartScheduler+0x13c>)
 80031f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80031f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80031f8:	f000 f968 	bl	80034cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80031fc:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <xPortStartScheduler+0x140>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003202:	f000 f987 	bl	8003514 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <xPortStartScheduler+0x144>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0f      	ldr	r2, [pc, #60]	@ (8003248 <xPortStartScheduler+0x144>)
 800320c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003210:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003212:	f7ff ff61 	bl	80030d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003216:	f7ff fdb7 	bl	8002d88 <vTaskSwitchContext>
    prvTaskExitError();
 800321a:	f7ff ff15 	bl	8003048 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000ed00 	.word	0xe000ed00
 800322c:	410fc271 	.word	0x410fc271
 8003230:	410fc270 	.word	0x410fc270
 8003234:	e000e400 	.word	0xe000e400
 8003238:	2000019c 	.word	0x2000019c
 800323c:	200001a0 	.word	0x200001a0
 8003240:	e000ed20 	.word	0xe000ed20
 8003244:	2000000c 	.word	0x2000000c
 8003248:	e000ef34 	.word	0xe000ef34

0800324c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003252:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <vInitPrioGroupValue+0xe8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a38      	ldr	r2, [pc, #224]	@ (8003338 <vInitPrioGroupValue+0xec>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10b      	bne.n	8003274 <vInitPrioGroupValue+0x28>
        __asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	60fb      	str	r3, [r7, #12]
    }
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003274:	4b2f      	ldr	r3, [pc, #188]	@ (8003334 <vInitPrioGroupValue+0xe8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a30      	ldr	r2, [pc, #192]	@ (800333c <vInitPrioGroupValue+0xf0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10b      	bne.n	8003296 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	613b      	str	r3, [r7, #16]
    }
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003296:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <vInitPrioGroupValue+0xf4>)
 8003298:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	22ff      	movs	r2, #255	@ 0xff
 80032a6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <vInitPrioGroupValue+0xf8>)
 80032bc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032be:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032c4:	e009      	b.n	80032da <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80032c6:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 80032ce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b80      	cmp	r3, #128	@ 0x80
 80032e4:	d0ef      	beq.n	80032c6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032e6:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d00b      	beq.n	800330a <vInitPrioGroupValue+0xbe>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	60bb      	str	r3, [r7, #8]
    }
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	e7fd      	b.n	8003306 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800330a:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	4a0d      	ldr	r2, [pc, #52]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 8003312:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800331c:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <vInitPrioGroupValue+0xfc>)
 800331e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00
 8003338:	410fc271 	.word	0x410fc271
 800333c:	410fc270 	.word	0x410fc270
 8003340:	e000e400 	.word	0xe000e400
 8003344:	2000019c 	.word	0x2000019c
 8003348:	200001a0 	.word	0x200001a0

0800334c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
        __asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	607b      	str	r3, [r7, #4]
    }
 8003364:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003366:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <vPortEnterCritical+0x5c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <vPortEnterCritical+0x5c>)
 800336e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003370:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <vPortEnterCritical+0x5c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d110      	bne.n	800339a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003378:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <vPortEnterCritical+0x60>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00b      	beq.n	800339a <vPortEnterCritical+0x4e>
        __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	603b      	str	r3, [r7, #0]
    }
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <vPortEnterCritical+0x4a>
    }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <vPortExitCritical+0x50>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <vPortExitCritical+0x26>
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	607b      	str	r3, [r7, #4]
    }
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	e7fd      	b.n	80033d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <vPortExitCritical+0x50>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <vPortExitCritical+0x50>)
 80033de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <vPortExitCritical+0x50>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <vPortExitCritical+0x44>
 80033e8:	2300      	movs	r3, #0
 80033ea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80033f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	2000000c 	.word	0x2000000c
	...

08003410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003410:	f3ef 8009 	mrs	r0, PSP
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <pxCurrentTCBConst>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f01e 0f10 	tst.w	lr, #16
 8003420:	bf08      	it	eq
 8003422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342a:	6010      	str	r0, [r2, #0]
 800342c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003434:	f380 8811 	msr	BASEPRI, r0
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f7ff fca2 	bl	8002d88 <vTaskSwitchContext>
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f380 8811 	msr	BASEPRI, r0
 800344c:	bc09      	pop	{r0, r3}
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	6808      	ldr	r0, [r1, #0]
 8003452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003456:	f01e 0f10 	tst.w	lr, #16
 800345a:	bf08      	it	eq
 800345c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003460:	f380 8809 	msr	PSP, r0
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w

08003470 <pxCurrentTCBConst>:
 8003470:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
        __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
    }
 8003490:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003492:	f001 fbc7 	bl	8004c24 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003496:	f7ff fb5b 	bl	8002b50 <xTaskIncrementTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80034a0:	f001 fc1e 	bl	8004ce0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <SysTick_Handler+0x50>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e001      	b.n	80034b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80034ae:	f001 fbfb 	bl	8004ca8 <SEGGER_SYSVIEW_RecordExitISR>
 80034b2:	2300      	movs	r3, #0
 80034b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f383 8811 	msr	BASEPRI, r3
    }
 80034bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <vPortSetupTimerInterrupt+0x34>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <vPortSetupTimerInterrupt+0x38>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <vPortSetupTimerInterrupt+0x3c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	@ (800350c <vPortSetupTimerInterrupt+0x40>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <vPortSetupTimerInterrupt+0x44>)
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <vPortSetupTimerInterrupt+0x34>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010
 8003504:	e000e018 	.word	0xe000e018
 8003508:	20000000 	.word	0x20000000
 800350c:	10624dd3 	.word	0x10624dd3
 8003510:	e000e014 	.word	0xe000e014

08003514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003524 <vPortEnableVFP+0x10>
 8003518:	6801      	ldr	r1, [r0, #0]
 800351a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800351e:	6001      	str	r1, [r0, #0]
 8003520:	4770      	bx	lr
 8003522:	0000      	.short	0x0000
 8003524:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop

0800352c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003532:	f3ef 8305 	mrs	r3, IPSR
 8003536:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d915      	bls.n	800356a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800353e:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <vPortValidateInterruptPriority+0x74>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003548:	4b16      	ldr	r3, [pc, #88]	@ (80035a4 <vPortValidateInterruptPriority+0x78>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	7afa      	ldrb	r2, [r7, #11]
 800354e:	429a      	cmp	r2, r3
 8003550:	d20b      	bcs.n	800356a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	607b      	str	r3, [r7, #4]
    }
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800356a:	4b0f      	ldr	r3, [pc, #60]	@ (80035a8 <vPortValidateInterruptPriority+0x7c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003572:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <vPortValidateInterruptPriority+0x80>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d90b      	bls.n	8003592 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
    }
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <vPortValidateInterruptPriority+0x62>
    }
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e3f0 	.word	0xe000e3f0
 80035a4:	2000019c 	.word	0x2000019c
 80035a8:	e000ed0c 	.word	0xe000ed0c
 80035ac:	200001a0 	.word	0x200001a0

080035b0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	@ 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80035bc:	f7ff f998 	bl	80028f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80035c0:	4b54      	ldr	r3, [pc, #336]	@ (8003714 <pvPortMalloc+0x164>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80035c8:	f000 f908 	bl	80037dc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80035d2:	2208      	movs	r2, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	3308      	adds	r3, #8
 80035de:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d804      	bhi.n	80035f4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	e001      	b.n	80035f8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	db71      	blt.n	80036e2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d06e      	beq.n	80036e2 <pvPortMalloc+0x132>
 8003604:	4b44      	ldr	r3, [pc, #272]	@ (8003718 <pvPortMalloc+0x168>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	d869      	bhi.n	80036e2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <pvPortMalloc+0x16c>)
 8003610:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003612:	4b42      	ldr	r3, [pc, #264]	@ (800371c <pvPortMalloc+0x16c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003618:	e004      	b.n	8003624 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d903      	bls.n	8003636 <pvPortMalloc+0x86>
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f1      	bne.n	800361a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003636:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <pvPortMalloc+0x164>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	429a      	cmp	r2, r3
 800363e:	d050      	beq.n	80036e2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2208      	movs	r2, #8
 8003646:	4413      	add	r3, r2
 8003648:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1ad2      	subs	r2, r2, r3
 800365a:	2308      	movs	r3, #8
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	429a      	cmp	r2, r3
 8003660:	d920      	bls.n	80036a4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <pvPortMalloc+0xdc>
        __asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	613b      	str	r3, [r7, #16]
    }
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f000 f8f8 	bl	8003894 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003718 <pvPortMalloc+0x168>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003718 <pvPortMalloc+0x168>)
 80036b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <pvPortMalloc+0x168>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <pvPortMalloc+0x170>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d203      	bcs.n	80036c6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036be:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <pvPortMalloc+0x168>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a17      	ldr	r2, [pc, #92]	@ (8003720 <pvPortMalloc+0x170>)
 80036c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <pvPortMalloc+0x174>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <pvPortMalloc+0x174>)
 80036e0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80036e2:	f7ff f913 	bl	800290c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <pvPortMalloc+0x158>
        __asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	60fb      	str	r3, [r7, #12]
    }
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <pvPortMalloc+0x154>
    return pvReturn;
 8003708:	69fb      	ldr	r3, [r7, #28]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3728      	adds	r7, #40	@ 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20012dac 	.word	0x20012dac
 8003718:	20012db0 	.word	0x20012db0
 800371c:	20012da4 	.word	0x20012da4
 8003720:	20012db4 	.word	0x20012db4
 8003724:	20012db8 	.word	0x20012db8

08003728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d047      	beq.n	80037ca <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800373a:	2308      	movs	r3, #8
 800373c:	425b      	negs	r3, r3
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4413      	add	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	db0b      	blt.n	8003768 <vPortFree+0x40>
        __asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	60fb      	str	r3, [r7, #12]
    }
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <vPortFree+0x60>
        __asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60bb      	str	r3, [r7, #8]
    }
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	da1c      	bge.n	80037ca <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d118      	bne.n	80037ca <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80037a4:	f7ff f8a4 	bl	80028f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <vPortFree+0xac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	4a08      	ldr	r2, [pc, #32]	@ (80037d4 <vPortFree+0xac>)
 80037b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037b6:	6938      	ldr	r0, [r7, #16]
 80037b8:	f000 f86c 	bl	8003894 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <vPortFree+0xb0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	4a05      	ldr	r2, [pc, #20]	@ (80037d8 <vPortFree+0xb0>)
 80037c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80037c6:	f7ff f8a1 	bl	800290c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20012db0 	.word	0x20012db0
 80037d8:	20012dbc 	.word	0x20012dbc

080037dc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037e2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80037e6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80037e8:	4b25      	ldr	r3, [pc, #148]	@ (8003880 <prvHeapInit+0xa4>)
 80037ea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3307      	adds	r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <prvHeapInit+0xa4>)
 800380c:	4413      	add	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <prvHeapInit+0xa8>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800381a:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <prvHeapInit+0xa8>)
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4413      	add	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003828:	2208      	movs	r2, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0307 	bic.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a13      	ldr	r2, [pc, #76]	@ (8003888 <prvHeapInit+0xac>)
 800383c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800383e:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <prvHeapInit+0xac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003846:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <prvHeapInit+0xac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800385c:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <prvHeapInit+0xac>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a08      	ldr	r2, [pc, #32]	@ (800388c <prvHeapInit+0xb0>)
 800386a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a07      	ldr	r2, [pc, #28]	@ (8003890 <prvHeapInit+0xb4>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	200001a4 	.word	0x200001a4
 8003884:	20012da4 	.word	0x20012da4
 8003888:	20012dac 	.word	0x20012dac
 800388c:	20012db4 	.word	0x20012db4
 8003890:	20012db0 	.word	0x20012db0

08003894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800389c:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <prvInsertBlockIntoFreeList+0xac>)
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e002      	b.n	80038a8 <prvInsertBlockIntoFreeList+0x14>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d8f7      	bhi.n	80038a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d108      	bne.n	80038d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	441a      	add	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	441a      	add	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d118      	bne.n	800391c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b15      	ldr	r3, [pc, #84]	@ (8003944 <prvInsertBlockIntoFreeList+0xb0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d00d      	beq.n	8003912 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e008      	b.n	8003924 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <prvInsertBlockIntoFreeList+0xb0>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e003      	b.n	8003924 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d002      	beq.n	8003932 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20012da4 	.word	0x20012da4
 8003944:	20012dac 	.word	0x20012dac

08003948 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800394c:	4803      	ldr	r0, [pc, #12]	@ (800395c <_cbSendSystemDesc+0x14>)
 800394e:	f001 f913 	bl	8004b78 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003952:	4803      	ldr	r0, [pc, #12]	@ (8003960 <_cbSendSystemDesc+0x18>)
 8003954:	f001 f910 	bl	8004b78 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08005260 	.word	0x08005260
 8003960:	08005298 	.word	0x08005298

08003964 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003968:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <SEGGER_SYSVIEW_Conf+0x20>)
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <SEGGER_SYSVIEW_Conf+0x20>)
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <SEGGER_SYSVIEW_Conf+0x24>)
 8003972:	4a06      	ldr	r2, [pc, #24]	@ (800398c <SEGGER_SYSVIEW_Conf+0x28>)
 8003974:	f000 fd86 	bl	8004484 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003978:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800397c:	f000 fdc6 	bl	800450c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000000 	.word	0x20000000
 8003988:	08003949 	.word	0x08003949
 800398c:	0800533c 	.word	0x0800533c

08003990 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b085      	sub	sp, #20
 8003994:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	e033      	b.n	8003a04 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800399c:	491e      	ldr	r1, [pc, #120]	@ (8003a18 <_cbSendTaskList+0x88>)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	491a      	ldr	r1, [pc, #104]	@ (8003a18 <_cbSendTaskList+0x88>)
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3304      	adds	r3, #4
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	4c16      	ldr	r4, [pc, #88]	@ (8003a18 <_cbSendTaskList+0x88>)
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4423      	add	r3, r4
 80039cc:	3308      	adds	r3, #8
 80039ce:	681c      	ldr	r4, [r3, #0]
 80039d0:	4d11      	ldr	r5, [pc, #68]	@ (8003a18 <_cbSendTaskList+0x88>)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	442b      	add	r3, r5
 80039de:	330c      	adds	r3, #12
 80039e0:	681d      	ldr	r5, [r3, #0]
 80039e2:	4e0d      	ldr	r6, [pc, #52]	@ (8003a18 <_cbSendTaskList+0x88>)
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4433      	add	r3, r6
 80039f0:	3310      	adds	r3, #16
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	462b      	mov	r3, r5
 80039f8:	4622      	mov	r2, r4
 80039fa:	f000 f92d 	bl	8003c58 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3301      	adds	r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <_cbSendTaskList+0x8c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d3c6      	bcc.n	800399c <_cbSendTaskList+0xc>
  }
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a18:	20012dc0 	.word	0x20012dc0
 8003a1c:	20012e60 	.word	0x20012e60

08003a20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003a28:	f7ff f880 	bl	8002b2c <xTaskGetTickCountFromISR>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2200      	movs	r2, #0
 8003a30:	469a      	mov	sl, r3
 8003a32:	4693      	mov	fp, r2
 8003a34:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	f04f 0a00 	mov.w	sl, #0
 8003a44:	f04f 0b00 	mov.w	fp, #0
 8003a48:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003a4c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003a50:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003a54:	4652      	mov	r2, sl
 8003a56:	465b      	mov	r3, fp
 8003a58:	1a14      	subs	r4, r2, r0
 8003a5a:	eb63 0501 	sbc.w	r5, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	00ab      	lsls	r3, r5, #2
 8003a68:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a6c:	00a2      	lsls	r2, r4, #2
 8003a6e:	4614      	mov	r4, r2
 8003a70:	461d      	mov	r5, r3
 8003a72:	eb14 0800 	adds.w	r8, r4, r0
 8003a76:	eb45 0901 	adc.w	r9, r5, r1
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8e:	4690      	mov	r8, r2
 8003a90:	4699      	mov	r9, r3
 8003a92:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a96:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003aa8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003ab6:	2205      	movs	r2, #5
 8003ab8:	492b      	ldr	r1, [pc, #172]	@ (8003b68 <SYSVIEW_AddTask+0xc0>)
 8003aba:	68b8      	ldr	r0, [r7, #8]
 8003abc:	f001 fb56 	bl	800516c <memcmp>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04b      	beq.n	8003b5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003ac6:	4b29      	ldr	r3, [pc, #164]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	d903      	bls.n	8003ad6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003ace:	4828      	ldr	r0, [pc, #160]	@ (8003b70 <SYSVIEW_AddTask+0xc8>)
 8003ad0:	f001 faf0 	bl	80050b4 <SEGGER_SYSVIEW_Warn>
    return;
 8003ad4:	e044      	b.n	8003b60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003ad6:	4b25      	ldr	r3, [pc, #148]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4926      	ldr	r1, [pc, #152]	@ (8003b74 <SYSVIEW_AddTask+0xcc>)
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003aea:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4921      	ldr	r1, [pc, #132]	@ (8003b74 <SYSVIEW_AddTask+0xcc>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3304      	adds	r3, #4
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003b00:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	491b      	ldr	r1, [pc, #108]	@ (8003b74 <SYSVIEW_AddTask+0xcc>)
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3308      	adds	r3, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003b16:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4916      	ldr	r1, [pc, #88]	@ (8003b74 <SYSVIEW_AddTask+0xcc>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	330c      	adds	r3, #12
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4910      	ldr	r1, [pc, #64]	@ (8003b74 <SYSVIEW_AddTask+0xcc>)
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003b42:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	4a08      	ldr	r2, [pc, #32]	@ (8003b6c <SYSVIEW_AddTask+0xc4>)
 8003b4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f87e 	bl	8003c58 <SYSVIEW_SendTaskInfo>
 8003b5c:	e000      	b.n	8003b60 <SYSVIEW_AddTask+0xb8>
    return;
 8003b5e:	bf00      	nop

}
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	080052a8 	.word	0x080052a8
 8003b6c:	20012e60 	.word	0x20012e60
 8003b70:	080052b0 	.word	0x080052b0
 8003b74:	20012dc0 	.word	0x20012dc0

08003b78 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003b86:	2205      	movs	r2, #5
 8003b88:	4930      	ldr	r1, [pc, #192]	@ (8003c4c <SYSVIEW_UpdateTask+0xd4>)
 8003b8a:	68b8      	ldr	r0, [r7, #8]
 8003b8c:	f001 faee 	bl	800516c <memcmp>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d056      	beq.n	8003c44 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e00d      	b.n	8003bb8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003b9c:	492c      	ldr	r1, [pc, #176]	@ (8003c50 <SYSVIEW_UpdateTask+0xd8>)
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d008      	beq.n	8003bc4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <SYSVIEW_UpdateTask+0xdc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3ec      	bcc.n	8003b9c <SYSVIEW_UpdateTask+0x24>
 8003bc2:	e000      	b.n	8003bc6 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003bc4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003bc6:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <SYSVIEW_UpdateTask+0xdc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d230      	bcs.n	8003c32 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003bd0:	491f      	ldr	r1, [pc, #124]	@ (8003c50 <SYSVIEW_UpdateTask+0xd8>)
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3304      	adds	r3, #4
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003be4:	491a      	ldr	r1, [pc, #104]	@ (8003c50 <SYSVIEW_UpdateTask+0xd8>)
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003bf8:	4915      	ldr	r1, [pc, #84]	@ (8003c50 <SYSVIEW_UpdateTask+0xd8>)
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	330c      	adds	r3, #12
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003c0c:	4910      	ldr	r1, [pc, #64]	@ (8003c50 <SYSVIEW_UpdateTask+0xd8>)
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3310      	adds	r3, #16
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f814 	bl	8003c58 <SYSVIEW_SendTaskInfo>
 8003c30:	e009      	b.n	8003c46 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff ff33 	bl	8003aa8 <SYSVIEW_AddTask>
 8003c42:	e000      	b.n	8003c46 <SYSVIEW_UpdateTask+0xce>
    return;
 8003c44:	bf00      	nop
  }
}
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	080052a8 	.word	0x080052a8
 8003c50:	20012dc0 	.word	0x20012dc0
 8003c54:	20012e60 	.word	0x20012e60

08003c58 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c66:	f107 0314 	add.w	r3, r7, #20
 8003c6a:	2214      	movs	r2, #20
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fa8c 	bl	800518c <memset>
  TaskInfo.TaskID     = TaskID;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fe7b 	bl	8004988 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c92:	bf00      	nop
 8003c94:	3728      	adds	r7, #40	@ 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003ca2:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <_DoInit+0x98>)
 8003ca4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	@ (8003d38 <_DoInit+0x9c>)
 8003cb6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a20      	ldr	r2, [pc, #128]	@ (8003d3c <_DoInit+0xa0>)
 8003cbc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <_DoInit+0x9c>)
 8003cdc:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	@ (8003d40 <_DoInit+0xa4>)
 8003ce2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3307      	adds	r3, #7
 8003d00:	4a10      	ldr	r2, [pc, #64]	@ (8003d44 <_DoInit+0xa8>)
 8003d02:	6810      	ldr	r0, [r2, #0]
 8003d04:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d06:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d48 <_DoInit+0xac>)
 8003d0e:	6810      	ldr	r0, [r2, #0]
 8003d10:	6018      	str	r0, [r3, #0]
 8003d12:	8891      	ldrh	r1, [r2, #4]
 8003d14:	7992      	ldrb	r2, [r2, #6]
 8003d16:	8099      	strh	r1, [r3, #4]
 8003d18:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d1a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d24:	f3bf 8f5f 	dmb	sy
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20012e64 	.word	0x20012e64
 8003d38:	08005300 	.word	0x08005300
 8003d3c:	20012f0c 	.word	0x20012f0c
 8003d40:	2001330c 	.word	0x2001330c
 8003d44:	0800530c 	.word	0x0800530c
 8003d48:	08005310 	.word	0x08005310

08003d4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	@ 0x30
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d58:	4b3e      	ldr	r3, [pc, #248]	@ (8003e54 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <SEGGER_RTT_ReadNoLock+0x1e>
 8003d66:	f7ff ff99 	bl	8003c9c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	3360      	adds	r3, #96	@ 0x60
 8003d76:	4a37      	ldr	r2, [pc, #220]	@ (8003e54 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d78:	4413      	add	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d92b      	bls.n	8003df0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4293      	cmp	r3, r2
 8003da8:	bf28      	it	cs
 8003daa:	4613      	movcs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	4413      	add	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	6939      	ldr	r1, [r7, #16]
 8003dbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dbe:	f001 fa11 	bl	80051e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4413      	add	r3, r2
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d101      	bne.n	8003df0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf28      	it	cs
 8003e00:	4613      	movcs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d019      	beq.n	8003e3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e10:	4413      	add	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	6939      	ldr	r1, [r7, #16]
 8003e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e1a:	f001 f9e3 	bl	80051e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4413      	add	r3, r2
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3730      	adds	r7, #48	@ 0x30
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20012e64 	.word	0x20012e64

08003e58 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e66:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e74:	f7ff ff12 	bl	8003c9c <_DoInit>
  SEGGER_RTT_LOCK();
 8003e78:	f3ef 8311 	mrs	r3, BASEPRI
 8003e7c:	f04f 0120 	mov.w	r1, #32
 8003e80:	f381 8811 	msr	BASEPRI, r1
 8003e84:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e86:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e88:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e8e:	6939      	ldr	r1, [r7, #16]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	dbeb      	blt.n	8003e8e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003eb6:	e000      	b.n	8003eba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003eb8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	da3f      	bge.n	8003f44 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3304      	adds	r3, #4
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003eee:	6939      	ldr	r1, [r7, #16]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	3320      	adds	r3, #32
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	3328      	adds	r3, #40	@ 0x28
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	3324      	adds	r3, #36	@ 0x24
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	332c      	adds	r3, #44	@ 0x2c
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f3e:	f3bf 8f5f 	dmb	sy
 8003f42:	e002      	b.n	8003f4a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f50:	69fb      	ldr	r3, [r7, #28]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20012e64 	.word	0x20012e64

08003f60 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f6e:	4b33      	ldr	r3, [pc, #204]	@ (800403c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f7c:	f7ff fe8e 	bl	8003c9c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f80:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f82:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d24d      	bcs.n	800402c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003f90:	f3ef 8311 	mrs	r3, BASEPRI
 8003f94:	f04f 0120 	mov.w	r1, #32
 8003f98:	f381 8811 	msr	BASEPRI, r1
 8003f9c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d031      	beq.n	8004008 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3360      	adds	r3, #96	@ 0x60
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3364      	adds	r3, #100	@ 0x64
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	3368      	adds	r3, #104	@ 0x68
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	3370      	adds	r3, #112	@ 0x70
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	336c      	adds	r3, #108	@ 0x6c
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004008:	6979      	ldr	r1, [r7, #20]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	440b      	add	r3, r1
 8004016:	3374      	adds	r3, #116	@ 0x74
 8004018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800401a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800401c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e002      	b.n	8004032 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004032:	69fb      	ldr	r3, [r7, #28]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20012e64 	.word	0x20012e64

08004040 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004050:	e002      	b.n	8004058 <_EncodeStr+0x18>
    Len++;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3301      	adds	r3, #1
 8004056:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f6      	bne.n	8004052 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d901      	bls.n	8004070 <_EncodeStr+0x30>
    Len = Limit;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2bfe      	cmp	r3, #254	@ 0xfe
 8004074:	d806      	bhi.n	8004084 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e011      	b.n	80040a8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	60fa      	str	r2, [r7, #12]
 800408a:	22ff      	movs	r2, #255	@ 0xff
 800408c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	60fa      	str	r2, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	0a19      	lsrs	r1, r3, #8
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60fa      	str	r2, [r7, #12]
 80040a4:	b2ca      	uxtb	r2, r1
 80040a6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040ac:	e00a      	b.n	80040c4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	1c53      	adds	r3, r2, #1
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1c59      	adds	r1, r3, #1
 80040b8:	60f9      	str	r1, [r7, #12]
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	701a      	strb	r2, [r3, #0]
    n++;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3301      	adds	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3f0      	bcc.n	80040ae <_EncodeStr+0x6e>
  }
  return pPayload;
 80040cc:	68fb      	ldr	r3, [r7, #12]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040fa:	4b35      	ldr	r3, [pc, #212]	@ (80041d0 <_HandleIncomingPacket+0xdc>)
 80040fc:	7e1b      	ldrb	r3, [r3, #24]
 80040fe:	4618      	mov	r0, r3
 8004100:	1cfb      	adds	r3, r7, #3
 8004102:	2201      	movs	r2, #1
 8004104:	4619      	mov	r1, r3
 8004106:	f7ff fe21 	bl	8003d4c <SEGGER_RTT_ReadNoLock>
 800410a:	4603      	mov	r3, r0
 800410c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	dd59      	ble.n	80041c8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d032      	beq.n	8004180 <_HandleIncomingPacket+0x8c>
 800411a:	2b80      	cmp	r3, #128	@ 0x80
 800411c:	dc42      	bgt.n	80041a4 <_HandleIncomingPacket+0xb0>
 800411e:	2b07      	cmp	r3, #7
 8004120:	dc16      	bgt.n	8004150 <_HandleIncomingPacket+0x5c>
 8004122:	2b00      	cmp	r3, #0
 8004124:	dd3e      	ble.n	80041a4 <_HandleIncomingPacket+0xb0>
 8004126:	3b01      	subs	r3, #1
 8004128:	2b06      	cmp	r3, #6
 800412a:	d83b      	bhi.n	80041a4 <_HandleIncomingPacket+0xb0>
 800412c:	a201      	add	r2, pc, #4	@ (adr r2, 8004134 <_HandleIncomingPacket+0x40>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004157 	.word	0x08004157
 8004138:	0800415d 	.word	0x0800415d
 800413c:	08004163 	.word	0x08004163
 8004140:	08004169 	.word	0x08004169
 8004144:	0800416f 	.word	0x0800416f
 8004148:	08004175 	.word	0x08004175
 800414c:	0800417b 	.word	0x0800417b
 8004150:	2b7f      	cmp	r3, #127	@ 0x7f
 8004152:	d034      	beq.n	80041be <_HandleIncomingPacket+0xca>
 8004154:	e026      	b.n	80041a4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004156:	f000 fa9d 	bl	8004694 <SEGGER_SYSVIEW_Start>
      break;
 800415a:	e035      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800415c:	f000 fb54 	bl	8004808 <SEGGER_SYSVIEW_Stop>
      break;
 8004160:	e032      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004162:	f000 fd2d 	bl	8004bc0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004166:	e02f      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004168:	f000 fcf2 	bl	8004b50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800416c:	e02c      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800416e:	f000 fb71 	bl	8004854 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004172:	e029      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004174:	f000 ff60 	bl	8005038 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004178:	e026      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800417a:	f000 ff3f 	bl	8004ffc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800417e:	e023      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004180:	4b13      	ldr	r3, [pc, #76]	@ (80041d0 <_HandleIncomingPacket+0xdc>)
 8004182:	7e1b      	ldrb	r3, [r3, #24]
 8004184:	4618      	mov	r0, r3
 8004186:	1cfb      	adds	r3, r7, #3
 8004188:	2201      	movs	r2, #1
 800418a:	4619      	mov	r1, r3
 800418c:	f7ff fdde 	bl	8003d4c <SEGGER_RTT_ReadNoLock>
 8004190:	4603      	mov	r3, r0
 8004192:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	dd13      	ble.n	80041c2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fead 	bl	8004efc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80041a2:	e00e      	b.n	80041c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da0c      	bge.n	80041c6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041ac:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <_HandleIncomingPacket+0xdc>)
 80041ae:	7e1b      	ldrb	r3, [r3, #24]
 80041b0:	4618      	mov	r0, r3
 80041b2:	1cfb      	adds	r3, r7, #3
 80041b4:	2201      	movs	r2, #1
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7ff fdc8 	bl	8003d4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80041bc:	e003      	b.n	80041c6 <_HandleIncomingPacket+0xd2>
      break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <_HandleIncomingPacket+0xd4>
      break;
 80041c6:	bf00      	nop
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20014324 	.word	0x20014324

080041d4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	@ 0x30
 80041d8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80041da:	2301      	movs	r3, #1
 80041dc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e8:	4b31      	ldr	r3, [pc, #196]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ee:	e00b      	b.n	8004208 <_TrySendOverflowPacket+0x34>
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	1c59      	adds	r1, r3, #1
 80041f8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80041fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	09db      	lsrs	r3, r3, #7
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	2b7f      	cmp	r3, #127	@ 0x7f
 800420c:	d8f0      	bhi.n	80041f0 <_TrySendOverflowPacket+0x1c>
 800420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800421e:	4b25      	ldr	r3, [pc, #148]	@ (80042b4 <_TrySendOverflowPacket+0xe0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004224:	4b22      	ldr	r3, [pc, #136]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	e00b      	b.n	8004250 <_TrySendOverflowPacket+0x7c>
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	6279      	str	r1, [r7, #36]	@ 0x24
 8004242:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	09db      	lsrs	r3, r3, #7
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b7f      	cmp	r3, #127	@ 0x7f
 8004254:	d8f0      	bhi.n	8004238 <_TrySendOverflowPacket+0x64>
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	627a      	str	r2, [r7, #36]	@ 0x24
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004266:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	4618      	mov	r0, r3
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	461a      	mov	r2, r3
 8004274:	1d3b      	adds	r3, r7, #4
 8004276:	4619      	mov	r1, r3
 8004278:	f7fb ffaa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800427c:	4603      	mov	r3, r0
 800427e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004286:	4a0a      	ldr	r2, [pc, #40]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800428c:	4b08      	ldr	r3, [pc, #32]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	3b01      	subs	r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e004      	b.n	80042a4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	3301      	adds	r3, #1
 80042a0:	4a03      	ldr	r2, [pc, #12]	@ (80042b0 <_TrySendOverflowPacket+0xdc>)
 80042a2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80042a4:	693b      	ldr	r3, [r7, #16]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3730      	adds	r7, #48	@ 0x30
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20014324 	.word	0x20014324
 80042b4:	e0001004 	.word	0xe0001004

080042b8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	@ 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80042c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004478 <_SendPacket+0x1c0>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d010      	beq.n	80042ee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80042cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <_SendPacket+0x1c0>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a3 	beq.w	800441c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80042d6:	4b68      	ldr	r3, [pc, #416]	@ (8004478 <_SendPacket+0x1c0>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d109      	bne.n	80042f2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80042de:	f7ff ff79 	bl	80041d4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80042e2:	4b65      	ldr	r3, [pc, #404]	@ (8004478 <_SendPacket+0x1c0>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	f040 809a 	bne.w	8004420 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80042ec:	e001      	b.n	80042f2 <_SendPacket+0x3a>
    goto Send;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <_SendPacket+0x3c>
Send:
 80042f2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b1f      	cmp	r3, #31
 80042f8:	d809      	bhi.n	800430e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80042fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004478 <_SendPacket+0x1c0>)
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 808b 	bne.w	8004424 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b17      	cmp	r3, #23
 8004312:	d807      	bhi.n	8004324 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3b01      	subs	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e03d      	b.n	80043a0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004330:	d912      	bls.n	8004358 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	09da      	lsrs	r2, r3, #7
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3b01      	subs	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	3a01      	subs	r2, #1
 800434a:	60fa      	str	r2, [r7, #12]
 800434c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004350:	b2da      	uxtb	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e006      	b.n	8004366 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b7f      	cmp	r3, #127	@ 0x7f
 800436a:	d912      	bls.n	8004392 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	09da      	lsrs	r2, r3, #7
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	3a01      	subs	r2, #1
 8004384:	60fa      	str	r2, [r7, #12]
 8004386:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e006      	b.n	80043a0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043a0:	4b36      	ldr	r3, [pc, #216]	@ (800447c <_SendPacket+0x1c4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043a6:	4b34      	ldr	r3, [pc, #208]	@ (8004478 <_SendPacket+0x1c0>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	e00b      	b.n	80043d2 <_SendPacket+0x11a>
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	1c59      	adds	r1, r3, #1
 80043c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80043c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	09db      	lsrs	r3, r3, #7
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80043d6:	d8f0      	bhi.n	80043ba <_SendPacket+0x102>
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80043de:	6a3a      	ldr	r2, [r7, #32]
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80043e8:	4b23      	ldr	r3, [pc, #140]	@ (8004478 <_SendPacket+0x1c0>)
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	4618      	mov	r0, r3
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	f7fb feea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043fc:	4603      	mov	r3, r0
 80043fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004406:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <_SendPacket+0x1c0>)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	60d3      	str	r3, [r2, #12]
 800440c:	e00b      	b.n	8004426 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800440e:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <_SendPacket+0x1c0>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <_SendPacket+0x1c0>)
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e004      	b.n	8004426 <_SendPacket+0x16e>
    goto SendDone;
 800441c:	bf00      	nop
 800441e:	e002      	b.n	8004426 <_SendPacket+0x16e>
      goto SendDone;
 8004420:	bf00      	nop
 8004422:	e000      	b.n	8004426 <_SendPacket+0x16e>
      goto SendDone;
 8004424:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <_SendPacket+0x1c0>)
 8004428:	7e1b      	ldrb	r3, [r3, #24]
 800442a:	4619      	mov	r1, r3
 800442c:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <_SendPacket+0x1c8>)
 800442e:	460b      	mov	r3, r1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	440b      	add	r3, r1
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	336c      	adds	r3, #108	@ 0x6c
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <_SendPacket+0x1c0>)
 800443e:	7e1b      	ldrb	r3, [r3, #24]
 8004440:	4618      	mov	r0, r3
 8004442:	490f      	ldr	r1, [pc, #60]	@ (8004480 <_SendPacket+0x1c8>)
 8004444:	4603      	mov	r3, r0
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4403      	add	r3, r0
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	3370      	adds	r3, #112	@ 0x70
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d00b      	beq.n	800446e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <_SendPacket+0x1c0>)
 8004458:	789b      	ldrb	r3, [r3, #2]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800445e:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <_SendPacket+0x1c0>)
 8004460:	2201      	movs	r2, #1
 8004462:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004464:	f7ff fe46 	bl	80040f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004468:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <_SendPacket+0x1c0>)
 800446a:	2200      	movs	r2, #0
 800446c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800446e:	bf00      	nop
 8004470:	3728      	adds	r7, #40	@ 0x28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20014324 	.word	0x20014324
 800447c:	e0001004 	.word	0xe0001004
 8004480:	20012e64 	.word	0x20012e64

08004484 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004492:	2300      	movs	r3, #0
 8004494:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004498:	4917      	ldr	r1, [pc, #92]	@ (80044f8 <SEGGER_SYSVIEW_Init+0x74>)
 800449a:	4818      	ldr	r0, [pc, #96]	@ (80044fc <SEGGER_SYSVIEW_Init+0x78>)
 800449c:	f7ff fcdc 	bl	8003e58 <SEGGER_RTT_AllocUpBuffer>
 80044a0:	4603      	mov	r3, r0
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b16      	ldr	r3, [pc, #88]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044a6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80044a8:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044aa:	785a      	ldrb	r2, [r3, #1]
 80044ac:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044ae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044b0:	4b13      	ldr	r3, [pc, #76]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044b2:	7e1b      	ldrb	r3, [r3, #24]
 80044b4:	4618      	mov	r0, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2308      	movs	r3, #8
 80044bc:	4a11      	ldr	r2, [pc, #68]	@ (8004504 <SEGGER_SYSVIEW_Init+0x80>)
 80044be:	490f      	ldr	r1, [pc, #60]	@ (80044fc <SEGGER_SYSVIEW_Init+0x78>)
 80044c0:	f7ff fd4e 	bl	8003f60 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80044c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <SEGGER_SYSVIEW_Init+0x84>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044d0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80044d2:	4a0b      	ldr	r2, [pc, #44]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80044d8:	4a09      	ldr	r2, [pc, #36]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80044de:	4a08      	ldr	r2, [pc, #32]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80044e4:	4a06      	ldr	r2, [pc, #24]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80044ea:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <SEGGER_SYSVIEW_Init+0x7c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	2001331c 	.word	0x2001331c
 80044fc:	08005318 	.word	0x08005318
 8004500:	20014324 	.word	0x20014324
 8004504:	2001431c 	.word	0x2001431c
 8004508:	e0001004 	.word	0xe0001004

0800450c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004514:	4a04      	ldr	r2, [pc, #16]	@ (8004528 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6113      	str	r3, [r2, #16]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20014324 	.word	0x20014324

0800452c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004534:	f3ef 8311 	mrs	r3, BASEPRI
 8004538:	f04f 0120 	mov.w	r1, #32
 800453c:	f381 8811 	msr	BASEPRI, r1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4808      	ldr	r0, [pc, #32]	@ (8004564 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004544:	f7ff fdc9 	bl	80040da <_PreparePacket>
 8004548:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68b8      	ldr	r0, [r7, #8]
 8004550:	f7ff feb2 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f383 8811 	msr	BASEPRI, r3
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20014354 	.word	0x20014354

08004568 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004572:	f3ef 8311 	mrs	r3, BASEPRI
 8004576:	f04f 0120 	mov.w	r1, #32
 800457a:	f381 8811 	msr	BASEPRI, r1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	4816      	ldr	r0, [pc, #88]	@ (80045dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004582:	f7ff fdaa 	bl	80040da <_PreparePacket>
 8004586:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e00b      	b.n	80045ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	1c59      	adds	r1, r3, #1
 800459e:	61f9      	str	r1, [r7, #28]
 80045a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	09db      	lsrs	r3, r3, #7
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80045b2:	d8f0      	bhi.n	8004596 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	61fa      	str	r2, [r7, #28]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	6938      	ldr	r0, [r7, #16]
 80045ca:	f7ff fe75 	bl	80042b8 <_SendPacket>
  RECORD_END();
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f383 8811 	msr	BASEPRI, r3
}
 80045d4:	bf00      	nop
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20014354 	.word	0x20014354

080045e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	@ 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80045ec:	f3ef 8311 	mrs	r3, BASEPRI
 80045f0:	f04f 0120 	mov.w	r1, #32
 80045f4:	f381 8811 	msr	BASEPRI, r1
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	4825      	ldr	r0, [pc, #148]	@ (8004690 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80045fc:	f7ff fd6d 	bl	80040da <_PreparePacket>
 8004600:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800460e:	e00b      	b.n	8004628 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	b2da      	uxtb	r2, r3
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800461a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	09db      	lsrs	r3, r3, #7
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	2b7f      	cmp	r3, #127	@ 0x7f
 800462c:	d8f0      	bhi.n	8004610 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800462e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	e00b      	b.n	8004660 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	6279      	str	r1, [r7, #36]	@ 0x24
 8004652:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	09db      	lsrs	r3, r3, #7
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	2b7f      	cmp	r3, #127	@ 0x7f
 8004664:	d8f0      	bhi.n	8004648 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	627a      	str	r2, [r7, #36]	@ 0x24
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	69b8      	ldr	r0, [r7, #24]
 800467c:	f7ff fe1c 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f383 8811 	msr	BASEPRI, r3
}
 8004686:	bf00      	nop
 8004688:	3730      	adds	r7, #48	@ 0x30
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20014354 	.word	0x20014354

08004694 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	@ 0x30
 8004698:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800469a:	4b58      	ldr	r3, [pc, #352]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046a0:	f3ef 8311 	mrs	r3, BASEPRI
 80046a4:	f04f 0120 	mov.w	r1, #32
 80046a8:	f381 8811 	msr	BASEPRI, r1
 80046ac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046ae:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	220a      	movs	r2, #10
 80046b4:	4952      	ldr	r1, [pc, #328]	@ (8004800 <SEGGER_SYSVIEW_Start+0x16c>)
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fb fd8a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046c2:	200a      	movs	r0, #10
 80046c4:	f7ff ff32 	bl	800452c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046c8:	f3ef 8311 	mrs	r3, BASEPRI
 80046cc:	f04f 0120 	mov.w	r1, #32
 80046d0:	f381 8811 	msr	BASEPRI, r1
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	484b      	ldr	r0, [pc, #300]	@ (8004804 <SEGGER_SYSVIEW_Start+0x170>)
 80046d8:	f7ff fcff 	bl	80040da <_PreparePacket>
 80046dc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e6:	4b45      	ldr	r3, [pc, #276]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ec:	e00b      	b.n	8004706 <SEGGER_SYSVIEW_Start+0x72>
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f4:	1c59      	adds	r1, r3, #1
 80046f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80046f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	09db      	lsrs	r3, r3, #7
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	2b7f      	cmp	r3, #127	@ 0x7f
 800470a:	d8f0      	bhi.n	80046ee <SEGGER_SYSVIEW_Start+0x5a>
 800470c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004720:	4b36      	ldr	r3, [pc, #216]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	e00b      	b.n	8004740 <SEGGER_SYSVIEW_Start+0xac>
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	1c59      	adds	r1, r3, #1
 8004730:	6279      	str	r1, [r7, #36]	@ 0x24
 8004732:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	09db      	lsrs	r3, r3, #7
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b7f      	cmp	r3, #127	@ 0x7f
 8004744:	d8f0      	bhi.n	8004728 <SEGGER_SYSVIEW_Start+0x94>
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	627a      	str	r2, [r7, #36]	@ 0x24
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	4b28      	ldr	r3, [pc, #160]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e00b      	b.n	800477a <SEGGER_SYSVIEW_Start+0xe6>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	61f9      	str	r1, [r7, #28]
 800476c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	09db      	lsrs	r3, r3, #7
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b7f      	cmp	r3, #127	@ 0x7f
 800477e:	d8f0      	bhi.n	8004762 <SEGGER_SYSVIEW_Start+0xce>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e00b      	b.n	80047b2 <SEGGER_SYSVIEW_Start+0x11e>
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	6179      	str	r1, [r7, #20]
 80047a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80047b6:	d8f0      	bhi.n	800479a <SEGGER_SYSVIEW_Start+0x106>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	617a      	str	r2, [r7, #20]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047c8:	2218      	movs	r2, #24
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fd73 	bl	80042b8 <_SendPacket>
      RECORD_END();
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <SEGGER_SYSVIEW_Start+0x168>)
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80047e6:	f000 f9eb 	bl	8004bc0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80047ea:	f000 f9b1 	bl	8004b50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80047ee:	f000 fc23 	bl	8005038 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80047f2:	bf00      	nop
 80047f4:	3730      	adds	r7, #48	@ 0x30
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20014324 	.word	0x20014324
 8004800:	08005344 	.word	0x08005344
 8004804:	20014354 	.word	0x20014354

08004808 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800480e:	f3ef 8311 	mrs	r3, BASEPRI
 8004812:	f04f 0120 	mov.w	r1, #32
 8004816:	f381 8811 	msr	BASEPRI, r1
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	480b      	ldr	r0, [pc, #44]	@ (800484c <SEGGER_SYSVIEW_Stop+0x44>)
 800481e:	f7ff fc5c 	bl	80040da <_PreparePacket>
 8004822:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004824:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <SEGGER_SYSVIEW_Stop+0x48>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800482c:	220b      	movs	r2, #11
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f7ff fd41 	bl	80042b8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <SEGGER_SYSVIEW_Stop+0x48>)
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f383 8811 	msr	BASEPRI, r3
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20014354 	.word	0x20014354
 8004850:	20014324 	.word	0x20014324

08004854 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	@ 0x30
 8004858:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800485a:	f3ef 8311 	mrs	r3, BASEPRI
 800485e:	f04f 0120 	mov.w	r1, #32
 8004862:	f381 8811 	msr	BASEPRI, r1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	4845      	ldr	r0, [pc, #276]	@ (8004980 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800486a:	f7ff fc36 	bl	80040da <_PreparePacket>
 800486e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004878:	4b42      	ldr	r3, [pc, #264]	@ (8004984 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800487e:	e00b      	b.n	8004898 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	1c59      	adds	r1, r3, #1
 8004888:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800488a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	09db      	lsrs	r3, r3, #7
 8004896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489a:	2b7f      	cmp	r3, #127	@ 0x7f
 800489c:	d8f0      	bhi.n	8004880 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b2:	4b34      	ldr	r3, [pc, #208]	@ (8004984 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	623b      	str	r3, [r7, #32]
 80048b8:	e00b      	b.n	80048d2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80048c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	09db      	lsrs	r3, r3, #7
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80048d6:	d8f0      	bhi.n	80048ba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80048de:	6a3a      	ldr	r2, [r7, #32]
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e00b      	b.n	800490c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	61f9      	str	r1, [r7, #28]
 80048fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	09db      	lsrs	r3, r3, #7
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004910:	d8f0      	bhi.n	80048f4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	61fa      	str	r2, [r7, #28]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e00b      	b.n	8004944 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	6179      	str	r1, [r7, #20]
 8004936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b7f      	cmp	r3, #127	@ 0x7f
 8004948:	d8f0      	bhi.n	800492c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	617a      	str	r2, [r7, #20]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800495a:	2218      	movs	r2, #24
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	68b8      	ldr	r0, [r7, #8]
 8004960:	f7ff fcaa 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800496a:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004972:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	4798      	blx	r3
  }
}
 8004978:	bf00      	nop
 800497a:	3730      	adds	r7, #48	@ 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20014354 	.word	0x20014354
 8004984:	20014324 	.word	0x20014324

08004988 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b092      	sub	sp, #72	@ 0x48
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004990:	f3ef 8311 	mrs	r3, BASEPRI
 8004994:	f04f 0120 	mov.w	r1, #32
 8004998:	f381 8811 	msr	BASEPRI, r1
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	486a      	ldr	r0, [pc, #424]	@ (8004b48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049a0:	f7ff fb9b 	bl	80040da <_PreparePacket>
 80049a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b66      	ldr	r3, [pc, #408]	@ (8004b4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ba:	e00b      	b.n	80049d4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80049bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	6479      	str	r1, [r7, #68]	@ 0x44
 80049c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049d0:	09db      	lsrs	r3, r3, #7
 80049d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80049d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80049d8:	d8f0      	bhi.n	80049bc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80049da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	647a      	str	r2, [r7, #68]	@ 0x44
 80049e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049f4:	e00b      	b.n	8004a0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004a00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a12:	d8f0      	bhi.n	80049f6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff fb07 	bl	8004040 <_EncodeStr>
 8004a32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a34:	2209      	movs	r2, #9
 8004a36:	68f9      	ldr	r1, [r7, #12]
 8004a38:	6938      	ldr	r0, [r7, #16]
 8004a3a:	f7ff fc3d 	bl	80042b8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b40      	ldr	r3, [pc, #256]	@ (8004b4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a52:	e00b      	b.n	8004a6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	6379      	str	r1, [r7, #52]	@ 0x34
 8004a5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a70:	d8f0      	bhi.n	8004a54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a8c:	e00b      	b.n	8004aa6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	09db      	lsrs	r3, r3, #7
 8004aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aaa:	d8f0      	bhi.n	8004a8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	e00b      	b.n	8004ae0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ad2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	09db      	lsrs	r3, r3, #7
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ae4:	d8f0      	bhi.n	8004ac8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e00b      	b.n	8004b18 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	61f9      	str	r1, [r7, #28]
 8004b0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	09db      	lsrs	r3, r3, #7
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b1c:	d8f0      	bhi.n	8004b00 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	61fa      	str	r2, [r7, #28]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b2e:	2215      	movs	r2, #21
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	6938      	ldr	r0, [r7, #16]
 8004b34:	f7ff fbc0 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
 8004b40:	3748      	adds	r7, #72	@ 0x48
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20014354 	.word	0x20014354
 8004b4c:	20014324 	.word	0x20014324

08004b50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b54:	4b07      	ldr	r3, [pc, #28]	@ (8004b74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b66:	4b03      	ldr	r3, [pc, #12]	@ (8004b74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4798      	blx	r3
  }
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20014324 	.word	0x20014324

08004b78 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b80:	f3ef 8311 	mrs	r3, BASEPRI
 8004b84:	f04f 0120 	mov.w	r1, #32
 8004b88:	f381 8811 	msr	BASEPRI, r1
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	480b      	ldr	r0, [pc, #44]	@ (8004bbc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004b90:	f7ff faa3 	bl	80040da <_PreparePacket>
 8004b94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b96:	2280      	movs	r2, #128	@ 0x80
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	6938      	ldr	r0, [r7, #16]
 8004b9c:	f7ff fa50 	bl	8004040 <_EncodeStr>
 8004ba0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004ba2:	220e      	movs	r2, #14
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	6938      	ldr	r0, [r7, #16]
 8004ba8:	f7ff fb86 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f383 8811 	msr	BASEPRI, r3
}
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20014354 	.word	0x20014354

08004bc0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01a      	beq.n	8004c04 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004bce:	4b13      	ldr	r3, [pc, #76]	@ (8004c1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004bd8:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4798      	blx	r3
 8004be0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004be4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	000a      	movs	r2, r1
 8004bf4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	200d      	movs	r0, #13
 8004bfe:	f7ff fcef 	bl	80045e0 <SEGGER_SYSVIEW_RecordU32x2>
 8004c02:	e006      	b.n	8004c12 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	200c      	movs	r0, #12
 8004c0c:	f7ff fcac 	bl	8004568 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd90      	pop	{r4, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20014324 	.word	0x20014324
 8004c20:	e0001004 	.word	0xe0001004

08004c24 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c2e:	f04f 0120 	mov.w	r1, #32
 8004c32:	f381 8811 	msr	BASEPRI, r1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	4819      	ldr	r0, [pc, #100]	@ (8004ca0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c3a:	f7ff fa4e 	bl	80040da <_PreparePacket>
 8004c3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c44:	4b17      	ldr	r3, [pc, #92]	@ (8004ca4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e00b      	b.n	8004c70 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	6179      	str	r1, [r7, #20]
 8004c62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	09db      	lsrs	r3, r3, #7
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c74:	d8f0      	bhi.n	8004c58 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	617a      	str	r2, [r7, #20]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004c86:	2202      	movs	r2, #2
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	68b8      	ldr	r0, [r7, #8]
 8004c8c:	f7ff fb14 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f383 8811 	msr	BASEPRI, r3
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20014354 	.word	0x20014354
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cae:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb2:	f04f 0120 	mov.w	r1, #32
 8004cb6:	f381 8811 	msr	BASEPRI, r1
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	4807      	ldr	r0, [pc, #28]	@ (8004cdc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cbe:	f7ff fa0c 	bl	80040da <_PreparePacket>
 8004cc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f7ff faf5 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f383 8811 	msr	BASEPRI, r3
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20014354 	.word	0x20014354

08004ce0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cea:	f04f 0120 	mov.w	r1, #32
 8004cee:	f381 8811 	msr	BASEPRI, r1
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	4807      	ldr	r0, [pc, #28]	@ (8004d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004cf6:	f7ff f9f0 	bl	80040da <_PreparePacket>
 8004cfa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004cfc:	2212      	movs	r2, #18
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	f7ff fad9 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f383 8811 	msr	BASEPRI, r3
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20014354 	.word	0x20014354

08004d18 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d22:	f04f 0120 	mov.w	r1, #32
 8004d26:	f381 8811 	msr	BASEPRI, r1
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	4807      	ldr	r0, [pc, #28]	@ (8004d4c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d2e:	f7ff f9d4 	bl	80040da <_PreparePacket>
 8004d32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d34:	2211      	movs	r2, #17
 8004d36:	6839      	ldr	r1, [r7, #0]
 8004d38:	6838      	ldr	r0, [r7, #0]
 8004d3a:	f7ff fabd 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f383 8811 	msr	BASEPRI, r3
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20014354 	.word	0x20014354

08004d50 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d58:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5c:	f04f 0120 	mov.w	r1, #32
 8004d60:	f381 8811 	msr	BASEPRI, r1
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	4819      	ldr	r0, [pc, #100]	@ (8004dcc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004d68:	f7ff f9b7 	bl	80040da <_PreparePacket>
 8004d6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e00b      	b.n	8004d9e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	61f9      	str	r1, [r7, #28]
 8004d90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	09db      	lsrs	r3, r3, #7
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da2:	d8f0      	bhi.n	8004d86 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004db4:	2208      	movs	r2, #8
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	6938      	ldr	r0, [r7, #16]
 8004dba:	f7ff fa7d 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f383 8811 	msr	BASEPRI, r3
}
 8004dc4:	bf00      	nop
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20014354 	.word	0x20014354
 8004dd0:	20014324 	.word	0x20014324

08004dd4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8004de0:	f04f 0120 	mov.w	r1, #32
 8004de4:	f381 8811 	msr	BASEPRI, r1
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	4819      	ldr	r0, [pc, #100]	@ (8004e50 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004dec:	f7ff f975 	bl	80040da <_PreparePacket>
 8004df0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004df6:	4b17      	ldr	r3, [pc, #92]	@ (8004e54 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e00b      	b.n	8004e22 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	61f9      	str	r1, [r7, #28]
 8004e14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e26:	d8f0      	bhi.n	8004e0a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e38:	2204      	movs	r2, #4
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	6938      	ldr	r0, [r7, #16]
 8004e3e:	f7ff fa3b 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f383 8811 	msr	BASEPRI, r3
}
 8004e48:	bf00      	nop
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20014354 	.word	0x20014354
 8004e54:	20014324 	.word	0x20014324

08004e58 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e60:	f3ef 8311 	mrs	r3, BASEPRI
 8004e64:	f04f 0120 	mov.w	r1, #32
 8004e68:	f381 8811 	msr	BASEPRI, r1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	4819      	ldr	r0, [pc, #100]	@ (8004ed4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004e70:	f7ff f933 	bl	80040da <_PreparePacket>
 8004e74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e00b      	b.n	8004ea6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	1c59      	adds	r1, r3, #1
 8004e96:	61f9      	str	r1, [r7, #28]
 8004e98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	09db      	lsrs	r3, r3, #7
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eaa:	d8f0      	bhi.n	8004e8e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	61fa      	str	r2, [r7, #28]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ebc:	2206      	movs	r2, #6
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	6938      	ldr	r0, [r7, #16]
 8004ec2:	f7ff f9f9 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f383 8811 	msr	BASEPRI, r3
}
 8004ecc:	bf00      	nop
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20014354 	.word	0x20014354
 8004ed8:	20014324 	.word	0x20014324

08004edc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004ee4:	4b04      	ldr	r3, [pc, #16]	@ (8004ef8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	1ad3      	subs	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	20014324 	.word	0x20014324

08004efc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	@ 0x30
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f06:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d06d      	beq.n	8004fea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f0e:	4b39      	ldr	r3, [pc, #228]	@ (8004ff4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f14:	2300      	movs	r3, #0
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f18:	e008      	b.n	8004f2c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f28:	3301      	adds	r3, #1
 8004f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3f2      	bcc.n	8004f1a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f34:	e000      	b.n	8004f38 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f36:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d055      	beq.n	8004fea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f42:	f04f 0120 	mov.w	r1, #32
 8004f46:	f381 8811 	msr	BASEPRI, r1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	482a      	ldr	r0, [pc, #168]	@ (8004ff8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004f4e:	f7ff f8c4 	bl	80040da <_PreparePacket>
 8004f52:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	e00b      	b.n	8004f7a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1c59      	adds	r1, r3, #1
 8004f6a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	09db      	lsrs	r3, r3, #7
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7e:	d8f0      	bhi.n	8004f62 <SEGGER_SYSVIEW_SendModule+0x66>
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f86:	6a3a      	ldr	r2, [r7, #32]
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e00b      	b.n	8004fb4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	61f9      	str	r1, [r7, #28]
 8004fa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	09db      	lsrs	r3, r3, #7
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fb8:	d8f0      	bhi.n	8004f9c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	61fa      	str	r2, [r7, #28]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2280      	movs	r2, #128	@ 0x80
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff f834 	bl	8004040 <_EncodeStr>
 8004fd8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004fda:	2216      	movs	r2, #22
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	6938      	ldr	r0, [r7, #16]
 8004fe0:	f7ff f96a 	bl	80042b8 <_SendPacket>
      RECORD_END();
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004fea:	bf00      	nop
 8004fec:	3730      	adds	r7, #48	@ 0x30
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	2001434c 	.word	0x2001434c
 8004ff8:	20014354 	.word	0x20014354

08004ffc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00f      	beq.n	800502a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f2      	bne.n	8005010 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	2001434c 	.word	0x2001434c

08005038 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800503e:	f3ef 8311 	mrs	r3, BASEPRI
 8005042:	f04f 0120 	mov.w	r1, #32
 8005046:	f381 8811 	msr	BASEPRI, r1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	4817      	ldr	r0, [pc, #92]	@ (80050ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800504e:	f7ff f844 	bl	80040da <_PreparePacket>
 8005052:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e00b      	b.n	800507c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	6179      	str	r1, [r7, #20]
 800506e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	09db      	lsrs	r3, r3, #7
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005080:	d8f0      	bhi.n	8005064 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	617a      	str	r2, [r7, #20]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005092:	221b      	movs	r2, #27
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	68b8      	ldr	r0, [r7, #8]
 8005098:	f7ff f90e 	bl	80042b8 <_SendPacket>
  RECORD_END();
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f383 8811 	msr	BASEPRI, r3
}
 80050a2:	bf00      	nop
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20014354 	.word	0x20014354
 80050b0:	20014350 	.word	0x20014350

080050b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	@ 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050bc:	f3ef 8311 	mrs	r3, BASEPRI
 80050c0:	f04f 0120 	mov.w	r1, #32
 80050c4:	f381 8811 	msr	BASEPRI, r1
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	4827      	ldr	r0, [pc, #156]	@ (8005168 <SEGGER_SYSVIEW_Warn+0xb4>)
 80050cc:	f7ff f805 	bl	80040da <_PreparePacket>
 80050d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050d2:	2280      	movs	r2, #128	@ 0x80
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	6938      	ldr	r0, [r7, #16]
 80050d8:	f7fe ffb2 	bl	8004040 <_EncodeStr>
 80050dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e2:	2301      	movs	r3, #1
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_Warn+0x4c>
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80050f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	623b      	str	r3, [r7, #32]
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	2b7f      	cmp	r3, #127	@ 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_Warn+0x34>
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	627a      	str	r2, [r7, #36]	@ 0x24
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e00b      	b.n	8005138 <SEGGER_SYSVIEW_Warn+0x84>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	61f9      	str	r1, [r7, #28]
 800512a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b7f      	cmp	r3, #127	@ 0x7f
 800513c:	d8f0      	bhi.n	8005120 <SEGGER_SYSVIEW_Warn+0x6c>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	61fa      	str	r2, [r7, #28]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800514e:	221a      	movs	r2, #26
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f7ff f8b0 	bl	80042b8 <_SendPacket>
  RECORD_END();
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f383 8811 	msr	BASEPRI, r3
}
 800515e:	bf00      	nop
 8005160:	3728      	adds	r7, #40	@ 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20014354 	.word	0x20014354

0800516c <memcmp>:
 800516c:	b510      	push	{r4, lr}
 800516e:	3901      	subs	r1, #1
 8005170:	4402      	add	r2, r0
 8005172:	4290      	cmp	r0, r2
 8005174:	d101      	bne.n	800517a <memcmp+0xe>
 8005176:	2000      	movs	r0, #0
 8005178:	e005      	b.n	8005186 <memcmp+0x1a>
 800517a:	7803      	ldrb	r3, [r0, #0]
 800517c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005180:	42a3      	cmp	r3, r4
 8005182:	d001      	beq.n	8005188 <memcmp+0x1c>
 8005184:	1b18      	subs	r0, r3, r4
 8005186:	bd10      	pop	{r4, pc}
 8005188:	3001      	adds	r0, #1
 800518a:	e7f2      	b.n	8005172 <memcmp+0x6>

0800518c <memset>:
 800518c:	4402      	add	r2, r0
 800518e:	4603      	mov	r3, r0
 8005190:	4293      	cmp	r3, r2
 8005192:	d100      	bne.n	8005196 <memset+0xa>
 8005194:	4770      	bx	lr
 8005196:	f803 1b01 	strb.w	r1, [r3], #1
 800519a:	e7f9      	b.n	8005190 <memset+0x4>

0800519c <__libc_init_array>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4d0d      	ldr	r5, [pc, #52]	@ (80051d4 <__libc_init_array+0x38>)
 80051a0:	4c0d      	ldr	r4, [pc, #52]	@ (80051d8 <__libc_init_array+0x3c>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	2600      	movs	r6, #0
 80051a8:	42a6      	cmp	r6, r4
 80051aa:	d109      	bne.n	80051c0 <__libc_init_array+0x24>
 80051ac:	4d0b      	ldr	r5, [pc, #44]	@ (80051dc <__libc_init_array+0x40>)
 80051ae:	4c0c      	ldr	r4, [pc, #48]	@ (80051e0 <__libc_init_array+0x44>)
 80051b0:	f000 f826 	bl	8005200 <_init>
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	2600      	movs	r6, #0
 80051ba:	42a6      	cmp	r6, r4
 80051bc:	d105      	bne.n	80051ca <__libc_init_array+0x2e>
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c4:	4798      	blx	r3
 80051c6:	3601      	adds	r6, #1
 80051c8:	e7ee      	b.n	80051a8 <__libc_init_array+0xc>
 80051ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ce:	4798      	blx	r3
 80051d0:	3601      	adds	r6, #1
 80051d2:	e7f2      	b.n	80051ba <__libc_init_array+0x1e>
 80051d4:	08005358 	.word	0x08005358
 80051d8:	08005358 	.word	0x08005358
 80051dc:	08005358 	.word	0x08005358
 80051e0:	0800535c 	.word	0x0800535c

080051e4 <memcpy>:
 80051e4:	440a      	add	r2, r1
 80051e6:	4291      	cmp	r1, r2
 80051e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051ec:	d100      	bne.n	80051f0 <memcpy+0xc>
 80051ee:	4770      	bx	lr
 80051f0:	b510      	push	{r4, lr}
 80051f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051fa:	4291      	cmp	r1, r2
 80051fc:	d1f9      	bne.n	80051f2 <memcpy+0xe>
 80051fe:	bd10      	pop	{r4, pc}

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
