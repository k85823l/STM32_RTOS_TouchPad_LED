
0A1Touch_Sns_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005c88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00014484  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014494  20014494  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b9b  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c97  00000000  00000000  00019bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0001c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de8  00000000  00000000  0001da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024633  00000000  00000000  0001e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001428d  00000000  00000000  00042ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3696  00000000  00000000  00057130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a7c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b8c  00000000  00000000  0013a80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  0013f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ae0 	.word	0x08005ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005ae0 	.word	0x08005ae0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ec0 	.word	0x20012ec0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fd01 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8bb 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f975 	bl	800088c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a2:	f000 f921 	bl	80007e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80005a6:	4849      	ldr	r0, [pc, #292]	@ (80006cc <main+0x13c>)
 80005a8:	f000 fe50 	bl	800124c <HAL_ADC_Start_IT>
#if (SEGGER_UART_REC == 1)
  SEGGER_UART_init(500000);
#endif
  /*Enable the CYCCNT*/
  DWT_CTRL|= (1<< 0);
 80005ac:	4b48      	ldr	r3, [pc, #288]	@ (80006d0 <main+0x140>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a47      	ldr	r2, [pc, #284]	@ (80006d0 <main+0x140>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80005b8:	f003 fec4 	bl	8004344 <SEGGER_SYSVIEW_Conf>

#if (SEGGER_UART_REC == 0)
  SEGGER_SYSVIEW_Start();
 80005bc:	f004 fcea 	bl	8004f94 <SEGGER_SYSVIEW_Start>
#endif

  status = xTaskCreate(taskLED_Green_handler, "Task-LED", 200, "Green_LED_Task Activation", 3, &taskLED_Green_handle);
 80005c0:	4b44      	ldr	r3, [pc, #272]	@ (80006d4 <main+0x144>)
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2303      	movs	r3, #3
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	4b43      	ldr	r3, [pc, #268]	@ (80006d8 <main+0x148>)
 80005ca:	22c8      	movs	r2, #200	@ 0xc8
 80005cc:	4943      	ldr	r1, [pc, #268]	@ (80006dc <main+0x14c>)
 80005ce:	4844      	ldr	r0, [pc, #272]	@ (80006e0 <main+0x150>)
 80005d0:	f002 fc04 	bl	8002ddc <xTaskCreate>
 80005d4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00b      	beq.n	80005f4 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e0:	f383 8811 	msr	BASEPRI, r3
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	f3bf 8f4f 	dsb	sy
 80005ec:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0x60>

  status = xTaskCreate(taskLED_Blue_handler, "Task-LED", 200, "Blue_LED_Task Activation", 3, &taskLED_Blue_handle);
 80005f4:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <main+0x154>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2303      	movs	r3, #3
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <main+0x158>)
 80005fe:	22c8      	movs	r2, #200	@ 0xc8
 8000600:	4936      	ldr	r1, [pc, #216]	@ (80006dc <main+0x14c>)
 8000602:	483a      	ldr	r0, [pc, #232]	@ (80006ec <main+0x15c>)
 8000604:	f002 fbea 	bl	8002ddc <xTaskCreate>
 8000608:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <main+0x98>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	60fb      	str	r3, [r7, #12]
    }
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x94>

  status = xTaskCreate(taskLED_Red_handler, "Task-LED", 200, "Red_LED_Task Activation", 3, &taskLED_Red_handle);
 8000628:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <main+0x160>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2303      	movs	r3, #3
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <main+0x164>)
 8000632:	22c8      	movs	r2, #200	@ 0xc8
 8000634:	4929      	ldr	r1, [pc, #164]	@ (80006dc <main+0x14c>)
 8000636:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <main+0x168>)
 8000638:	f002 fbd0 	bl	8002ddc <xTaskCreate>
 800063c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d00b      	beq.n	800065c <main+0xcc>
        __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	60bb      	str	r3, [r7, #8]
    }
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0xc8>

  status = xTaskCreate(taskLED_Yellow_handler, "Task-LED", 200, "Yellow_LED_Task Activation", 3, &taskLED_Yellow_handle);
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <main+0x16c>)
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2303      	movs	r3, #3
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <main+0x170>)
 8000666:	22c8      	movs	r2, #200	@ 0xc8
 8000668:	491c      	ldr	r1, [pc, #112]	@ (80006dc <main+0x14c>)
 800066a:	4826      	ldr	r0, [pc, #152]	@ (8000704 <main+0x174>)
 800066c:	f002 fbb6 	bl	8002ddc <xTaskCreate>
 8000670:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d00b      	beq.n	8000690 <main+0x100>
        __asm volatile
 8000678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067c:	f383 8811 	msr	BASEPRI, r3
 8000680:	f3bf 8f6f 	isb	sy
 8000684:	f3bf 8f4f 	dsb	sy
 8000688:	607b      	str	r3, [r7, #4]
    }
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0xfc>

/*
  status = xTaskCreate(taskUser_Btn_handler, "Task-Btn", 200, "User_Btn_Task Activation", 1, &taskUser_Btn_handle);
  configASSERT(status == pdPASS);
  */
  status = xTaskCreate(taskTouch_Sns_handler, "Task-Touch_Sns", 200, NULL, 3, &taskTouch_Sns_handle);
 8000690:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <main+0x178>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2303      	movs	r3, #3
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	22c8      	movs	r2, #200	@ 0xc8
 800069c:	491b      	ldr	r1, [pc, #108]	@ (800070c <main+0x17c>)
 800069e:	481c      	ldr	r0, [pc, #112]	@ (8000710 <main+0x180>)
 80006a0:	f002 fb9c 	bl	8002ddc <xTaskCreate>
 80006a4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d00b      	beq.n	80006c4 <main+0x134>
        __asm volatile
 80006ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	603b      	str	r3, [r7, #0]
    }
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <main+0x130>

  /*Start the scheduler*/
  vTaskStartScheduler();
 80006c4:	f002 fd4e 	bl	8003164 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <main+0x138>
 80006cc:	2000002c 	.word	0x2000002c
 80006d0:	e0001000 	.word	0xe0001000
 80006d4:	20000080 	.word	0x20000080
 80006d8:	08005af8 	.word	0x08005af8
 80006dc:	08005b14 	.word	0x08005b14
 80006e0:	08000bd1 	.word	0x08000bd1
 80006e4:	20000084 	.word	0x20000084
 80006e8:	08005b20 	.word	0x08005b20
 80006ec:	08000c0d 	.word	0x08000c0d
 80006f0:	20000088 	.word	0x20000088
 80006f4:	08005b3c 	.word	0x08005b3c
 80006f8:	08000c49 	.word	0x08000c49
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	08005b54 	.word	0x08005b54
 8000704:	08000c81 	.word	0x08000c81
 8000708:	20000090 	.word	0x20000090
 800070c:	08005b70 	.word	0x08005b70
 8000710:	08000b59 	.word	0x08000b59

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	@ 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f005 f9a2 	bl	8005a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000788:	2332      	movs	r3, #50	@ 0x32
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000790:	2307      	movs	r3, #7
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fb37 	bl	8001e0c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 faa8 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fd98 	bl	80022fc <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 fa91 	bl	8000cf8 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0x98>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x9c>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000814:	2201      	movs	r2, #1
 8000816:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000828:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xa0>)
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000834:	2201      	movs	r2, #1
 8000836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000842:	2201      	movs	r2, #1
 8000844:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000848:	f000 fbea 	bl	8001020 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 fa51 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000856:	2301      	movs	r3, #1
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800085e:	2301      	movs	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000868:	f000 fddc 	bl	8001424 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000872:	f000 fa41 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000002c 	.word	0x2000002c
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	@ 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4ba6      	ldr	r3, [pc, #664]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4aa5      	ldr	r2, [pc, #660]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4ba3      	ldr	r3, [pc, #652]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b9f      	ldr	r3, [pc, #636]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a9e      	ldr	r2, [pc, #632]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b9c      	ldr	r3, [pc, #624]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b98      	ldr	r3, [pc, #608]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a97      	ldr	r2, [pc, #604]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b95      	ldr	r3, [pc, #596]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b91      	ldr	r3, [pc, #580]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a90      	ldr	r2, [pc, #576]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b8e      	ldr	r3, [pc, #568]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b8a      	ldr	r3, [pc, #552]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a89      	ldr	r2, [pc, #548]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b87      	ldr	r3, [pc, #540]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b83      	ldr	r3, [pc, #524]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a82      	ldr	r2, [pc, #520]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b80      	ldr	r3, [pc, #512]	@ (8000b40 <MX_GPIO_Init+0x2b4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	487d      	ldr	r0, [pc, #500]	@ (8000b44 <MX_GPIO_Init+0x2b8>)
 8000950:	f001 fa04 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2101      	movs	r1, #1
 8000958:	487b      	ldr	r0, [pc, #492]	@ (8000b48 <MX_GPIO_Init+0x2bc>)
 800095a:	f001 f9ff 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095e:	2200      	movs	r2, #0
 8000960:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000964:	4879      	ldr	r0, [pc, #484]	@ (8000b4c <MX_GPIO_Init+0x2c0>)
 8000966:	f001 f9f9 	bl	8001d5c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4870      	ldr	r0, [pc, #448]	@ (8000b44 <MX_GPIO_Init+0x2b8>)
 8000982:	f001 f84f 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	486a      	ldr	r0, [pc, #424]	@ (8000b48 <MX_GPIO_Init+0x2bc>)
 800099e:	f001 f841 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a2:	2308      	movs	r3, #8
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b2:	2305      	movs	r3, #5
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4862      	ldr	r0, [pc, #392]	@ (8000b48 <MX_GPIO_Init+0x2bc>)
 80009be:	f001 f831 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	485e      	ldr	r0, [pc, #376]	@ (8000b50 <MX_GPIO_Init+0x2c4>)
 80009d8:	f001 f824 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009dc:	2310      	movs	r3, #16
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ec:	2306      	movs	r3, #6
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4856      	ldr	r0, [pc, #344]	@ (8000b50 <MX_GPIO_Init+0x2c4>)
 80009f8:	f001 f814 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009fc:	23e0      	movs	r3, #224	@ 0xe0
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	484e      	ldr	r0, [pc, #312]	@ (8000b50 <MX_GPIO_Init+0x2c4>)
 8000a18:	f001 f804 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4849      	ldr	r0, [pc, #292]	@ (8000b54 <MX_GPIO_Init+0x2c8>)
 8000a30:	f000 fff8 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a46:	2305      	movs	r3, #5
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4840      	ldr	r0, [pc, #256]	@ (8000b54 <MX_GPIO_Init+0x2c8>)
 8000a52:	f000 ffe7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a56:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a5a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4837      	ldr	r0, [pc, #220]	@ (8000b4c <MX_GPIO_Init+0x2c0>)
 8000a70:	f000 ffd8 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a74:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a86:	2306      	movs	r3, #6
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	482d      	ldr	r0, [pc, #180]	@ (8000b48 <MX_GPIO_Init+0x2bc>)
 8000a92:	f000 ffc7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4829      	ldr	r0, [pc, #164]	@ (8000b50 <MX_GPIO_Init+0x2c4>)
 8000aac:	f000 ffba 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ab0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4820      	ldr	r0, [pc, #128]	@ (8000b50 <MX_GPIO_Init+0x2c4>)
 8000ace:	f000 ffa9 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4819      	ldr	r0, [pc, #100]	@ (8000b4c <MX_GPIO_Init+0x2c0>)
 8000ae6:	f000 ff9d 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4813      	ldr	r0, [pc, #76]	@ (8000b54 <MX_GPIO_Init+0x2c8>)
 8000b08:	f000 ff8c 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <MX_GPIO_Init+0x2b8>)
 8000b22:	f000 ff7f 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2106      	movs	r1, #6
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f000 ff50 	bl	80019d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b30:	2006      	movs	r0, #6
 8000b32:	f000 ff69 	bl	8001a08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	@ 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020400 	.word	0x40020400

08000b58 <taskTouch_Sns_handler>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
//	ADC1_Value = HAL_ADC_GetValue(&hadc1);
//	HAL_ADC_Start_IT(&hadc1);
//}

static void taskTouch_Sns_handler(void* parameters){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

	while(1){
		Touch_Sns_ON_Last = Touch_Sns_ON;//storing the last status
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <taskTouch_Sns_handler+0x64>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <taskTouch_Sns_handler+0x68>)
 8000b66:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start(&hadc1);
 8000b68:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <taskTouch_Sns_handler+0x6c>)
 8000b6a:	f000 fa9d 	bl	80010a8 <HAL_ADC_Start>
		ADC1_Value = HAL_ADC_GetValue(&hadc1);
 8000b6e:	4815      	ldr	r0, [pc, #84]	@ (8000bc4 <taskTouch_Sns_handler+0x6c>)
 8000b70:	f000 fc4a 	bl	8001408 <HAL_ADC_GetValue>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <taskTouch_Sns_handler+0x70>)
 8000b78:	6013      	str	r3, [r2, #0]
		if (ADC1_Value >= 4000u){
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <taskTouch_Sns_handler+0x70>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000b82:	d303      	bcc.n	8000b8c <taskTouch_Sns_handler+0x34>
			Touch_Sns_ON = 1u;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <taskTouch_Sns_handler+0x64>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e002      	b.n	8000b92 <taskTouch_Sns_handler+0x3a>
		}
		else{
			Touch_Sns_ON = 0u;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <taskTouch_Sns_handler+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
		}

		if(Touch_Sns_ON > Touch_Sns_ON_Last){
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <taskTouch_Sns_handler+0x64>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <taskTouch_Sns_handler+0x68>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d9e0      	bls.n	8000b60 <taskTouch_Sns_handler+0x8>
			Touch_Sns_Sts_cnt = Touch_Sns_Sts_cnt + 1u;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <taskTouch_Sns_handler+0x74>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <taskTouch_Sns_handler+0x74>)
 8000ba8:	701a      	strb	r2, [r3, #0]
			if(Touch_Sns_Sts_cnt >= 3){
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <taskTouch_Sns_handler+0x74>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d9d6      	bls.n	8000b60 <taskTouch_Sns_handler+0x8>
				Touch_Sns_Sts_cnt = 0u;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <taskTouch_Sns_handler+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
		Touch_Sns_ON_Last = Touch_Sns_ON;//storing the last status
 8000bb8:	e7d2      	b.n	8000b60 <taskTouch_Sns_handler+0x8>
 8000bba:	bf00      	nop
 8000bbc:	2000007d 	.word	0x2000007d
 8000bc0:	2000007e 	.word	0x2000007e
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	20000078 	.word	0x20000078
 8000bcc:	2000007c 	.word	0x2000007c

08000bd0 <taskLED_Green_handler>:
	xTaskNotifyFromISR(next_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);/*Notify the currently running task*/
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
}

static void taskLED_Green_handler(void* parameters)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Touch_Sns_Sts_cnt == 0u){
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <taskLED_Green_handler+0x34>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <taskLED_Green_handler+0x24>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <taskLED_Green_handler+0x38>)
 8000be6:	f001 f8d2 	bl	8001d8e <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(500));
 8000bea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bee:	f002 fa7f 	bl	80030f0 <vTaskDelay>
 8000bf2:	e7f1      	b.n	8000bd8 <taskLED_Green_handler+0x8>
		}
		else{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bfa:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <taskLED_Green_handler+0x38>)
 8000bfc:	f001 f8ae 	bl	8001d5c <HAL_GPIO_WritePin>
		if(Touch_Sns_Sts_cnt == 0u){
 8000c00:	e7ea      	b.n	8000bd8 <taskLED_Green_handler+0x8>
 8000c02:	bf00      	nop
 8000c04:	2000007c 	.word	0x2000007c
 8000c08:	40020c00 	.word	0x40020c00

08000c0c <taskLED_Blue_handler>:
	}
	taskYIELD();
}

static void taskLED_Blue_handler(void* parameters)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Touch_Sns_ON == 1u){
 8000c14:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <taskLED_Blue_handler+0x34>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d106      	bne.n	8000c2a <taskLED_Blue_handler+0x1e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <taskLED_Blue_handler+0x38>)
 8000c24:	f001 f89a 	bl	8001d5c <HAL_GPIO_WritePin>
 8000c28:	e7f4      	b.n	8000c14 <taskLED_Blue_handler+0x8>
		}
		else if(Touch_Sns_ON == 0u){
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <taskLED_Blue_handler+0x34>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f0      	bne.n	8000c14 <taskLED_Blue_handler+0x8>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <taskLED_Blue_handler+0x38>)
 8000c3a:	f001 f88f 	bl	8001d5c <HAL_GPIO_WritePin>
		if(Touch_Sns_ON == 1u){
 8000c3e:	e7e9      	b.n	8000c14 <taskLED_Blue_handler+0x8>
 8000c40:	2000007d 	.word	0x2000007d
 8000c44:	40020c00 	.word	0x40020c00

08000c48 <taskLED_Red_handler>:
	}
	taskYIELD();
}

static void taskLED_Red_handler(void* parameters)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(Touch_Sns_Sts_cnt == 1u){
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <taskLED_Red_handler+0x30>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d108      	bne.n	8000c6a <taskLED_Red_handler+0x22>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <taskLED_Red_handler+0x34>)
 8000c5e:	f001 f896 	bl	8001d8e <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(100));
 8000c62:	2064      	movs	r0, #100	@ 0x64
 8000c64:	f002 fa44 	bl	80030f0 <vTaskDelay>
 8000c68:	e7f2      	b.n	8000c50 <taskLED_Red_handler+0x8>
		}
		else{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <taskLED_Red_handler+0x34>)
 8000c72:	f001 f873 	bl	8001d5c <HAL_GPIO_WritePin>
		if(Touch_Sns_Sts_cnt == 1u){
 8000c76:	e7eb      	b.n	8000c50 <taskLED_Red_handler+0x8>
 8000c78:	2000007c 	.word	0x2000007c
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <taskLED_Yellow_handler>:
	}
	taskYIELD();
}

static void taskLED_Yellow_handler(void* parameters)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Touch_Sns_Sts_cnt == 2u){
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <taskLED_Yellow_handler+0x34>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d109      	bne.n	8000ca4 <taskLED_Yellow_handler+0x24>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000c90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c94:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <taskLED_Yellow_handler+0x38>)
 8000c96:	f001 f87a 	bl	8001d8e <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(300));
 8000c9a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c9e:	f002 fa27 	bl	80030f0 <vTaskDelay>
 8000ca2:	e7f1      	b.n	8000c88 <taskLED_Yellow_handler+0x8>
		}
		else{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000caa:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <taskLED_Yellow_handler+0x38>)
 8000cac:	f001 f856 	bl	8001d5c <HAL_GPIO_WritePin>
		if(Touch_Sns_Sts_cnt == 2u){
 8000cb0:	e7ea      	b.n	8000c88 <taskLED_Yellow_handler+0x8>
 8000cb2:	bf00      	nop
 8000cb4:	2000007c 	.word	0x2000007c
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <taskUser_Btn_handler>:
	}
	taskYIELD();
}

void taskUser_Btn_handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
//
//		User_Btn_Toggle_Last = User_Btn_Toggle;
//		User_Btn_Toggle = User_Btn_Sts_Debounce;
//
//		if(User_Btn_Toggle > User_Btn_Toggle_Last){
			User_Btn_Clicked = 1u;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <taskUser_Btn_handler+0x14>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
//		}
//	}
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20000074 	.word	0x20000074

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ce6:	f000 f97b 	bl	8000fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d42:	f002 ff73 	bl	8003c2c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_ADC_MspInit+0x7c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d127      	bne.n	8000dc6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dae:	2302      	movs	r3, #2
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <HAL_ADC_MspInit+0x84>)
 8000dc2:	f000 fe2f 	bl	8001a24 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	@ 0x38
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <HAL_InitTick+0xe4>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a32      	ldr	r2, [pc, #200]	@ (8000ec0 <HAL_InitTick+0xe4>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b30      	ldr	r3, [pc, #192]	@ (8000ec0 <HAL_InitTick+0xe4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fc7e 	bl	8002714 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e22:	f001 fc63 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8000e26:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e28:	e004      	b.n	8000e34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e2a:	f001 fc5f 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e36:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <HAL_InitTick+0xe8>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <HAL_InitTick+0xf0>)
 8000e46:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e68:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e6a:	f001 fc85 	bl	8002778 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <HAL_InitTick+0xec>)
 8000e7e:	f001 fcd5 	bl	800282c <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	@ 0x36
 8000e92:	f000 fdb9 	bl	8001a08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2036      	movs	r0, #54	@ 0x36
 8000ea2:	f000 fd95 	bl	80019d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_InitTick+0xf4>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3738      	adds	r7, #56	@ 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	20000094 	.word	0x20000094
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  taskUser_Btn_handler();/*Calling the handler*/
 8000f00:	f7ff fedc 	bl	8000cbc <taskUser_Btn_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 ff5d 	bl	8001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <TIM6_DAC_IRQHandler+0x10>)
 8000f16:	f001 fcf9 	bl	800290c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000094 	.word	0x20000094

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f004 fd81 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fb09 	bl	8000590 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f8c:	08005c88 	.word	0x08005c88
  ldr r2, =_sbss
 8000f90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f94:	20014494 	.word	0x20014494

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fcf8 	bl	80019ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f7ff ff06 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe98 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200000dc 	.word	0x200000dc

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200000dc 	.word	0x200000dc

08001020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e033      	b.n	800109e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fe88 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 faf8 	bl	8001668 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
 800108e:	e001      	b.n	8001094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Start+0x1a>
 80010be:	2302      	movs	r3, #2
 80010c0:	e0b2      	b.n	8001228 <HAL_ADC_Start+0x180>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d018      	beq.n	800110a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0201 	orr.w	r2, r2, #1
 80010e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e8:	4b52      	ldr	r3, [pc, #328]	@ (8001234 <HAL_ADC_Start+0x18c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a52      	ldr	r2, [pc, #328]	@ (8001238 <HAL_ADC_Start+0x190>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9a      	lsrs	r2, r3, #18
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80010fc:	e002      	b.n	8001104 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3b01      	subs	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f9      	bne.n	80010fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d17a      	bne.n	800120e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001142:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001156:	d106      	bne.n	8001166 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115c:	f023 0206 	bic.w	r2, r3, #6
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	645a      	str	r2, [r3, #68]	@ 0x44
 8001164:	e002      	b.n	800116c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001174:	4b31      	ldr	r3, [pc, #196]	@ (800123c <HAL_ADC_Start+0x194>)
 8001176:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001180:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2b00      	cmp	r3, #0
 800118c:	d12a      	bne.n	80011e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a2b      	ldr	r2, [pc, #172]	@ (8001240 <HAL_ADC_Start+0x198>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d015      	beq.n	80011c4 <HAL_ADC_Start+0x11c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a29      	ldr	r2, [pc, #164]	@ (8001244 <HAL_ADC_Start+0x19c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d105      	bne.n	80011ae <HAL_ADC_Start+0x106>
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <HAL_ADC_Start+0x194>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00a      	beq.n	80011c4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a25      	ldr	r2, [pc, #148]	@ (8001248 <HAL_ADC_Start+0x1a0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d136      	bne.n	8001226 <HAL_ADC_Start+0x17e>
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_ADC_Start+0x194>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d130      	bne.n	8001226 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d129      	bne.n	8001226 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	e020      	b.n	8001226 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <HAL_ADC_Start+0x198>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d11b      	bne.n	8001226 <HAL_ADC_Start+0x17e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d114      	bne.n	8001226 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e00b      	b.n	8001226 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000000 	.word	0x20000000
 8001238:	431bde83 	.word	0x431bde83
 800123c:	40012300 	.word	0x40012300
 8001240:	40012000 	.word	0x40012000
 8001244:	40012100 	.word	0x40012100
 8001248:	40012200 	.word	0x40012200

0800124c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Start_IT+0x1a>
 8001262:	2302      	movs	r3, #2
 8001264:	e0bd      	b.n	80013e2 <HAL_ADC_Start_IT+0x196>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d018      	beq.n	80012ae <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800128c:	4b58      	ldr	r3, [pc, #352]	@ (80013f0 <HAL_ADC_Start_IT+0x1a4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a58      	ldr	r2, [pc, #352]	@ (80013f4 <HAL_ADC_Start_IT+0x1a8>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0c9a      	lsrs	r2, r3, #18
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012a0:	e002      	b.n	80012a8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f9      	bne.n	80012a2 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 8085 	bne.w	80013c8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012fc:	d106      	bne.n	800130c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f023 0206 	bic.w	r2, r3, #6
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	@ 0x44
 800130a:	e002      	b.n	8001312 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131a:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <HAL_ADC_Start_IT+0x1ac>)
 800131c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001326:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2b00      	cmp	r3, #0
 8001346:	d12a      	bne.n	800139e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2b      	ldr	r2, [pc, #172]	@ (80013fc <HAL_ADC_Start_IT+0x1b0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d015      	beq.n	800137e <HAL_ADC_Start_IT+0x132>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2a      	ldr	r2, [pc, #168]	@ (8001400 <HAL_ADC_Start_IT+0x1b4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d105      	bne.n	8001368 <HAL_ADC_Start_IT+0x11c>
 800135c:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <HAL_ADC_Start_IT+0x1ac>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 031f 	and.w	r3, r3, #31
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00a      	beq.n	800137e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <HAL_ADC_Start_IT+0x1b8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d136      	bne.n	80013e0 <HAL_ADC_Start_IT+0x194>
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <HAL_ADC_Start_IT+0x1ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d130      	bne.n	80013e0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d129      	bne.n	80013e0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e020      	b.n	80013e0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a16      	ldr	r2, [pc, #88]	@ (80013fc <HAL_ADC_Start_IT+0x1b0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d11b      	bne.n	80013e0 <HAL_ADC_Start_IT+0x194>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d114      	bne.n	80013e0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e00b      	b.n	80013e0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	f043 0210 	orr.w	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	40012300 	.word	0x40012300
 80013fc:	40012000 	.word	0x40012000
 8001400:	40012100 	.word	0x40012100
 8001404:	40012200 	.word	0x40012200

08001408 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1c>
 800143c:	2302      	movs	r3, #2
 800143e:	e105      	b.n	800164c <HAL_ADC_ConfigChannel+0x228>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d925      	bls.n	800149c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	3b1e      	subs	r3, #30
 8001466:	2207      	movs	r2, #7
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43da      	mvns	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	4603      	mov	r3, r0
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4403      	add	r3, r0
 800148e:	3b1e      	subs	r3, #30
 8001490:	409a      	lsls	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	e022      	b.n	80014e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6919      	ldr	r1, [r3, #16]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	2207      	movs	r2, #7
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	400a      	ands	r2, r1
 80014be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6919      	ldr	r1, [r3, #16]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4403      	add	r3, r0
 80014d8:	409a      	lsls	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d824      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b05      	subs	r3, #5
 80014fc:	221f      	movs	r2, #31
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b05      	subs	r3, #5
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	@ 0x34
 8001532:	e04c      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d824      	bhi.n	8001586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b23      	subs	r3, #35	@ 0x23
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b23      	subs	r3, #35	@ 0x23
 8001578:	fa00 f203 	lsl.w	r2, r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	631a      	str	r2, [r3, #48]	@ 0x30
 8001584:	e023      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b41      	subs	r3, #65	@ 0x41
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b41      	subs	r3, #65	@ 0x41
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_ADC_ConfigChannel+0x234>)
 80015d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	@ (800165c <HAL_ADC_ConfigChannel+0x238>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1cc>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_ADC_ConfigChannel+0x238>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d123      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x21e>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d003      	beq.n	800160a <HAL_ADC_ConfigChannel+0x1e6>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b11      	cmp	r3, #17
 8001608:	d11b      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b10      	cmp	r3, #16
 800161c:	d111      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_ADC_ConfigChannel+0x23c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a10      	ldr	r2, [pc, #64]	@ (8001664 <HAL_ADC_ConfigChannel+0x240>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9a      	lsrs	r2, r3, #18
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001634:	e002      	b.n	800163c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40012300 	.word	0x40012300
 800165c:	40012000 	.word	0x40012000
 8001660:	20000000 	.word	0x20000000
 8001664:	431bde83 	.word	0x431bde83

08001668 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001670:	4b79      	ldr	r3, [pc, #484]	@ (8001858 <ADC_Init+0x1f0>)
 8001672:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	431a      	orrs	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800169c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	021a      	lsls	r2, r3, #8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	4a58      	ldr	r2, [pc, #352]	@ (800185c <ADC_Init+0x1f4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800170e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6899      	ldr	r1, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	e00f      	b.n	8001766 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001764:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0202 	bic.w	r2, r2, #2
 8001774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6899      	ldr	r1, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e1b      	ldrb	r3, [r3, #24]
 8001780:	005a      	lsls	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01b      	beq.n	80017cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	3b01      	subs	r3, #1
 80017c0:	035a      	lsls	r2, r3, #13
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	e007      	b.n	80017dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	051a      	lsls	r2, r3, #20
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800181e:	025a      	lsls	r2, r3, #9
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6899      	ldr	r1, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	029a      	lsls	r2, r3, #10
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40012300 	.word	0x40012300
 800185c:	0f000001 	.word	0x0f000001

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	@ (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff4c 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e2:	f7ff ff61 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	6978      	ldr	r0, [r7, #20]
 80019ee:	f7ff ffb1 	bl	8001954 <NVIC_EncodePriority>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff80 	bl	8001900 <__NVIC_SetPriority>
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff54 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e16b      	b.n	8001d18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 815a 	bne.w	8001d12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80b4 	beq.w	8001d12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <HAL_GPIO_Init+0x30c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d30 <HAL_GPIO_Init+0x30c>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b5d      	ldr	r3, [pc, #372]	@ (8001d30 <HAL_GPIO_Init+0x30c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d34 <HAL_GPIO_Init+0x310>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_GPIO_Init+0x314>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	@ (8001d3c <HAL_GPIO_Init+0x318>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_GPIO_Init+0x31c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_GPIO_Init+0x320>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d48 <HAL_GPIO_Init+0x324>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x216>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4d      	ldr	r2, [pc, #308]	@ (8001d4c <HAL_GPIO_Init+0x328>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x212>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <HAL_GPIO_Init+0x32c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	@ (8001d54 <HAL_GPIO_Init+0x330>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x20a>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00e      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c2e:	2308      	movs	r3, #8
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c32:	2306      	movs	r3, #6
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	@ (8001d34 <HAL_GPIO_Init+0x310>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a32      	ldr	r2, [pc, #200]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b30      	ldr	r3, [pc, #192]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a27      	ldr	r2, [pc, #156]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0c:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f ae90 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	@ 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021c00 	.word	0x40021c00
 8001d58:	40013c00 	.word	0x40013c00

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	041a      	lsls	r2, r3, #16
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	400b      	ands	r3, r1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f806 	bl	8001df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e267      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b85      	ldr	r3, [pc, #532]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b82      	ldr	r3, [pc, #520]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b7e      	ldr	r3, [pc, #504]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e242      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b70      	ldr	r3, [pc, #448]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6d      	ldr	r3, [pc, #436]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b69      	ldr	r3, [pc, #420]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a68      	ldr	r2, [pc, #416]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f8a0 	bl	8001008 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f89c 	bl	8001008 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e207      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f88c 	bl	8001008 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f888 	bl	8001008 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1f3      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1c7      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4937      	ldr	r1, [pc, #220]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_RCC_OscConfig+0x244>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f841 	bl	8001008 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f83d 	bl	8001008 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1a8      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4925      	ldr	r1, [pc, #148]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCC_OscConfig+0x244>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f820 	bl	8001008 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f81c 	bl	8001008 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e187      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x248>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f800 	bl	8001008 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe fffc 	bl	8001008 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e167      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_OscConfig+0x248>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe ffe9 	bl	8001008 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe ffe5 	bl	8001008 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d907      	bls.n	8002058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e150      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ea      	bne.n	800203a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b81      	ldr	r3, [pc, #516]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b7a      	ldr	r3, [pc, #488]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b77      	ldr	r3, [pc, #476]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b74      	ldr	r3, [pc, #464]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a73      	ldr	r2, [pc, #460]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7fe ffa5 	bl	8001008 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7fe ffa1 	bl	8001008 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e10c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2ea>
 80020e8:	4b64      	ldr	r3, [pc, #400]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a63      	ldr	r2, [pc, #396]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f4:	e01c      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x30c>
 80020fe:	4b5f      	ldr	r3, [pc, #380]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002102:	4a5e      	ldr	r2, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	@ 0x70
 800210a:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	4a5b      	ldr	r2, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	@ 0x70
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 8002118:	4b58      	ldr	r3, [pc, #352]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a57      	ldr	r2, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	4b55      	ldr	r3, [pc, #340]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	4a54      	ldr	r2, [pc, #336]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe ff66 	bl	8001008 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe ff62 	bl	8001008 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0cb      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b49      	ldr	r3, [pc, #292]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCC_OscConfig+0x334>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe ff50 	bl	8001008 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe ff4c 	bl	8001008 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0b5      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	4a38      	ldr	r2, [pc, #224]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a1 	beq.w	80022ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021aa:	4b34      	ldr	r3, [pc, #208]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d05c      	beq.n	8002270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d141      	bne.n	8002242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe ff20 	bl	8001008 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe ff1c 	bl	8001008 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e087      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b27      	ldr	r3, [pc, #156]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	491b      	ldr	r1, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fef5 	bl	8001008 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fef1 	bl	8001008 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e05c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x416>
 8002240:	e054      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fede 	bl	8001008 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe feda 	bl	8001008 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e045      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x444>
 800226e:	e03d      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e038      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x4ec>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d028      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d121      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d111      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0cc      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b68      	ldr	r3, [pc, #416]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d90c      	bls.n	8002338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a52      	ldr	r2, [pc, #328]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d044      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d119      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b3f      	ldr	r3, [pc, #252]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e067      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4934      	ldr	r1, [pc, #208]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fe0c 	bl	8001008 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fe08 	bl	8001008 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e04f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d20c      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fc9a 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00
 80024b8:	40023800 	.word	0x40023800
 80024bc:	08005c48 	.word	0x08005c48
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024cc:	b094      	sub	sp, #80	@ 0x50
 80024ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e0:	4b79      	ldr	r3, [pc, #484]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d00d      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x40>
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	f200 80e1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fa:	e0db      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002500:	e0db      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002502:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002506:	e0d8      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002512:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	2200      	movs	r2, #0
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	633b      	str	r3, [r7, #48]	@ 0x30
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
 8002536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	6139      	str	r1, [r7, #16]
 8002558:	4629      	mov	r1, r5
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800256c:	4659      	mov	r1, fp
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002576:	4651      	mov	r1, sl
 8002578:	018a      	lsls	r2, r1, #6
 800257a:	4651      	mov	r1, sl
 800257c:	ebb2 0801 	subs.w	r8, r2, r1
 8002580:	4659      	mov	r1, fp
 8002582:	eb63 0901 	sbc.w	r9, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	eb18 0303 	adds.w	r3, r8, r3
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	462b      	mov	r3, r5
 80025a8:	eb49 0303 	adc.w	r3, r9, r3
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ba:	4629      	mov	r1, r5
 80025bc:	024b      	lsls	r3, r1, #9
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c4:	4621      	mov	r1, r4
 80025c6:	024a      	lsls	r2, r1, #9
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025d8:	f7fd fe44 	bl	8000264 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e4:	e058      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	2200      	movs	r2, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	4611      	mov	r1, r2
 80025f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002600:	4642      	mov	r2, r8
 8002602:	464b      	mov	r3, r9
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	0159      	lsls	r1, r3, #5
 800260e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002612:	0150      	lsls	r0, r2, #5
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4641      	mov	r1, r8
 800261a:	ebb2 0a01 	subs.w	sl, r2, r1
 800261e:	4649      	mov	r1, r9
 8002620:	eb63 0b01 	sbc.w	fp, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002638:	ebb2 040a 	subs.w	r4, r2, sl
 800263c:	eb63 050b 	sbc.w	r5, r3, fp
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4643      	mov	r3, r8
 8002656:	18e3      	adds	r3, r4, r3
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	464b      	mov	r3, r9
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266e:	4629      	mov	r1, r5
 8002670:	028b      	lsls	r3, r1, #10
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002678:	4621      	mov	r1, r4
 800267a:	028a      	lsls	r2, r1, #10
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	61fa      	str	r2, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	f7fd fdea 	bl	8000264 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3750      	adds	r7, #80	@ 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08005c58 	.word	0x08005c58

08002714 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	220f      	movs	r2, #15
 8002722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002756:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <HAL_RCC_GetClockConfig+0x60>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0207 	and.w	r2, r3, #7
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f839 	bl	8002816 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 f9c0 	bl	8002b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d001      	beq.n	8002844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e04e      	b.n	80028e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a23      	ldr	r2, [pc, #140]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d022      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286e:	d01d      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1f      	ldr	r2, [pc, #124]	@ (80028f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d018      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <HAL_TIM_Base_Start_IT+0xd0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1b      	ldr	r2, [pc, #108]	@ (8002900 <HAL_TIM_Base_Start_IT+0xd4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a19      	ldr	r2, [pc, #100]	@ (8002904 <HAL_TIM_Base_Start_IT+0xd8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x80>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a18      	ldr	r2, [pc, #96]	@ (8002908 <HAL_TIM_Base_Start_IT+0xdc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d010      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	e007      	b.n	80028e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40010400 	.word	0x40010400
 8002904:	40014000 	.word	0x40014000
 8002908:	40001800 	.word	0x40001800

0800290c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d020      	beq.n	8002970 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01b      	beq.n	8002970 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0202 	mvn.w	r2, #2
 8002940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8d2 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8c4 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8d5 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d020      	beq.n	80029bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01b      	beq.n	80029bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0204 	mvn.w	r2, #4
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8ac 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f89e 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f8af 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d020      	beq.n	8002a08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0208 	mvn.w	r2, #8
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2204      	movs	r2, #4
 80029de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f886 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f878 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f889 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d020      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0210 	mvn.w	r2, #16
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f860 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f852 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f863 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0201 	mvn.w	r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe f92e 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f906 	bl	8002ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f834 	bl	8002b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0220 	mvn.w	r2, #32
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8d8 	bl	8002c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a46      	ldr	r2, [pc, #280]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5a:	d00f      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a43      	ldr	r2, [pc, #268]	@ (8002c6c <TIM_Base_SetConfig+0x130>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a42      	ldr	r2, [pc, #264]	@ (8002c70 <TIM_Base_SetConfig+0x134>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a41      	ldr	r2, [pc, #260]	@ (8002c74 <TIM_Base_SetConfig+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a35      	ldr	r2, [pc, #212]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9c:	d027      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a32      	ldr	r2, [pc, #200]	@ (8002c6c <TIM_Base_SetConfig+0x130>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d023      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	@ (8002c70 <TIM_Base_SetConfig+0x134>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a30      	ldr	r2, [pc, #192]	@ (8002c74 <TIM_Base_SetConfig+0x138>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01b      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d017      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <TIM_Base_SetConfig+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <TIM_Base_SetConfig+0x144>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00f      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <TIM_Base_SetConfig+0x148>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c88 <TIM_Base_SetConfig+0x14c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <TIM_Base_SetConfig+0x150>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <TIM_Base_SetConfig+0x154>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f023 0201 	bic.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40010400 	.word	0x40010400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800
 8002c88:	40001800 	.word	0x40001800
 8002c8c:	40001c00 	.word	0x40001c00
 8002c90:	40002000 	.word	0x40002000

08002c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 0208 	add.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f103 0208 	add.w	r2, r3, #8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f103 0208 	add.w	r2, r3, #8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d103      	bne.n	8002d36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e00c      	b.n	8002d50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3308      	adds	r3, #8
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e002      	b.n	8002d44 <vListInsert+0x2e>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d2f6      	bcs.n	8002d3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6892      	ldr	r2, [r2, #8]
 8002d9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6852      	ldr	r2, [r2, #4]
 8002da8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d103      	bne.n	8002dbc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	1e5a      	subs	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af04      	add	r7, sp, #16
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f8cd 	bl	8003f90 <pvPortMalloc>
 8002df6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dfe:	2058      	movs	r0, #88	@ 0x58
 8002e00:	f001 f8c6 	bl	8003f90 <pvPortMalloc>
 8002e04:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002e0c:	2258      	movs	r2, #88	@ 0x58
 8002e0e:	2100      	movs	r1, #0
 8002e10:	69f8      	ldr	r0, [r7, #28]
 8002e12:	f002 fe2b 	bl	8005a6c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e1c:	e005      	b.n	8002e2a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f001 f972 	bl	8004108 <vPortFree>
 8002e24:	e001      	b.n	8002e2a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9303      	str	r3, [sp, #12]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f80e 	bl	8002e68 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e4c:	69f8      	ldr	r0, [r7, #28]
 8002e4e:	f000 f89b 	bl	8002f88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e002      	b.n	8002e5e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
    }
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	21a5      	movs	r1, #165	@ 0xa5
 8002e82:	f002 fdf3 	bl	8005a6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e90:	3b01      	subs	r3, #1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f023 0307 	bic.w	r3, r3, #7
 8002e9e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	617b      	str	r3, [r7, #20]
    }
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01e      	beq.n	8002f06 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e012      	b.n	8002ef4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	7819      	ldrb	r1, [r3, #0]
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	3334      	adds	r3, #52	@ 0x34
 8002ede:	460a      	mov	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	d9e9      	bls.n	8002ece <prvInitialiseNewTask+0x66>
 8002efa:	e000      	b.n	8002efe <prvInitialiseNewTask+0x96>
            {
                break;
 8002efc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d90b      	bls.n	8002f24 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	613b      	str	r3, [r7, #16]
    }
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d901      	bls.n	8002f2e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f32:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f38:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fedc 	bl	8002cfc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	3318      	adds	r3, #24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fed7 	bl	8002cfc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f52:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	f1c3 0206 	rsb	r2, r3, #6
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	69b8      	ldr	r0, [r7, #24]
 8002f6a:	f000 fd2f 	bl	80039cc <pxPortInitialiseStack>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f72:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f80:	bf00      	nop
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f90:	f000 fecc 	bl	8003d2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f94:	4b4f      	ldr	r3, [pc, #316]	@ (80030d4 <prvAddNewTaskToReadyList+0x14c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80030d4 <prvAddNewTaskToReadyList+0x14c>)
 8002f9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <prvAddNewTaskToReadyList+0x150>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002fa6:	4a4c      	ldr	r2, [pc, #304]	@ (80030d8 <prvAddNewTaskToReadyList+0x150>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fac:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <prvAddNewTaskToReadyList+0x14c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d110      	bne.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002fb4:	f000 fbf0 	bl	8003798 <prvInitialiseTaskLists>
 8002fb8:	e00d      	b.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fba:	4b48      	ldr	r3, [pc, #288]	@ (80030dc <prvAddNewTaskToReadyList+0x154>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fc2:	4b45      	ldr	r3, [pc, #276]	@ (80030d8 <prvAddNewTaskToReadyList+0x150>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d802      	bhi.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fd0:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <prvAddNewTaskToReadyList+0x150>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fd6:	4b42      	ldr	r3, [pc, #264]	@ (80030e0 <prvAddNewTaskToReadyList+0x158>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a40      	ldr	r2, [pc, #256]	@ (80030e0 <prvAddNewTaskToReadyList+0x158>)
 8002fde:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <prvAddNewTaskToReadyList+0x158>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <prvAddNewTaskToReadyList+0x94>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fb2d 	bl	8005650 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	461d      	mov	r5, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461c      	mov	r4, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	1ae3      	subs	r3, r4, r3
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	462b      	mov	r3, r5
 8003018:	f001 fa36 	bl	8004488 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fb9a 	bl	8005758 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <prvAddNewTaskToReadyList+0x15c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	4a2c      	ldr	r2, [pc, #176]	@ (80030e4 <prvAddNewTaskToReadyList+0x15c>)
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303a:	492b      	ldr	r1, [pc, #172]	@ (80030e8 <prvAddNewTaskToReadyList+0x160>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3304      	adds	r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	3204      	adds	r2, #4
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <prvAddNewTaskToReadyList+0x160>)
 800307a:	441a      	add	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	615a      	str	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003084:	4918      	ldr	r1, [pc, #96]	@ (80030e8 <prvAddNewTaskToReadyList+0x160>)
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	4814      	ldr	r0, [pc, #80]	@ (80030e8 <prvAddNewTaskToReadyList+0x160>)
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4403      	add	r3, r0
 80030a0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030a2:	f000 fe75 	bl	8003d90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <prvAddNewTaskToReadyList+0x154>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00e      	beq.n	80030cc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <prvAddNewTaskToReadyList+0x150>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d207      	bcs.n	80030cc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <prvAddNewTaskToReadyList+0x164>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bdb0      	pop	{r4, r5, r7, pc}
 80030d4:	200001cc 	.word	0x200001cc
 80030d8:	200000e0 	.word	0x200000e0
 80030dc:	200001d8 	.word	0x200001d8
 80030e0:	200001e8 	.word	0x200001e8
 80030e4:	200001d4 	.word	0x200001d4
 80030e8:	200000e4 	.word	0x200000e4
 80030ec:	e000ed04 	.word	0xe000ed04

080030f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01c      	beq.n	800313c <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <vTaskDelay+0x6c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <vTaskDelay+0x32>
        __asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60bb      	str	r3, [r7, #8]
    }
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003122:	f000 f87b 	bl	800321c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	2023      	movs	r0, #35	@ 0x23
 800312a:	f001 fe9d 	bl	8004e68 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fbcb 	bl	80038cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003136:	f000 f87f 	bl	8003238 <xTaskResumeAll>
 800313a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8003142:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <vTaskDelay+0x70>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200001f4 	.word	0x200001f4
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800316a:	4b24      	ldr	r3, [pc, #144]	@ (80031fc <vTaskStartScheduler+0x98>)
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	2282      	movs	r2, #130	@ 0x82
 8003176:	4922      	ldr	r1, [pc, #136]	@ (8003200 <vTaskStartScheduler+0x9c>)
 8003178:	4822      	ldr	r0, [pc, #136]	@ (8003204 <vTaskStartScheduler+0xa0>)
 800317a:	f7ff fe2f 	bl	8002ddc <xTaskCreate>
 800317e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d124      	bne.n	80031d0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	60bb      	str	r3, [r7, #8]
    }
 8003198:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800319a:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <vTaskStartScheduler+0xa4>)
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <vTaskStartScheduler+0xa8>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <vTaskStartScheduler+0xac>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031ae:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <vTaskStartScheduler+0xb0>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b12      	ldr	r3, [pc, #72]	@ (80031fc <vTaskStartScheduler+0x98>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d102      	bne.n	80031c0 <vTaskStartScheduler+0x5c>
 80031ba:	f002 fa2d 	bl	8005618 <SEGGER_SYSVIEW_OnIdle>
 80031be:	e004      	b.n	80031ca <vTaskStartScheduler+0x66>
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <vTaskStartScheduler+0xb0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fa85 	bl	80056d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80031ca:	f000 fc8b 	bl	8003ae4 <xPortStartScheduler>
 80031ce:	e00f      	b.n	80031f0 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d6:	d10b      	bne.n	80031f0 <vTaskStartScheduler+0x8c>
        __asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	607b      	str	r3, [r7, #4]
    }
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031f0:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <vTaskStartScheduler+0xb4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200001f0 	.word	0x200001f0
 8003200:	08005b80 	.word	0x08005b80
 8003204:	08003769 	.word	0x08003769
 8003208:	200001ec 	.word	0x200001ec
 800320c:	200001d8 	.word	0x200001d8
 8003210:	200001d0 	.word	0x200001d0
 8003214:	200000e0 	.word	0x200000e0
 8003218:	08005c60 	.word	0x08005c60

0800321c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <vTaskSuspendAll+0x18>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	4a03      	ldr	r2, [pc, #12]	@ (8003234 <vTaskSuspendAll+0x18>)
 8003228:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	200001f4 	.word	0x200001f4

08003238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003246:	4b73      	ldr	r3, [pc, #460]	@ (8003414 <xTaskResumeAll+0x1dc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <xTaskResumeAll+0x2e>
        __asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	607b      	str	r3, [r7, #4]
    }
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	e7fd      	b.n	8003262 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003266:	f000 fd61 	bl	8003d2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800326a:	4b6a      	ldr	r3, [pc, #424]	@ (8003414 <xTaskResumeAll+0x1dc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	4a68      	ldr	r2, [pc, #416]	@ (8003414 <xTaskResumeAll+0x1dc>)
 8003272:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003274:	4b67      	ldr	r3, [pc, #412]	@ (8003414 <xTaskResumeAll+0x1dc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 80c4 	bne.w	8003406 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800327e:	4b66      	ldr	r3, [pc, #408]	@ (8003418 <xTaskResumeAll+0x1e0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80bf 	beq.w	8003406 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003288:	e08e      	b.n	80033a8 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328a:	4b64      	ldr	r3, [pc, #400]	@ (800341c <xTaskResumeAll+0x1e4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	6a12      	ldr	r2, [r2, #32]
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	69d2      	ldr	r2, [r2, #28]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3318      	adds	r3, #24
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d103      	bne.n	80032c0 <xTaskResumeAll+0x88>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2200      	movs	r2, #0
 80032c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	6892      	ldr	r2, [r2, #8]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3304      	adds	r3, #4
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d103      	bne.n	80032fe <xTaskResumeAll+0xc6>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fa21 	bl	8005758 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	4b40      	ldr	r3, [pc, #256]	@ (8003420 <xTaskResumeAll+0x1e8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	4a3e      	ldr	r2, [pc, #248]	@ (8003420 <xTaskResumeAll+0x1e8>)
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332c:	493d      	ldr	r1, [pc, #244]	@ (8003424 <xTaskResumeAll+0x1ec>)
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3304      	adds	r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	3204      	adds	r2, #4
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	1d1a      	adds	r2, r3, #4
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4a2e      	ldr	r2, [pc, #184]	@ (8003424 <xTaskResumeAll+0x1ec>)
 800336c:	441a      	add	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	615a      	str	r2, [r3, #20]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003376:	492b      	ldr	r1, [pc, #172]	@ (8003424 <xTaskResumeAll+0x1ec>)
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c59      	adds	r1, r3, #1
 8003386:	4827      	ldr	r0, [pc, #156]	@ (8003424 <xTaskResumeAll+0x1ec>)
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003398:	4b23      	ldr	r3, [pc, #140]	@ (8003428 <xTaskResumeAll+0x1f0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 80033a2:	4b22      	ldr	r3, [pc, #136]	@ (800342c <xTaskResumeAll+0x1f4>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033a8:	4b1c      	ldr	r3, [pc, #112]	@ (800341c <xTaskResumeAll+0x1e4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f af6c 	bne.w	800328a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033b8:	f000 fa6c 	bl	8003894 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003430 <xTaskResumeAll+0x1f8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d010      	beq.n	80033ea <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033c8:	f000 f848 	bl	800345c <xTaskIncrementTick>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <xTaskResumeAll+0x1f4>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3b01      	subs	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f1      	bne.n	80033c8 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80033e4:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <xTaskResumeAll+0x1f8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <xTaskResumeAll+0x1f4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <xTaskResumeAll+0x1fc>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003406:	f000 fcc3 	bl	8003d90 <vPortExitCritical>

    return xAlreadyYielded;
 800340a:	69bb      	ldr	r3, [r7, #24]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200001f4 	.word	0x200001f4
 8003418:	200001cc 	.word	0x200001cc
 800341c:	2000018c 	.word	0x2000018c
 8003420:	200001d4 	.word	0x200001d4
 8003424:	200000e4 	.word	0x200000e4
 8003428:	200000e0 	.word	0x200000e0
 800342c:	200001e0 	.word	0x200001e0
 8003430:	200001dc 	.word	0x200001dc
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800343e:	f000 fd65 	bl	8003f0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003446:	4b04      	ldr	r3, [pc, #16]	@ (8003458 <xTaskGetTickCountFromISR+0x20>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800344c:	683b      	ldr	r3, [r7, #0]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200001d0 	.word	0x200001d0

0800345c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003466:	4b80      	ldr	r3, [pc, #512]	@ (8003668 <xTaskIncrementTick+0x20c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 80f1 	bne.w	8003652 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003470:	4b7e      	ldr	r3, [pc, #504]	@ (800366c <xTaskIncrementTick+0x210>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003478:	4a7c      	ldr	r2, [pc, #496]	@ (800366c <xTaskIncrementTick+0x210>)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d121      	bne.n	80034c8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003484:	4b7a      	ldr	r3, [pc, #488]	@ (8003670 <xTaskIncrementTick+0x214>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <xTaskIncrementTick+0x4a>
        __asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	607b      	str	r3, [r7, #4]
    }
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	e7fd      	b.n	80034a2 <xTaskIncrementTick+0x46>
 80034a6:	4b72      	ldr	r3, [pc, #456]	@ (8003670 <xTaskIncrementTick+0x214>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	4b71      	ldr	r3, [pc, #452]	@ (8003674 <xTaskIncrementTick+0x218>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003670 <xTaskIncrementTick+0x214>)
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4a6f      	ldr	r2, [pc, #444]	@ (8003674 <xTaskIncrementTick+0x218>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003678 <xTaskIncrementTick+0x21c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003678 <xTaskIncrementTick+0x21c>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	f000 f9e6 	bl	8003894 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80034c8:	4b6c      	ldr	r3, [pc, #432]	@ (800367c <xTaskIncrementTick+0x220>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	f0c0 80aa 	bcc.w	8003628 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d4:	4b66      	ldr	r3, [pc, #408]	@ (8003670 <xTaskIncrementTick+0x214>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034de:	4b67      	ldr	r3, [pc, #412]	@ (800367c <xTaskIncrementTick+0x220>)
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	601a      	str	r2, [r3, #0]
                    break;
 80034e6:	e09f      	b.n	8003628 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e8:	4b61      	ldr	r3, [pc, #388]	@ (8003670 <xTaskIncrementTick+0x214>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d203      	bcs.n	8003508 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003500:	4a5e      	ldr	r2, [pc, #376]	@ (800367c <xTaskIncrementTick+0x220>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003506:	e08f      	b.n	8003628 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	68d2      	ldr	r2, [r2, #12]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	3304      	adds	r3, #4
 800352a:	429a      	cmp	r2, r3
 800352c:	d103      	bne.n	8003536 <xTaskIncrementTick+0xda>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01e      	beq.n	800358c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	6a12      	ldr	r2, [r2, #32]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	69d2      	ldr	r2, [r2, #28]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3318      	adds	r3, #24
 8003570:	429a      	cmp	r2, r3
 8003572:	d103      	bne.n	800357c <xTaskIncrementTick+0x120>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2200      	movs	r2, #0
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4618      	mov	r0, r3
 8003590:	f002 f8e2 	bl	8005758 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	4b38      	ldr	r3, [pc, #224]	@ (8003680 <xTaskIncrementTick+0x224>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	4a37      	ldr	r2, [pc, #220]	@ (8003680 <xTaskIncrementTick+0x224>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	4936      	ldr	r1, [pc, #216]	@ (8003684 <xTaskIncrementTick+0x228>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3304      	adds	r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	3204      	adds	r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a26      	ldr	r2, [pc, #152]	@ (8003684 <xTaskIncrementTick+0x228>)
 80035ea:	441a      	add	r2, r3
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	4923      	ldr	r1, [pc, #140]	@ (8003684 <xTaskIncrementTick+0x228>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	481f      	ldr	r0, [pc, #124]	@ (8003684 <xTaskIncrementTick+0x228>)
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4403      	add	r3, r0
 8003610:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003616:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <xTaskIncrementTick+0x22c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	429a      	cmp	r2, r3
 800361e:	f67f af59 	bls.w	80034d4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003626:	e755      	b.n	80034d4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003628:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <xTaskIncrementTick+0x22c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362e:	4915      	ldr	r1, [pc, #84]	@ (8003684 <xTaskIncrementTick+0x228>)
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d901      	bls.n	8003644 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <xTaskIncrementTick+0x230>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003650:	e004      	b.n	800365c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003652:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <xTaskIncrementTick+0x234>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	4a0d      	ldr	r2, [pc, #52]	@ (8003690 <xTaskIncrementTick+0x234>)
 800365a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800365e:	4618      	mov	r0, r3
 8003660:	3728      	adds	r7, #40	@ 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200001f4 	.word	0x200001f4
 800366c:	200001d0 	.word	0x200001d0
 8003670:	20000184 	.word	0x20000184
 8003674:	20000188 	.word	0x20000188
 8003678:	200001e4 	.word	0x200001e4
 800367c:	200001ec 	.word	0x200001ec
 8003680:	200001d4 	.word	0x200001d4
 8003684:	200000e4 	.word	0x200000e4
 8003688:	200000e0 	.word	0x200000e0
 800368c:	200001e0 	.word	0x200001e0
 8003690:	200001dc 	.word	0x200001dc

08003694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800369a:	4b2d      	ldr	r3, [pc, #180]	@ (8003750 <vTaskSwitchContext+0xbc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <vTaskSwitchContext+0xc0>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80036a8:	e04e      	b.n	8003748 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80036aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003754 <vTaskSwitchContext+0xc0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	4b29      	ldr	r3, [pc, #164]	@ (8003758 <vTaskSwitchContext+0xc4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	f1c3 031f 	rsb	r3, r3, #31
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4925      	ldr	r1, [pc, #148]	@ (800375c <vTaskSwitchContext+0xc8>)
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	607b      	str	r3, [r7, #4]
    }
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <vTaskSwitchContext+0x5a>
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a17      	ldr	r2, [pc, #92]	@ (800375c <vTaskSwitchContext+0xc8>)
 80036fe:	4413      	add	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3308      	adds	r3, #8
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <vTaskSwitchContext+0x8e>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a0d      	ldr	r2, [pc, #52]	@ (8003760 <vTaskSwitchContext+0xcc>)
 800372a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <vTaskSwitchContext+0xcc>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <vTaskSwitchContext+0xd0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d102      	bne.n	800373e <vTaskSwitchContext+0xaa>
 8003738:	f001 ff6e 	bl	8005618 <SEGGER_SYSVIEW_OnIdle>
}
 800373c:	e004      	b.n	8003748 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800373e:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <vTaskSwitchContext+0xcc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f001 ffc6 	bl	80056d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200001f4 	.word	0x200001f4
 8003754:	200001e0 	.word	0x200001e0
 8003758:	200001d4 	.word	0x200001d4
 800375c:	200000e4 	.word	0x200000e4
 8003760:	200000e0 	.word	0x200000e0
 8003764:	200001f0 	.word	0x200001f0

08003768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003770:	f000 f852 	bl	8003818 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <prvIdleTask+0x28>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d9f9      	bls.n	8003770 <prvIdleTask+0x8>
            {
                taskYIELD();
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <prvIdleTask+0x2c>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800378c:	e7f0      	b.n	8003770 <prvIdleTask+0x8>
 800378e:	bf00      	nop
 8003790:	200000e4 	.word	0x200000e4
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	e00c      	b.n	80037be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4a12      	ldr	r2, [pc, #72]	@ (80037f8 <prvInitialiseTaskLists+0x60>)
 80037b0:	4413      	add	r3, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fa82 	bl	8002cbc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3301      	adds	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d9ef      	bls.n	80037a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037c4:	480d      	ldr	r0, [pc, #52]	@ (80037fc <prvInitialiseTaskLists+0x64>)
 80037c6:	f7ff fa79 	bl	8002cbc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037ca:	480d      	ldr	r0, [pc, #52]	@ (8003800 <prvInitialiseTaskLists+0x68>)
 80037cc:	f7ff fa76 	bl	8002cbc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037d0:	480c      	ldr	r0, [pc, #48]	@ (8003804 <prvInitialiseTaskLists+0x6c>)
 80037d2:	f7ff fa73 	bl	8002cbc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80037d6:	480c      	ldr	r0, [pc, #48]	@ (8003808 <prvInitialiseTaskLists+0x70>)
 80037d8:	f7ff fa70 	bl	8002cbc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80037dc:	480b      	ldr	r0, [pc, #44]	@ (800380c <prvInitialiseTaskLists+0x74>)
 80037de:	f7ff fa6d 	bl	8002cbc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <prvInitialiseTaskLists+0x78>)
 80037e4:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <prvInitialiseTaskLists+0x64>)
 80037e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <prvInitialiseTaskLists+0x7c>)
 80037ea:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <prvInitialiseTaskLists+0x68>)
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200000e4 	.word	0x200000e4
 80037fc:	2000015c 	.word	0x2000015c
 8003800:	20000170 	.word	0x20000170
 8003804:	2000018c 	.word	0x2000018c
 8003808:	200001a0 	.word	0x200001a0
 800380c:	200001b8 	.word	0x200001b8
 8003810:	20000184 	.word	0x20000184
 8003814:	20000188 	.word	0x20000188

08003818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381e:	e019      	b.n	8003854 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003820:	f000 fa84 	bl	8003d2c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003824:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <prvCheckTasksWaitingTermination+0x50>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff faa9 	bl	8002d88 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <prvCheckTasksWaitingTermination+0x54>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b01      	subs	r3, #1
 800383c:	4a0b      	ldr	r2, [pc, #44]	@ (800386c <prvCheckTasksWaitingTermination+0x54>)
 800383e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003848:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800384a:	f000 faa1 	bl	8003d90 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f810 	bl	8003874 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e1      	bne.n	8003820 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200001a0 	.word	0x200001a0
 800386c:	200001cc 	.word	0x200001cc
 8003870:	200001b4 	.word	0x200001b4

08003874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fc41 	bl	8004108 <vPortFree>
            vPortFree( pxTCB );
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fc3e 	bl	8004108 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003898:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <prvResetNextTaskUnblockTime+0x30>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038a2:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <prvResetNextTaskUnblockTime+0x34>)
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038aa:	e005      	b.n	80038b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <prvResetNextTaskUnblockTime+0x30>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a04      	ldr	r2, [pc, #16]	@ (80038c8 <prvResetNextTaskUnblockTime+0x34>)
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000184 	.word	0x20000184
 80038c8:	200001ec 	.word	0x200001ec

080038cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038d6:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038dc:	4b35      	ldr	r3, [pc, #212]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fa50 	bl	8002d88 <uxListRemove>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038ee:	4b31      	ldr	r3, [pc, #196]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	2201      	movs	r2, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4013      	ands	r3, r2
 8003902:	4a2d      	ldr	r2, [pc, #180]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003904:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d124      	bne.n	8003958 <prvAddCurrentTaskToDelayedList+0x8c>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d021      	beq.n	8003958 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	4b26      	ldr	r3, [pc, #152]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	4b24      	ldr	r3, [pc, #144]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	6892      	ldr	r2, [r2, #8]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	4b21      	ldr	r3, [pc, #132]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	3204      	adds	r2, #4
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003948:	615a      	str	r2, [r3, #20]
 800394a:	4b1c      	ldr	r3, [pc, #112]	@ (80039bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a1a      	ldr	r2, [pc, #104]	@ (80039bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003956:	e026      	b.n	80039a6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003960:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	429a      	cmp	r2, r3
 800396e:	d209      	bcs.n	8003984 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b0f      	ldr	r3, [pc, #60]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7ff f9ca 	bl	8002d16 <vListInsert>
}
 8003982:	e010      	b.n	80039a6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3304      	adds	r3, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f7ff f9c0 	bl	8002d16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003996:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d202      	bcs.n	80039a6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80039a0:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6013      	str	r3, [r2, #0]
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200001d0 	.word	0x200001d0
 80039b4:	200000e0 	.word	0x200000e0
 80039b8:	200001d4 	.word	0x200001d4
 80039bc:	200001b8 	.word	0x200001b8
 80039c0:	20000188 	.word	0x20000188
 80039c4:	20000184 	.word	0x20000184
 80039c8:	200001ec 	.word	0x200001ec

080039cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b04      	subs	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b04      	subs	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b04      	subs	r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80039fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003a30 <pxPortInitialiseStack+0x64>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b14      	subs	r3, #20
 8003a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3b04      	subs	r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f06f 0202 	mvn.w	r2, #2
 8003a1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3b20      	subs	r3, #32
 8003a20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	08003a35 	.word	0x08003a35

08003a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <prvTaskExitError+0x58>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d00b      	beq.n	8003a60 <prvTaskExitError+0x2c>
        __asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	60fb      	str	r3, [r7, #12]
    }
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <prvTaskExitError+0x28>
        __asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60bb      	str	r3, [r7, #8]
    }
 8003a72:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003a74:	bf00      	nop
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0fc      	beq.n	8003a76 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003a90:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <pxCurrentTCBConst2>)
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	6808      	ldr	r0, [r1, #0]
 8003a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9a:	f380 8809 	msr	PSP, r0
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f380 8811 	msr	BASEPRI, r0
 8003aaa:	4770      	bx	lr
 8003aac:	f3af 8000 	nop.w

08003ab0 <pxCurrentTCBConst2>:
 8003ab0:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop

08003ab8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ab8:	4808      	ldr	r0, [pc, #32]	@ (8003adc <prvPortStartFirstTask+0x24>)
 8003aba:	6800      	ldr	r0, [r0, #0]
 8003abc:	6800      	ldr	r0, [r0, #0]
 8003abe:	f380 8808 	msr	MSP, r0
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8814 	msr	CONTROL, r0
 8003aca:	b662      	cpsie	i
 8003acc:	b661      	cpsie	f
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	df00      	svc	0
 8003ad8:	bf00      	nop
 8003ada:	0000      	.short	0x0000
 8003adc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop

08003ae4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003aea:	4b47      	ldr	r3, [pc, #284]	@ (8003c08 <xPortStartScheduler+0x124>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a47      	ldr	r2, [pc, #284]	@ (8003c0c <xPortStartScheduler+0x128>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10b      	bne.n	8003b0c <xPortStartScheduler+0x28>
        __asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
    }
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c08 <xPortStartScheduler+0x124>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3f      	ldr	r2, [pc, #252]	@ (8003c10 <xPortStartScheduler+0x12c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10b      	bne.n	8003b2e <xPortStartScheduler+0x4a>
        __asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	613b      	str	r3, [r7, #16]
    }
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b2e:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <xPortStartScheduler+0x130>)
 8003b30:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	22ff      	movs	r2, #255	@ 0xff
 8003b3e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <xPortStartScheduler+0x134>)
 8003b54:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b56:	4b31      	ldr	r3, [pc, #196]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b5c:	e009      	b.n	8003b72 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	4a2d      	ldr	r2, [pc, #180]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003b66:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7a:	2b80      	cmp	r3, #128	@ 0x80
 8003b7c:	d0ef      	beq.n	8003b5e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b7e:	4b27      	ldr	r3, [pc, #156]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1c3 0307 	rsb	r3, r3, #7
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d00b      	beq.n	8003ba2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	60bb      	str	r3, [r7, #8]
    }
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	e7fd      	b.n	8003b9e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003baa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bb4:	4a19      	ldr	r2, [pc, #100]	@ (8003c1c <xPortStartScheduler+0x138>)
 8003bb6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <xPortStartScheduler+0x13c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <xPortStartScheduler+0x13c>)
 8003bc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <xPortStartScheduler+0x13c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	@ (8003c20 <xPortStartScheduler+0x13c>)
 8003bd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003bd8:	f000 f968 	bl	8003eac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <xPortStartScheduler+0x140>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003be2:	f000 f987 	bl	8003ef4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <xPortStartScheduler+0x144>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0f      	ldr	r2, [pc, #60]	@ (8003c28 <xPortStartScheduler+0x144>)
 8003bec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003bf2:	f7ff ff61 	bl	8003ab8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003bf6:	f7ff fd4d 	bl	8003694 <vTaskSwitchContext>
    prvTaskExitError();
 8003bfa:	f7ff ff1b 	bl	8003a34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	e000ed00 	.word	0xe000ed00
 8003c0c:	410fc271 	.word	0x410fc271
 8003c10:	410fc270 	.word	0x410fc270
 8003c14:	e000e400 	.word	0xe000e400
 8003c18:	200001f8 	.word	0x200001f8
 8003c1c:	200001fc 	.word	0x200001fc
 8003c20:	e000ed20 	.word	0xe000ed20
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	e000ef34 	.word	0xe000ef34

08003c2c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c32:	4b38      	ldr	r3, [pc, #224]	@ (8003d14 <vInitPrioGroupValue+0xe8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <vInitPrioGroupValue+0xec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10b      	bne.n	8003c54 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	60fb      	str	r3, [r7, #12]
    }
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c54:	4b2f      	ldr	r3, [pc, #188]	@ (8003d14 <vInitPrioGroupValue+0xe8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a30      	ldr	r2, [pc, #192]	@ (8003d1c <vInitPrioGroupValue+0xf0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10b      	bne.n	8003c76 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	613b      	str	r3, [r7, #16]
    }
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c76:	4b2a      	ldr	r3, [pc, #168]	@ (8003d20 <vInitPrioGroupValue+0xf4>)
 8003c78:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	22ff      	movs	r2, #255	@ 0xff
 8003c86:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <vInitPrioGroupValue+0xf8>)
 8003c9c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c9e:	4b22      	ldr	r3, [pc, #136]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ca4:	e009      	b.n	8003cba <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003ca6:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a1e      	ldr	r2, [pc, #120]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003cae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b80      	cmp	r3, #128	@ 0x80
 8003cc4:	d0ef      	beq.n	8003ca6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cc6:	4b18      	ldr	r3, [pc, #96]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00b      	beq.n	8003cea <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
    }
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cea:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003cf2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003d28 <vInitPrioGroupValue+0xfc>)
 8003cfe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00
 8003d18:	410fc271 	.word	0x410fc271
 8003d1c:	410fc270 	.word	0x410fc270
 8003d20:	e000e400 	.word	0xe000e400
 8003d24:	200001f8 	.word	0x200001f8
 8003d28:	200001fc 	.word	0x200001fc

08003d2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
        __asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	607b      	str	r3, [r7, #4]
    }
 8003d44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <vPortEnterCritical+0x5c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d88 <vPortEnterCritical+0x5c>)
 8003d4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d50:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <vPortEnterCritical+0x5c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d110      	bne.n	8003d7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <vPortEnterCritical+0x60>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <vPortEnterCritical+0x4e>
        __asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	603b      	str	r3, [r7, #0]
    }
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <vPortEnterCritical+0x4a>
    }
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	2000000c 	.word	0x2000000c
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d96:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <vPortExitCritical+0x50>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <vPortExitCritical+0x26>
        __asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	607b      	str	r3, [r7, #4]
    }
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <vPortExitCritical+0x50>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <vPortExitCritical+0x50>)
 8003dbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <vPortExitCritical+0x50>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <vPortExitCritical+0x44>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003dd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	2000000c 	.word	0x2000000c
	...

08003df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003df0:	f3ef 8009 	mrs	r0, PSP
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <pxCurrentTCBConst>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f01e 0f10 	tst.w	lr, #16
 8003e00:	bf08      	it	eq
 8003e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e14:	f380 8811 	msr	BASEPRI, r0
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f7ff fc38 	bl	8003694 <vTaskSwitchContext>
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f380 8811 	msr	BASEPRI, r0
 8003e2c:	bc09      	pop	{r0, r3}
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	6808      	ldr	r0, [r1, #0]
 8003e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e36:	f01e 0f10 	tst.w	lr, #16
 8003e3a:	bf08      	it	eq
 8003e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e40:	f380 8809 	msr	PSP, r0
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst>:
 8003e50:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
    }
 8003e70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003e72:	f001 fb57 	bl	8005524 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e76:	f7ff faf1 	bl	800345c <xTaskIncrementTick>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003e80:	f001 fbae 	bl	80055e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e84:	4b08      	ldr	r3, [pc, #32]	@ (8003ea8 <SysTick_Handler+0x50>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e001      	b.n	8003e92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003e8e:	f001 fb8b 	bl	80055a8 <SEGGER_SYSVIEW_RecordExitISR>
 8003e92:	2300      	movs	r3, #0
 8003e94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f383 8811 	msr	BASEPRI, r3
    }
 8003e9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <vPortSetupTimerInterrupt+0x34>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <vPortSetupTimerInterrupt+0x38>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <vPortSetupTimerInterrupt+0x3c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <vPortSetupTimerInterrupt+0x40>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <vPortSetupTimerInterrupt+0x44>)
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ece:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <vPortSetupTimerInterrupt+0x34>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010
 8003ee4:	e000e018 	.word	0xe000e018
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	10624dd3 	.word	0x10624dd3
 8003ef0:	e000e014 	.word	0xe000e014

08003ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f04 <vPortEnableVFP+0x10>
 8003ef8:	6801      	ldr	r1, [r0, #0]
 8003efa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003efe:	6001      	str	r1, [r0, #0]
 8003f00:	4770      	bx	lr
 8003f02:	0000      	.short	0x0000
 8003f04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop

08003f0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003f12:	f3ef 8305 	mrs	r3, IPSR
 8003f16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d915      	bls.n	8003f4a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f1e:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <vPortValidateInterruptPriority+0x74>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f28:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <vPortValidateInterruptPriority+0x78>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	7afa      	ldrb	r2, [r7, #11]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20b      	bcs.n	8003f4a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	607b      	str	r3, [r7, #4]
    }
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <vPortValidateInterruptPriority+0x7c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f52:	4b0e      	ldr	r3, [pc, #56]	@ (8003f8c <vPortValidateInterruptPriority+0x80>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d90b      	bls.n	8003f72 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	603b      	str	r3, [r7, #0]
    }
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	e7fd      	b.n	8003f6e <vPortValidateInterruptPriority+0x62>
    }
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e3f0 	.word	0xe000e3f0
 8003f84:	200001f8 	.word	0x200001f8
 8003f88:	e000ed0c 	.word	0xe000ed0c
 8003f8c:	200001fc 	.word	0x200001fc

08003f90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	@ 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003f9c:	f7ff f93e 	bl	800321c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003fa0:	4b54      	ldr	r3, [pc, #336]	@ (80040f4 <pvPortMalloc+0x164>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003fa8:	f000 f908 	bl	80041bc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d012      	beq.n	8003fd8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d804      	bhi.n	8003fd4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	4413      	add	r3, r2
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e001      	b.n	8003fd8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db71      	blt.n	80040c2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d06e      	beq.n	80040c2 <pvPortMalloc+0x132>
 8003fe4:	4b44      	ldr	r3, [pc, #272]	@ (80040f8 <pvPortMalloc+0x168>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d869      	bhi.n	80040c2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fee:	4b43      	ldr	r3, [pc, #268]	@ (80040fc <pvPortMalloc+0x16c>)
 8003ff0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ff2:	4b42      	ldr	r3, [pc, #264]	@ (80040fc <pvPortMalloc+0x16c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff8:	e004      	b.n	8004004 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d903      	bls.n	8004016 <pvPortMalloc+0x86>
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f1      	bne.n	8003ffa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004016:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <pvPortMalloc+0x164>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	429a      	cmp	r2, r3
 800401e:	d050      	beq.n	80040c2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	4413      	add	r3, r2
 8004028:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	2308      	movs	r3, #8
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	429a      	cmp	r2, r3
 8004040:	d920      	bls.n	8004084 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <pvPortMalloc+0xdc>
        __asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
    }
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f000 f8f8 	bl	8004274 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004084:	4b1c      	ldr	r3, [pc, #112]	@ (80040f8 <pvPortMalloc+0x168>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	4a1a      	ldr	r2, [pc, #104]	@ (80040f8 <pvPortMalloc+0x168>)
 8004090:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004092:	4b19      	ldr	r3, [pc, #100]	@ (80040f8 <pvPortMalloc+0x168>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b1a      	ldr	r3, [pc, #104]	@ (8004100 <pvPortMalloc+0x170>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d203      	bcs.n	80040a6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800409e:	4b16      	ldr	r3, [pc, #88]	@ (80040f8 <pvPortMalloc+0x168>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <pvPortMalloc+0x170>)
 80040a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <pvPortMalloc+0x174>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3301      	adds	r3, #1
 80040be:	4a11      	ldr	r2, [pc, #68]	@ (8004104 <pvPortMalloc+0x174>)
 80040c0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80040c2:	f7ff f8b9 	bl	8003238 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <pvPortMalloc+0x158>
        __asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
    }
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <pvPortMalloc+0x154>
    return pvReturn;
 80040e8:	69fb      	ldr	r3, [r7, #28]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3728      	adds	r7, #40	@ 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20012e08 	.word	0x20012e08
 80040f8:	20012e0c 	.word	0x20012e0c
 80040fc:	20012e00 	.word	0x20012e00
 8004100:	20012e10 	.word	0x20012e10
 8004104:	20012e14 	.word	0x20012e14

08004108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d047      	beq.n	80041aa <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800411a:	2308      	movs	r3, #8
 800411c:	425b      	negs	r3, r3
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4413      	add	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	db0b      	blt.n	8004148 <vPortFree+0x40>
        __asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60fb      	str	r3, [r7, #12]
    }
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <vPortFree+0x60>
        __asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60bb      	str	r3, [r7, #8]
    }
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	da1c      	bge.n	80041aa <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d118      	bne.n	80041aa <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004184:	f7ff f84a 	bl	800321c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <vPortFree+0xac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4413      	add	r3, r2
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <vPortFree+0xac>)
 8004194:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004196:	6938      	ldr	r0, [r7, #16]
 8004198:	f000 f86c 	bl	8004274 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <vPortFree+0xb0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <vPortFree+0xb0>)
 80041a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80041a6:	f7ff f847 	bl	8003238 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20012e0c 	.word	0x20012e0c
 80041b8:	20012e18 	.word	0x20012e18

080041bc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041c2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80041c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <prvHeapInit+0xa4>)
 80041ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3307      	adds	r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <prvHeapInit+0xa4>)
 80041ec:	4413      	add	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <prvHeapInit+0xa8>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <prvHeapInit+0xa8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4413      	add	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004208:	2208      	movs	r2, #8
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a13      	ldr	r2, [pc, #76]	@ (8004268 <prvHeapInit+0xac>)
 800421c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <prvHeapInit+0xac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004226:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <prvHeapInit+0xac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800423c:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <prvHeapInit+0xac>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a08      	ldr	r2, [pc, #32]	@ (800426c <prvHeapInit+0xb0>)
 800424a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a07      	ldr	r2, [pc, #28]	@ (8004270 <prvHeapInit+0xb4>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	20000200 	.word	0x20000200
 8004264:	20012e00 	.word	0x20012e00
 8004268:	20012e08 	.word	0x20012e08
 800426c:	20012e10 	.word	0x20012e10
 8004270:	20012e0c 	.word	0x20012e0c

08004274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800427c:	4b28      	ldr	r3, [pc, #160]	@ (8004320 <prvInsertBlockIntoFreeList+0xac>)
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e002      	b.n	8004288 <prvInsertBlockIntoFreeList+0x14>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	d8f7      	bhi.n	8004282 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d108      	bne.n	80042b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	441a      	add	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	441a      	add	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d118      	bne.n	80042fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <prvInsertBlockIntoFreeList+0xb0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d00d      	beq.n	80042f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	441a      	add	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e008      	b.n	8004304 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <prvInsertBlockIntoFreeList+0xb0>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e003      	b.n	8004304 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d002      	beq.n	8004312 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20012e00 	.word	0x20012e00
 8004324:	20012e08 	.word	0x20012e08

08004328 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800432c:	4803      	ldr	r0, [pc, #12]	@ (800433c <_cbSendSystemDesc+0x14>)
 800432e:	f001 f8a3 	bl	8005478 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004332:	4803      	ldr	r0, [pc, #12]	@ (8004340 <_cbSendSystemDesc+0x18>)
 8004334:	f001 f8a0 	bl	8005478 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	08005b88 	.word	0x08005b88
 8004340:	08005bc0 	.word	0x08005bc0

08004344 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <SEGGER_SYSVIEW_Conf+0x20>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <SEGGER_SYSVIEW_Conf+0x20>)
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <SEGGER_SYSVIEW_Conf+0x24>)
 8004352:	4a06      	ldr	r2, [pc, #24]	@ (800436c <SEGGER_SYSVIEW_Conf+0x28>)
 8004354:	f000 fd16 	bl	8004d84 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004358:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800435c:	f000 fd56 	bl	8004e0c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000000 	.word	0x20000000
 8004368:	08004329 	.word	0x08004329
 800436c:	08005c64 	.word	0x08005c64

08004370 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004372:	b085      	sub	sp, #20
 8004374:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	e033      	b.n	80043e4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800437c:	491e      	ldr	r1, [pc, #120]	@ (80043f8 <_cbSendTaskList+0x88>)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	491a      	ldr	r1, [pc, #104]	@ (80043f8 <_cbSendTaskList+0x88>)
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3304      	adds	r3, #4
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	4c16      	ldr	r4, [pc, #88]	@ (80043f8 <_cbSendTaskList+0x88>)
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4423      	add	r3, r4
 80043ac:	3308      	adds	r3, #8
 80043ae:	681c      	ldr	r4, [r3, #0]
 80043b0:	4d11      	ldr	r5, [pc, #68]	@ (80043f8 <_cbSendTaskList+0x88>)
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	442b      	add	r3, r5
 80043be:	330c      	adds	r3, #12
 80043c0:	681d      	ldr	r5, [r3, #0]
 80043c2:	4e0d      	ldr	r6, [pc, #52]	@ (80043f8 <_cbSendTaskList+0x88>)
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4433      	add	r3, r6
 80043d0:	3310      	adds	r3, #16
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	462b      	mov	r3, r5
 80043d8:	4622      	mov	r2, r4
 80043da:	f000 f8bd 	bl	8004558 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3301      	adds	r3, #1
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <_cbSendTaskList+0x8c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d3c6      	bcc.n	800437c <_cbSendTaskList+0xc>
  }
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f8:	20012e1c 	.word	0x20012e1c
 80043fc:	20012ebc 	.word	0x20012ebc

08004400 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004408:	f7ff f816 	bl	8003438 <xTaskGetTickCountFromISR>
 800440c:	4603      	mov	r3, r0
 800440e:	2200      	movs	r2, #0
 8004410:	469a      	mov	sl, r3
 8004412:	4693      	mov	fp, r2
 8004414:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	f04f 0a00 	mov.w	sl, #0
 8004424:	f04f 0b00 	mov.w	fp, #0
 8004428:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800442c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004430:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004434:	4652      	mov	r2, sl
 8004436:	465b      	mov	r3, fp
 8004438:	1a14      	subs	r4, r2, r0
 800443a:	eb63 0501 	sbc.w	r5, r3, r1
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	00ab      	lsls	r3, r5, #2
 8004448:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800444c:	00a2      	lsls	r2, r4, #2
 800444e:	4614      	mov	r4, r2
 8004450:	461d      	mov	r5, r3
 8004452:	eb14 0800 	adds.w	r8, r4, r0
 8004456:	eb45 0901 	adc.w	r9, r5, r1
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800446a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446e:	4690      	mov	r8, r2
 8004470:	4699      	mov	r9, r3
 8004472:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004476:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004488 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004496:	2205      	movs	r2, #5
 8004498:	492b      	ldr	r1, [pc, #172]	@ (8004548 <SYSVIEW_AddTask+0xc0>)
 800449a:	68b8      	ldr	r0, [r7, #8]
 800449c:	f001 fad6 	bl	8005a4c <memcmp>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d04b      	beq.n	800453e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80044a6:	4b29      	ldr	r3, [pc, #164]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	d903      	bls.n	80044b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80044ae:	4828      	ldr	r0, [pc, #160]	@ (8004550 <SYSVIEW_AddTask+0xc8>)
 80044b0:	f001 fa70 	bl	8005994 <SEGGER_SYSVIEW_Warn>
    return;
 80044b4:	e044      	b.n	8004540 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80044b6:	4b25      	ldr	r3, [pc, #148]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4926      	ldr	r1, [pc, #152]	@ (8004554 <SYSVIEW_AddTask+0xcc>)
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80044ca:	4b20      	ldr	r3, [pc, #128]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4921      	ldr	r1, [pc, #132]	@ (8004554 <SYSVIEW_AddTask+0xcc>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	3304      	adds	r3, #4
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80044e0:	4b1a      	ldr	r3, [pc, #104]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	491b      	ldr	r1, [pc, #108]	@ (8004554 <SYSVIEW_AddTask+0xcc>)
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3308      	adds	r3, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80044f6:	4b15      	ldr	r3, [pc, #84]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4916      	ldr	r1, [pc, #88]	@ (8004554 <SYSVIEW_AddTask+0xcc>)
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	330c      	adds	r3, #12
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800450c:	4b0f      	ldr	r3, [pc, #60]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4910      	ldr	r1, [pc, #64]	@ (8004554 <SYSVIEW_AddTask+0xcc>)
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	3310      	adds	r3, #16
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	4a08      	ldr	r2, [pc, #32]	@ (800454c <SYSVIEW_AddTask+0xc4>)
 800452a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f80e 	bl	8004558 <SYSVIEW_SendTaskInfo>
 800453c:	e000      	b.n	8004540 <SYSVIEW_AddTask+0xb8>
    return;
 800453e:	bf00      	nop

}
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	08005bd0 	.word	0x08005bd0
 800454c:	20012ebc 	.word	0x20012ebc
 8004550:	08005bd8 	.word	0x08005bd8
 8004554:	20012e1c 	.word	0x20012e1c

08004558 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	2214      	movs	r2, #20
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fa7c 	bl	8005a6c <memset>
  TaskInfo.TaskID     = TaskID;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe7b 	bl	8005288 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004592:	bf00      	nop
 8004594:	3728      	adds	r7, #40	@ 0x28
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <_DoInit+0x98>)
 80045a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2203      	movs	r2, #3
 80045aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2203      	movs	r2, #3
 80045b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a20      	ldr	r2, [pc, #128]	@ (8004638 <_DoInit+0x9c>)
 80045b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a20      	ldr	r2, [pc, #128]	@ (800463c <_DoInit+0xa0>)
 80045bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <_DoInit+0x9c>)
 80045dc:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <_DoInit+0xa4>)
 80045e2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2210      	movs	r2, #16
 80045e8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3307      	adds	r3, #7
 8004600:	4a10      	ldr	r2, [pc, #64]	@ (8004644 <_DoInit+0xa8>)
 8004602:	6810      	ldr	r0, [r2, #0]
 8004604:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004606:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <_DoInit+0xac>)
 800460e:	6810      	ldr	r0, [r2, #0]
 8004610:	6018      	str	r0, [r3, #0]
 8004612:	8891      	ldrh	r1, [r2, #4]
 8004614:	7992      	ldrb	r2, [r2, #6]
 8004616:	8099      	strh	r1, [r3, #4]
 8004618:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800461a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004624:	f3bf 8f5f 	dmb	sy
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20012ec0 	.word	0x20012ec0
 8004638:	08005c28 	.word	0x08005c28
 800463c:	20012f68 	.word	0x20012f68
 8004640:	20013368 	.word	0x20013368
 8004644:	08005c34 	.word	0x08005c34
 8004648:	08005c38 	.word	0x08005c38

0800464c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	@ 0x30
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004658:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <SEGGER_RTT_ReadNoLock+0x108>)
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <SEGGER_RTT_ReadNoLock+0x1e>
 8004666:	f7ff ff99 	bl	800459c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	3360      	adds	r3, #96	@ 0x60
 8004676:	4a37      	ldr	r2, [pc, #220]	@ (8004754 <SEGGER_RTT_ReadNoLock+0x108>)
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800468c:	2300      	movs	r3, #0
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	429a      	cmp	r2, r3
 8004696:	d92b      	bls.n	80046f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf28      	it	cs
 80046aa:	4613      	movcs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	4413      	add	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	6939      	ldr	r1, [r7, #16]
 80046bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046be:	f001 fa01 	bl	8005ac4 <memcpy>
    NumBytesRead += NumBytesRem;
 80046c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4413      	add	r3, r2
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4413      	add	r3, r2
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d101      	bne.n	80046f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf28      	it	cs
 8004700:	4613      	movcs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d019      	beq.n	800473e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004710:	4413      	add	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	6939      	ldr	r1, [r7, #16]
 8004718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800471a:	f001 f9d3 	bl	8005ac4 <memcpy>
    NumBytesRead += NumBytesRem;
 800471e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4413      	add	r3, r2
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	4413      	add	r3, r2
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004748:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800474c:	4618      	mov	r0, r3
 800474e:	3730      	adds	r7, #48	@ 0x30
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20012ec0 	.word	0x20012ec0

08004758 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004766:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004774:	f7ff ff12 	bl	800459c <_DoInit>
  SEGGER_RTT_LOCK();
 8004778:	f3ef 8311 	mrs	r3, BASEPRI
 800477c:	f04f 0120 	mov.w	r1, #32
 8004780:	f381 8811 	msr	BASEPRI, r1
 8004784:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004786:	4b35      	ldr	r3, [pc, #212]	@ (800485c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004788:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800478e:	6939      	ldr	r1, [r7, #16]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	440b      	add	r3, r1
 800479e:	3304      	adds	r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	dbeb      	blt.n	800478e <SEGGER_RTT_AllocUpBuffer+0x36>
 80047b6:	e000      	b.n	80047ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80047b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	da3f      	bge.n	8004844 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80047c4:	6939      	ldr	r1, [r7, #16]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	4613      	mov	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	440b      	add	r3, r1
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80047d8:	6939      	ldr	r1, [r7, #16]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	4613      	mov	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4413      	add	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	440b      	add	r3, r1
 80047e8:	3304      	adds	r3, #4
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80047ee:	6939      	ldr	r1, [r7, #16]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	440b      	add	r3, r1
 80047fc:	3320      	adds	r3, #32
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	440b      	add	r3, r1
 8004810:	3328      	adds	r3, #40	@ 0x28
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004816:	6939      	ldr	r1, [r7, #16]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	440b      	add	r3, r1
 8004824:	3324      	adds	r3, #36	@ 0x24
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800482a:	6939      	ldr	r1, [r7, #16]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	332c      	adds	r3, #44	@ 0x2c
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800483e:	f3bf 8f5f 	dmb	sy
 8004842:	e002      	b.n	800484a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
 8004848:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004850:	69fb      	ldr	r3, [r7, #28]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20012ec0 	.word	0x20012ec0

08004860 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800486e:	4b33      	ldr	r3, [pc, #204]	@ (800493c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800487c:	f7ff fe8e 	bl	800459c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004880:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004882:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	461a      	mov	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4293      	cmp	r3, r2
 800488e:	d24d      	bcs.n	800492c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004890:	f3ef 8311 	mrs	r3, BASEPRI
 8004894:	f04f 0120 	mov.w	r1, #32
 8004898:	f381 8811 	msr	BASEPRI, r1
 800489c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d031      	beq.n	8004908 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80048a4:	6979      	ldr	r1, [r7, #20]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	3360      	adds	r3, #96	@ 0x60
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	440b      	add	r3, r1
 80048c6:	3364      	adds	r3, #100	@ 0x64
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80048cc:	6979      	ldr	r1, [r7, #20]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4613      	mov	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4413      	add	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	3368      	adds	r3, #104	@ 0x68
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80048e0:	6979      	ldr	r1, [r7, #20]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4613      	mov	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	440b      	add	r3, r1
 80048ee:	3370      	adds	r3, #112	@ 0x70
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	336c      	adds	r3, #108	@ 0x6c
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004908:	6979      	ldr	r1, [r7, #20]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	3374      	adds	r3, #116	@ 0x74
 8004918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800491c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e002      	b.n	8004932 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
 8004930:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004932:	69fb      	ldr	r3, [r7, #28]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20012ec0 	.word	0x20012ec0

08004940 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004950:	e002      	b.n	8004958 <_EncodeStr+0x18>
    Len++;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3301      	adds	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f6      	bne.n	8004952 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d901      	bls.n	8004970 <_EncodeStr+0x30>
    Len = Limit;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2bfe      	cmp	r3, #254	@ 0xfe
 8004974:	d806      	bhi.n	8004984 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	60fa      	str	r2, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e011      	b.n	80049a8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	60fa      	str	r2, [r7, #12]
 800498a:	22ff      	movs	r2, #255	@ 0xff
 800498c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	60fa      	str	r2, [r7, #12]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	0a19      	lsrs	r1, r3, #8
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	b2ca      	uxtb	r2, r1
 80049a6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80049ac:	e00a      	b.n	80049c4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	1c53      	adds	r3, r2, #1
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	60f9      	str	r1, [r7, #12]
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
    n++;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3f0      	bcc.n	80049ae <_EncodeStr+0x6e>
  }
  return pPayload;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049fa:	4b35      	ldr	r3, [pc, #212]	@ (8004ad0 <_HandleIncomingPacket+0xdc>)
 80049fc:	7e1b      	ldrb	r3, [r3, #24]
 80049fe:	4618      	mov	r0, r3
 8004a00:	1cfb      	adds	r3, r7, #3
 8004a02:	2201      	movs	r2, #1
 8004a04:	4619      	mov	r1, r3
 8004a06:	f7ff fe21 	bl	800464c <SEGGER_RTT_ReadNoLock>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dd59      	ble.n	8004ac8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	2b80      	cmp	r3, #128	@ 0x80
 8004a18:	d032      	beq.n	8004a80 <_HandleIncomingPacket+0x8c>
 8004a1a:	2b80      	cmp	r3, #128	@ 0x80
 8004a1c:	dc42      	bgt.n	8004aa4 <_HandleIncomingPacket+0xb0>
 8004a1e:	2b07      	cmp	r3, #7
 8004a20:	dc16      	bgt.n	8004a50 <_HandleIncomingPacket+0x5c>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	dd3e      	ble.n	8004aa4 <_HandleIncomingPacket+0xb0>
 8004a26:	3b01      	subs	r3, #1
 8004a28:	2b06      	cmp	r3, #6
 8004a2a:	d83b      	bhi.n	8004aa4 <_HandleIncomingPacket+0xb0>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <_HandleIncomingPacket+0x40>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a57 	.word	0x08004a57
 8004a38:	08004a5d 	.word	0x08004a5d
 8004a3c:	08004a63 	.word	0x08004a63
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a6f 	.word	0x08004a6f
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a7b 	.word	0x08004a7b
 8004a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a52:	d034      	beq.n	8004abe <_HandleIncomingPacket+0xca>
 8004a54:	e026      	b.n	8004aa4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004a56:	f000 fa9d 	bl	8004f94 <SEGGER_SYSVIEW_Start>
      break;
 8004a5a:	e035      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004a5c:	f000 fb54 	bl	8005108 <SEGGER_SYSVIEW_Stop>
      break;
 8004a60:	e032      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004a62:	f000 fd2d 	bl	80054c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004a66:	e02f      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004a68:	f000 fcf2 	bl	8005450 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004a6c:	e02c      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004a6e:	f000 fb71 	bl	8005154 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004a72:	e029      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004a74:	f000 ff50 	bl	8005918 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004a78:	e026      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004a7a:	f000 ff2f 	bl	80058dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004a7e:	e023      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a80:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <_HandleIncomingPacket+0xdc>)
 8004a82:	7e1b      	ldrb	r3, [r3, #24]
 8004a84:	4618      	mov	r0, r3
 8004a86:	1cfb      	adds	r3, r7, #3
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f7ff fdde 	bl	800464c <SEGGER_RTT_ReadNoLock>
 8004a90:	4603      	mov	r3, r0
 8004a92:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dd13      	ble.n	8004ac2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fe9d 	bl	80057dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004aa2:	e00e      	b.n	8004ac2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	da0c      	bge.n	8004ac6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004aac:	4b08      	ldr	r3, [pc, #32]	@ (8004ad0 <_HandleIncomingPacket+0xdc>)
 8004aae:	7e1b      	ldrb	r3, [r3, #24]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	1cfb      	adds	r3, r7, #3
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f7ff fdc8 	bl	800464c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004abc:	e003      	b.n	8004ac6 <_HandleIncomingPacket+0xd2>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <_HandleIncomingPacket+0xd4>
      break;
 8004ac6:	bf00      	nop
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20014380 	.word	0x20014380

08004ad4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08c      	sub	sp, #48	@ 0x30
 8004ad8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004ada:	2301      	movs	r3, #1
 8004adc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae8:	4b31      	ldr	r3, [pc, #196]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aee:	e00b      	b.n	8004b08 <_TrySendOverflowPacket+0x34>
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af6:	1c59      	adds	r1, r3, #1
 8004af8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004afa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	09db      	lsrs	r3, r3, #7
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b0c:	d8f0      	bhi.n	8004af0 <_TrySendOverflowPacket+0x1c>
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b1e:	4b25      	ldr	r3, [pc, #148]	@ (8004bb4 <_TrySendOverflowPacket+0xe0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b24:	4b22      	ldr	r3, [pc, #136]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	e00b      	b.n	8004b50 <_TrySendOverflowPacket+0x7c>
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <_TrySendOverflowPacket+0x64>
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b5c:	6a3a      	ldr	r2, [r7, #32]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004b66:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	1d3b      	adds	r3, r7, #4
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	f7fb fb2a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b86:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b8c:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e004      	b.n	8004ba4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a03      	ldr	r2, [pc, #12]	@ (8004bb0 <_TrySendOverflowPacket+0xdc>)
 8004ba2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ba4:	693b      	ldr	r3, [r7, #16]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3730      	adds	r7, #48	@ 0x30
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20014380 	.word	0x20014380
 8004bb4:	e0001004 	.word	0xe0001004

08004bb8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	@ 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d78 <_SendPacket+0x1c0>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d010      	beq.n	8004bee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <_SendPacket+0x1c0>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a3 	beq.w	8004d1c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004bd6:	4b68      	ldr	r3, [pc, #416]	@ (8004d78 <_SendPacket+0x1c0>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d109      	bne.n	8004bf2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004bde:	f7ff ff79 	bl	8004ad4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004be2:	4b65      	ldr	r3, [pc, #404]	@ (8004d78 <_SendPacket+0x1c0>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	f040 809a 	bne.w	8004d20 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004bec:	e001      	b.n	8004bf2 <_SendPacket+0x3a>
    goto Send;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <_SendPacket+0x3c>
Send:
 8004bf2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b1f      	cmp	r3, #31
 8004bf8:	d809      	bhi.n	8004c0e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8004d78 <_SendPacket+0x1c0>)
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 808b 	bne.w	8004d24 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b17      	cmp	r3, #23
 8004c12:	d807      	bhi.n	8004c24 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e03d      	b.n	8004ca0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c30:	d912      	bls.n	8004c58 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	09da      	lsrs	r2, r3, #7
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	60fa      	str	r2, [r7, #12]
 8004c4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e006      	b.n	8004c66 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c6a:	d912      	bls.n	8004c92 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	09da      	lsrs	r2, r3, #7
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	60fa      	str	r2, [r7, #12]
 8004c86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e006      	b.n	8004ca0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ca0:	4b36      	ldr	r3, [pc, #216]	@ (8004d7c <_SendPacket+0x1c4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ca6:	4b34      	ldr	r3, [pc, #208]	@ (8004d78 <_SendPacket+0x1c0>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	e00b      	b.n	8004cd2 <_SendPacket+0x11a>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	6279      	str	r1, [r7, #36]	@ 0x24
 8004cc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cd6:	d8f0      	bhi.n	8004cba <_SendPacket+0x102>
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ce8:	4b23      	ldr	r3, [pc, #140]	@ (8004d78 <_SendPacket+0x1c0>)
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	4618      	mov	r0, r3
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	f7fb fa6a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d06:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	60d3      	str	r3, [r2, #12]
 8004d0c:	e00b      	b.n	8004d26 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4b18      	ldr	r3, [pc, #96]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e004      	b.n	8004d26 <_SendPacket+0x16e>
    goto SendDone;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <_SendPacket+0x16e>
      goto SendDone;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <_SendPacket+0x16e>
      goto SendDone;
 8004d24:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d26:	4b14      	ldr	r3, [pc, #80]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d28:	7e1b      	ldrb	r3, [r3, #24]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4a14      	ldr	r2, [pc, #80]	@ (8004d80 <_SendPacket+0x1c8>)
 8004d2e:	460b      	mov	r3, r1
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	440b      	add	r3, r1
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4413      	add	r3, r2
 8004d38:	336c      	adds	r3, #108	@ 0x6c
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
 8004d40:	4618      	mov	r0, r3
 8004d42:	490f      	ldr	r1, [pc, #60]	@ (8004d80 <_SendPacket+0x1c8>)
 8004d44:	4603      	mov	r3, r0
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4403      	add	r3, r0
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3370      	adds	r3, #112	@ 0x70
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d00b      	beq.n	8004d6e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d56:	4b08      	ldr	r3, [pc, #32]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d58:	789b      	ldrb	r3, [r3, #2]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d64:	f7ff fe46 	bl	80049f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <_SendPacket+0x1c0>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004d6e:	bf00      	nop
 8004d70:	3728      	adds	r7, #40	@ 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20014380 	.word	0x20014380
 8004d7c:	e0001004 	.word	0xe0001004
 8004d80:	20012ec0 	.word	0x20012ec0

08004d84 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d92:	2300      	movs	r3, #0
 8004d94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d98:	4917      	ldr	r1, [pc, #92]	@ (8004df8 <SEGGER_SYSVIEW_Init+0x74>)
 8004d9a:	4818      	ldr	r0, [pc, #96]	@ (8004dfc <SEGGER_SYSVIEW_Init+0x78>)
 8004d9c:	f7ff fcdc 	bl	8004758 <SEGGER_RTT_AllocUpBuffer>
 8004da0:	4603      	mov	r3, r0
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004da6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004da8:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004daa:	785a      	ldrb	r2, [r3, #1]
 8004dac:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004db0:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	4618      	mov	r0, r3
 8004db6:	2300      	movs	r3, #0
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	2308      	movs	r3, #8
 8004dbc:	4a11      	ldr	r2, [pc, #68]	@ (8004e04 <SEGGER_SYSVIEW_Init+0x80>)
 8004dbe:	490f      	ldr	r1, [pc, #60]	@ (8004dfc <SEGGER_SYSVIEW_Init+0x78>)
 8004dc0:	f7ff fd4e 	bl	8004860 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004dca:	4b0f      	ldr	r3, [pc, #60]	@ (8004e08 <SEGGER_SYSVIEW_Init+0x84>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0c      	ldr	r2, [pc, #48]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dd0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004dd8:	4a09      	ldr	r2, [pc, #36]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004dde:	4a08      	ldr	r2, [pc, #32]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004de4:	4a06      	ldr	r2, [pc, #24]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004dea:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20013378 	.word	0x20013378
 8004dfc:	08005c40 	.word	0x08005c40
 8004e00:	20014380 	.word	0x20014380
 8004e04:	20014378 	.word	0x20014378
 8004e08:	e0001004 	.word	0xe0001004

08004e0c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e14:	4a04      	ldr	r2, [pc, #16]	@ (8004e28 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6113      	str	r3, [r2, #16]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20014380 	.word	0x20014380

08004e2c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e34:	f3ef 8311 	mrs	r3, BASEPRI
 8004e38:	f04f 0120 	mov.w	r1, #32
 8004e3c:	f381 8811 	msr	BASEPRI, r1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	4808      	ldr	r0, [pc, #32]	@ (8004e64 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004e44:	f7ff fdc9 	bl	80049da <_PreparePacket>
 8004e48:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f7ff feb2 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f383 8811 	msr	BASEPRI, r3
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200143b0 	.word	0x200143b0

08004e68 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e72:	f3ef 8311 	mrs	r3, BASEPRI
 8004e76:	f04f 0120 	mov.w	r1, #32
 8004e7a:	f381 8811 	msr	BASEPRI, r1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	4816      	ldr	r0, [pc, #88]	@ (8004edc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e82:	f7ff fdaa 	bl	80049da <_PreparePacket>
 8004e86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	e00b      	b.n	8004eae <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	1c59      	adds	r1, r3, #1
 8004e9e:	61f9      	str	r1, [r7, #28]
 8004ea0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	09db      	lsrs	r3, r3, #7
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eb2:	d8f0      	bhi.n	8004e96 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	61fa      	str	r2, [r7, #28]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	6938      	ldr	r0, [r7, #16]
 8004eca:	f7ff fe75 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f383 8811 	msr	BASEPRI, r3
}
 8004ed4:	bf00      	nop
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	200143b0 	.word	0x200143b0

08004ee0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	@ 0x30
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004eec:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef0:	f04f 0120 	mov.w	r1, #32
 8004ef4:	f381 8811 	msr	BASEPRI, r1
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	4825      	ldr	r0, [pc, #148]	@ (8004f90 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004efc:	f7ff fd6d 	bl	80049da <_PreparePacket>
 8004f00:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	e00b      	b.n	8004f60 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	09db      	lsrs	r3, r3, #7
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f64:	d8f0      	bhi.n	8004f48 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f6c:	6a3a      	ldr	r2, [r7, #32]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	6979      	ldr	r1, [r7, #20]
 8004f7a:	69b8      	ldr	r0, [r7, #24]
 8004f7c:	f7ff fe1c 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f383 8811 	msr	BASEPRI, r3
}
 8004f86:	bf00      	nop
 8004f88:	3730      	adds	r7, #48	@ 0x30
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	200143b0 	.word	0x200143b0

08004f94 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08c      	sub	sp, #48	@ 0x30
 8004f98:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f9a:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa4:	f04f 0120 	mov.w	r1, #32
 8004fa8:	f381 8811 	msr	BASEPRI, r1
 8004fac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004fae:	4b53      	ldr	r3, [pc, #332]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	220a      	movs	r2, #10
 8004fb4:	4952      	ldr	r1, [pc, #328]	@ (8005100 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb f90a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004fc2:	200a      	movs	r0, #10
 8004fc4:	f7ff ff32 	bl	8004e2c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fcc:	f04f 0120 	mov.w	r1, #32
 8004fd0:	f381 8811 	msr	BASEPRI, r1
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	484b      	ldr	r0, [pc, #300]	@ (8005104 <SEGGER_SYSVIEW_Start+0x170>)
 8004fd8:	f7ff fcff 	bl	80049da <_PreparePacket>
 8004fdc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe6:	4b45      	ldr	r3, [pc, #276]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fec:	e00b      	b.n	8005006 <SEGGER_SYSVIEW_Start+0x72>
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff4:	1c59      	adds	r1, r3, #1
 8004ff6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ff8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	09db      	lsrs	r3, r3, #7
 8005004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005008:	2b7f      	cmp	r3, #127	@ 0x7f
 800500a:	d8f0      	bhi.n	8004fee <SEGGER_SYSVIEW_Start+0x5a>
 800500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005020:	4b36      	ldr	r3, [pc, #216]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	e00b      	b.n	8005040 <SEGGER_SYSVIEW_Start+0xac>
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	1c59      	adds	r1, r3, #1
 8005030:	6279      	str	r1, [r7, #36]	@ 0x24
 8005032:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	09db      	lsrs	r3, r3, #7
 800503e:	623b      	str	r3, [r7, #32]
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	2b7f      	cmp	r3, #127	@ 0x7f
 8005044:	d8f0      	bhi.n	8005028 <SEGGER_SYSVIEW_Start+0x94>
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	627a      	str	r2, [r7, #36]	@ 0x24
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e00b      	b.n	800507a <SEGGER_SYSVIEW_Start+0xe6>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	1c59      	adds	r1, r3, #1
 800506a:	61f9      	str	r1, [r7, #28]
 800506c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	09db      	lsrs	r3, r3, #7
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b7f      	cmp	r3, #127	@ 0x7f
 800507e:	d8f0      	bhi.n	8005062 <SEGGER_SYSVIEW_Start+0xce>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	61fa      	str	r2, [r7, #28]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e00b      	b.n	80050b2 <SEGGER_SYSVIEW_Start+0x11e>
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1c59      	adds	r1, r3, #1
 80050a2:	6179      	str	r1, [r7, #20]
 80050a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	09db      	lsrs	r3, r3, #7
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050b6:	d8f0      	bhi.n	800509a <SEGGER_SYSVIEW_Start+0x106>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	617a      	str	r2, [r7, #20]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050c8:	2218      	movs	r2, #24
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fd73 	bl	8004bb8 <_SendPacket>
      RECORD_END();
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050d8:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <SEGGER_SYSVIEW_Start+0x168>)
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050e6:	f000 f9eb 	bl	80054c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050ea:	f000 f9b1 	bl	8005450 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050ee:	f000 fc13 	bl	8005918 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050f2:	bf00      	nop
 80050f4:	3730      	adds	r7, #48	@ 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20014380 	.word	0x20014380
 8005100:	08005c6c 	.word	0x08005c6c
 8005104:	200143b0 	.word	0x200143b0

08005108 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800510e:	f3ef 8311 	mrs	r3, BASEPRI
 8005112:	f04f 0120 	mov.w	r1, #32
 8005116:	f381 8811 	msr	BASEPRI, r1
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	480b      	ldr	r0, [pc, #44]	@ (800514c <SEGGER_SYSVIEW_Stop+0x44>)
 800511e:	f7ff fc5c 	bl	80049da <_PreparePacket>
 8005122:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <SEGGER_SYSVIEW_Stop+0x48>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800512c:	220b      	movs	r2, #11
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6838      	ldr	r0, [r7, #0]
 8005132:	f7ff fd41 	bl	8004bb8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <SEGGER_SYSVIEW_Stop+0x48>)
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f383 8811 	msr	BASEPRI, r3
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200143b0 	.word	0x200143b0
 8005150:	20014380 	.word	0x20014380

08005154 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	@ 0x30
 8005158:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800515a:	f3ef 8311 	mrs	r3, BASEPRI
 800515e:	f04f 0120 	mov.w	r1, #32
 8005162:	f381 8811 	msr	BASEPRI, r1
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	4845      	ldr	r0, [pc, #276]	@ (8005280 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800516a:	f7ff fc36 	bl	80049da <_PreparePacket>
 800516e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005178:	4b42      	ldr	r3, [pc, #264]	@ (8005284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800517e:	e00b      	b.n	8005198 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	b2da      	uxtb	r2, r3
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800518a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	2b7f      	cmp	r3, #127	@ 0x7f
 800519c:	d8f0      	bhi.n	8005180 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b2:	4b34      	ldr	r3, [pc, #208]	@ (8005284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	e00b      	b.n	80051d2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	1c59      	adds	r1, r3, #1
 80051c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80051c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	09db      	lsrs	r3, r3, #7
 80051d0:	623b      	str	r3, [r7, #32]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d6:	d8f0      	bhi.n	80051ba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e00b      	b.n	800520c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	1c59      	adds	r1, r3, #1
 80051fc:	61f9      	str	r1, [r7, #28]
 80051fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	09db      	lsrs	r3, r3, #7
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005210:	d8f0      	bhi.n	80051f4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	61fa      	str	r2, [r7, #28]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	e00b      	b.n	8005244 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	6179      	str	r1, [r7, #20]
 8005236:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	09db      	lsrs	r3, r3, #7
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b7f      	cmp	r3, #127	@ 0x7f
 8005248:	d8f0      	bhi.n	800522c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	617a      	str	r2, [r7, #20]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800525a:	2218      	movs	r2, #24
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68b8      	ldr	r0, [r7, #8]
 8005260:	f7ff fcaa 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005272:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	4798      	blx	r3
  }
}
 8005278:	bf00      	nop
 800527a:	3730      	adds	r7, #48	@ 0x30
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200143b0 	.word	0x200143b0
 8005284:	20014380 	.word	0x20014380

08005288 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b092      	sub	sp, #72	@ 0x48
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005290:	f3ef 8311 	mrs	r3, BASEPRI
 8005294:	f04f 0120 	mov.w	r1, #32
 8005298:	f381 8811 	msr	BASEPRI, r1
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	486a      	ldr	r0, [pc, #424]	@ (8005448 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80052a0:	f7ff fb9b 	bl	80049da <_PreparePacket>
 80052a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b66      	ldr	r3, [pc, #408]	@ (800544c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ba:	e00b      	b.n	80052d4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80052bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	6479      	str	r1, [r7, #68]	@ 0x44
 80052c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	647a      	str	r2, [r7, #68]	@ 0x44
 80052e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052f4:	e00b      	b.n	800530e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005300:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	09db      	lsrs	r3, r3, #7
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	2b7f      	cmp	r3, #127	@ 0x7f
 8005312:	d8f0      	bhi.n	80052f6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800531a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005322:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	4619      	mov	r1, r3
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff fb07 	bl	8004940 <_EncodeStr>
 8005332:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005334:	2209      	movs	r2, #9
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	6938      	ldr	r0, [r7, #16]
 800533a:	f7ff fc3d 	bl	8004bb8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b40      	ldr	r3, [pc, #256]	@ (800544c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	633b      	str	r3, [r7, #48]	@ 0x30
 8005352:	e00b      	b.n	800536c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	b2da      	uxtb	r2, r3
 8005358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	6379      	str	r1, [r7, #52]	@ 0x34
 800535e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	09db      	lsrs	r3, r3, #7
 800536a:	633b      	str	r3, [r7, #48]	@ 0x30
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005370:	d8f0      	bhi.n	8005354 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	637a      	str	r2, [r7, #52]	@ 0x34
 8005378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800538c:	e00b      	b.n	80053a6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	b2da      	uxtb	r2, r3
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005398:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	09db      	lsrs	r3, r3, #7
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053aa:	d8f0      	bhi.n	800538e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	e00b      	b.n	80053e0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80053d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	09db      	lsrs	r3, r3, #7
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e4:	d8f0      	bhi.n	80053c8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e00b      	b.n	8005418 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	1c59      	adds	r1, r3, #1
 8005408:	61f9      	str	r1, [r7, #28]
 800540a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	09db      	lsrs	r3, r3, #7
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b7f      	cmp	r3, #127	@ 0x7f
 800541c:	d8f0      	bhi.n	8005400 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	61fa      	str	r2, [r7, #28]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800542e:	2215      	movs	r2, #21
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	6938      	ldr	r0, [r7, #16]
 8005434:	f7ff fbc0 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f383 8811 	msr	BASEPRI, r3
}
 800543e:	bf00      	nop
 8005440:	3748      	adds	r7, #72	@ 0x48
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200143b0 	.word	0x200143b0
 800544c:	20014380 	.word	0x20014380

08005450 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005454:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800545c:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005466:	4b03      	ldr	r3, [pc, #12]	@ (8005474 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4798      	blx	r3
  }
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20014380 	.word	0x20014380

08005478 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005480:	f3ef 8311 	mrs	r3, BASEPRI
 8005484:	f04f 0120 	mov.w	r1, #32
 8005488:	f381 8811 	msr	BASEPRI, r1
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	480b      	ldr	r0, [pc, #44]	@ (80054bc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005490:	f7ff faa3 	bl	80049da <_PreparePacket>
 8005494:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005496:	2280      	movs	r2, #128	@ 0x80
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f7ff fa50 	bl	8004940 <_EncodeStr>
 80054a0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80054a2:	220e      	movs	r2, #14
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	6938      	ldr	r0, [r7, #16]
 80054a8:	f7ff fb86 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f383 8811 	msr	BASEPRI, r3
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200143b0 	.word	0x200143b0

080054c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054c6:	4b15      	ldr	r3, [pc, #84]	@ (800551c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01a      	beq.n	8005504 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054ce:	4b13      	ldr	r3, [pc, #76]	@ (800551c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054d8:	4b10      	ldr	r3, [pc, #64]	@ (800551c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4798      	blx	r3
 80054e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054e4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	000a      	movs	r2, r1
 80054f4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054f6:	4613      	mov	r3, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	4621      	mov	r1, r4
 80054fc:	200d      	movs	r0, #13
 80054fe:	f7ff fcef 	bl	8004ee0 <SEGGER_SYSVIEW_RecordU32x2>
 8005502:	e006      	b.n	8005512 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	200c      	movs	r0, #12
 800550c:	f7ff fcac 	bl	8004e68 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	bd90      	pop	{r4, r7, pc}
 800551a:	bf00      	nop
 800551c:	20014380 	.word	0x20014380
 8005520:	e0001004 	.word	0xe0001004

08005524 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800552a:	f3ef 8311 	mrs	r3, BASEPRI
 800552e:	f04f 0120 	mov.w	r1, #32
 8005532:	f381 8811 	msr	BASEPRI, r1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	4819      	ldr	r0, [pc, #100]	@ (80055a0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800553a:	f7ff fa4e 	bl	80049da <_PreparePacket>
 800553e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005544:	4b17      	ldr	r3, [pc, #92]	@ (80055a4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e00b      	b.n	8005570 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	6179      	str	r1, [r7, #20]
 8005562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	09db      	lsrs	r3, r3, #7
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b7f      	cmp	r3, #127	@ 0x7f
 8005574:	d8f0      	bhi.n	8005558 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	617a      	str	r2, [r7, #20]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005586:	2202      	movs	r2, #2
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	68b8      	ldr	r0, [r7, #8]
 800558c:	f7ff fb14 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f383 8811 	msr	BASEPRI, r3
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200143b0 	.word	0x200143b0
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055ae:	f3ef 8311 	mrs	r3, BASEPRI
 80055b2:	f04f 0120 	mov.w	r1, #32
 80055b6:	f381 8811 	msr	BASEPRI, r1
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	4807      	ldr	r0, [pc, #28]	@ (80055dc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055be:	f7ff fa0c 	bl	80049da <_PreparePacket>
 80055c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055c4:	2203      	movs	r2, #3
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6838      	ldr	r0, [r7, #0]
 80055ca:	f7ff faf5 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f383 8811 	msr	BASEPRI, r3
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200143b0 	.word	0x200143b0

080055e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055e6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ea:	f04f 0120 	mov.w	r1, #32
 80055ee:	f381 8811 	msr	BASEPRI, r1
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	4807      	ldr	r0, [pc, #28]	@ (8005614 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055f6:	f7ff f9f0 	bl	80049da <_PreparePacket>
 80055fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055fc:	2212      	movs	r2, #18
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6838      	ldr	r0, [r7, #0]
 8005602:	f7ff fad9 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f383 8811 	msr	BASEPRI, r3
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	200143b0 	.word	0x200143b0

08005618 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800561e:	f3ef 8311 	mrs	r3, BASEPRI
 8005622:	f04f 0120 	mov.w	r1, #32
 8005626:	f381 8811 	msr	BASEPRI, r1
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	4807      	ldr	r0, [pc, #28]	@ (800564c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800562e:	f7ff f9d4 	bl	80049da <_PreparePacket>
 8005632:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005634:	2211      	movs	r2, #17
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6838      	ldr	r0, [r7, #0]
 800563a:	f7ff fabd 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f383 8811 	msr	BASEPRI, r3
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200143b0 	.word	0x200143b0

08005650 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005658:	f3ef 8311 	mrs	r3, BASEPRI
 800565c:	f04f 0120 	mov.w	r1, #32
 8005660:	f381 8811 	msr	BASEPRI, r1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	4819      	ldr	r0, [pc, #100]	@ (80056cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005668:	f7ff f9b7 	bl	80049da <_PreparePacket>
 800566c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005672:	4b17      	ldr	r3, [pc, #92]	@ (80056d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	e00b      	b.n	800569e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	61f9      	str	r1, [r7, #28]
 8005690:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	09db      	lsrs	r3, r3, #7
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a2:	d8f0      	bhi.n	8005686 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056b4:	2208      	movs	r2, #8
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	6938      	ldr	r0, [r7, #16]
 80056ba:	f7ff fa7d 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f383 8811 	msr	BASEPRI, r3
}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200143b0 	.word	0x200143b0
 80056d0:	20014380 	.word	0x20014380

080056d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056dc:	f3ef 8311 	mrs	r3, BASEPRI
 80056e0:	f04f 0120 	mov.w	r1, #32
 80056e4:	f381 8811 	msr	BASEPRI, r1
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	4819      	ldr	r0, [pc, #100]	@ (8005750 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056ec:	f7ff f975 	bl	80049da <_PreparePacket>
 80056f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056f6:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	e00b      	b.n	8005722 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	1c59      	adds	r1, r3, #1
 8005712:	61f9      	str	r1, [r7, #28]
 8005714:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	09db      	lsrs	r3, r3, #7
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b7f      	cmp	r3, #127	@ 0x7f
 8005726:	d8f0      	bhi.n	800570a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	61fa      	str	r2, [r7, #28]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005738:	2204      	movs	r2, #4
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6938      	ldr	r0, [r7, #16]
 800573e:	f7ff fa3b 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f383 8811 	msr	BASEPRI, r3
}
 8005748:	bf00      	nop
 800574a:	3720      	adds	r7, #32
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200143b0 	.word	0x200143b0
 8005754:	20014380 	.word	0x20014380

08005758 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005760:	f3ef 8311 	mrs	r3, BASEPRI
 8005764:	f04f 0120 	mov.w	r1, #32
 8005768:	f381 8811 	msr	BASEPRI, r1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	4819      	ldr	r0, [pc, #100]	@ (80057d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005770:	f7ff f933 	bl	80049da <_PreparePacket>
 8005774:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800577a:	4b17      	ldr	r3, [pc, #92]	@ (80057d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e00b      	b.n	80057a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	61f9      	str	r1, [r7, #28]
 8005798:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	09db      	lsrs	r3, r3, #7
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057aa:	d8f0      	bhi.n	800578e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	61fa      	str	r2, [r7, #28]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057bc:	2206      	movs	r2, #6
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6938      	ldr	r0, [r7, #16]
 80057c2:	f7ff f9f9 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f383 8811 	msr	BASEPRI, r3
}
 80057cc:	bf00      	nop
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200143b0 	.word	0x200143b0
 80057d8:	20014380 	.word	0x20014380

080057dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	@ 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80057e6:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d06d      	beq.n	80058ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80057ee:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80057f4:	2300      	movs	r3, #0
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f8:	e008      	b.n	800580c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80057fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	3301      	adds	r3, #1
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005810:	429a      	cmp	r2, r3
 8005812:	d3f2      	bcc.n	80057fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8005814:	e000      	b.n	8005818 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005816:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d055      	beq.n	80058ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800581e:	f3ef 8311 	mrs	r3, BASEPRI
 8005822:	f04f 0120 	mov.w	r1, #32
 8005826:	f381 8811 	msr	BASEPRI, r1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	482a      	ldr	r0, [pc, #168]	@ (80058d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800582e:	f7ff f8d4 	bl	80049da <_PreparePacket>
 8005832:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	623b      	str	r3, [r7, #32]
 8005840:	e00b      	b.n	800585a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	1c59      	adds	r1, r3, #1
 800584a:	6279      	str	r1, [r7, #36]	@ 0x24
 800584c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	09db      	lsrs	r3, r3, #7
 8005858:	623b      	str	r3, [r7, #32]
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	2b7f      	cmp	r3, #127	@ 0x7f
 800585e:	d8f0      	bhi.n	8005842 <SEGGER_SYSVIEW_SendModule+0x66>
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	627a      	str	r2, [r7, #36]	@ 0x24
 8005866:	6a3a      	ldr	r2, [r7, #32]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e00b      	b.n	8005894 <SEGGER_SYSVIEW_SendModule+0xb8>
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	61f9      	str	r1, [r7, #28]
 8005886:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	09db      	lsrs	r3, r3, #7
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b7f      	cmp	r3, #127	@ 0x7f
 8005898:	d8f0      	bhi.n	800587c <SEGGER_SYSVIEW_SendModule+0xa0>
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	61fa      	str	r2, [r7, #28]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2280      	movs	r2, #128	@ 0x80
 80058b0:	4619      	mov	r1, r3
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff f844 	bl	8004940 <_EncodeStr>
 80058b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80058ba:	2216      	movs	r2, #22
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	6938      	ldr	r0, [r7, #16]
 80058c0:	f7ff f97a 	bl	8004bb8 <_SendPacket>
      RECORD_END();
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80058ca:	bf00      	nop
 80058cc:	3730      	adds	r7, #48	@ 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	200143a8 	.word	0x200143a8
 80058d8:	200143b0 	.word	0x200143b0

080058dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80058ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005914 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f2      	bne.n	80058f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200143a8 	.word	0x200143a8

08005918 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800591e:	f3ef 8311 	mrs	r3, BASEPRI
 8005922:	f04f 0120 	mov.w	r1, #32
 8005926:	f381 8811 	msr	BASEPRI, r1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	4817      	ldr	r0, [pc, #92]	@ (800598c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800592e:	f7ff f854 	bl	80049da <_PreparePacket>
 8005932:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	e00b      	b.n	800595c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	6179      	str	r1, [r7, #20]
 800594e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	09db      	lsrs	r3, r3, #7
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005960:	d8f0      	bhi.n	8005944 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	617a      	str	r2, [r7, #20]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005972:	221b      	movs	r2, #27
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	68b8      	ldr	r0, [r7, #8]
 8005978:	f7ff f91e 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f383 8811 	msr	BASEPRI, r3
}
 8005982:	bf00      	nop
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200143b0 	.word	0x200143b0
 8005990:	200143ac 	.word	0x200143ac

08005994 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	@ 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800599c:	f3ef 8311 	mrs	r3, BASEPRI
 80059a0:	f04f 0120 	mov.w	r1, #32
 80059a4:	f381 8811 	msr	BASEPRI, r1
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	4827      	ldr	r0, [pc, #156]	@ (8005a48 <SEGGER_SYSVIEW_Warn+0xb4>)
 80059ac:	f7ff f815 	bl	80049da <_PreparePacket>
 80059b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059b2:	2280      	movs	r2, #128	@ 0x80
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	6938      	ldr	r0, [r7, #16]
 80059b8:	f7fe ffc2 	bl	8004940 <_EncodeStr>
 80059bc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c2:	2301      	movs	r3, #1
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	e00b      	b.n	80059e0 <SEGGER_SYSVIEW_Warn+0x4c>
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80059d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	09db      	lsrs	r3, r3, #7
 80059de:	623b      	str	r3, [r7, #32]
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e4:	d8f0      	bhi.n	80059c8 <SEGGER_SYSVIEW_Warn+0x34>
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e00b      	b.n	8005a18 <SEGGER_SYSVIEW_Warn+0x84>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	61f9      	str	r1, [r7, #28]
 8005a0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	09db      	lsrs	r3, r3, #7
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a1c:	d8f0      	bhi.n	8005a00 <SEGGER_SYSVIEW_Warn+0x6c>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	61fa      	str	r2, [r7, #28]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a2e:	221a      	movs	r2, #26
 8005a30:	68f9      	ldr	r1, [r7, #12]
 8005a32:	6938      	ldr	r0, [r7, #16]
 8005a34:	f7ff f8c0 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
}
 8005a3e:	bf00      	nop
 8005a40:	3728      	adds	r7, #40	@ 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	200143b0 	.word	0x200143b0

08005a4c <memcmp>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	3901      	subs	r1, #1
 8005a50:	4402      	add	r2, r0
 8005a52:	4290      	cmp	r0, r2
 8005a54:	d101      	bne.n	8005a5a <memcmp+0xe>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e005      	b.n	8005a66 <memcmp+0x1a>
 8005a5a:	7803      	ldrb	r3, [r0, #0]
 8005a5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d001      	beq.n	8005a68 <memcmp+0x1c>
 8005a64:	1b18      	subs	r0, r3, r4
 8005a66:	bd10      	pop	{r4, pc}
 8005a68:	3001      	adds	r0, #1
 8005a6a:	e7f2      	b.n	8005a52 <memcmp+0x6>

08005a6c <memset>:
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d100      	bne.n	8005a76 <memset+0xa>
 8005a74:	4770      	bx	lr
 8005a76:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7a:	e7f9      	b.n	8005a70 <memset+0x4>

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f000 f826 	bl	8005ae0 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	08005c80 	.word	0x08005c80
 8005ab8:	08005c80 	.word	0x08005c80
 8005abc:	08005c80 	.word	0x08005c80
 8005ac0:	08005c84 	.word	0x08005c84

08005ac4 <memcpy>:
 8005ac4:	440a      	add	r2, r1
 8005ac6:	4291      	cmp	r1, r2
 8005ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005acc:	d100      	bne.n	8005ad0 <memcpy+0xc>
 8005ace:	4770      	bx	lr
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ada:	4291      	cmp	r1, r2
 8005adc:	d1f9      	bne.n	8005ad2 <memcpy+0xe>
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <_init>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr

08005aec <_fini>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr
