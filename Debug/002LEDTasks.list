
002LEDTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08006b94  08006b94  00007b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc0  08006dc0  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006dc0  08006dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc8  08006dc8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc8  08006dc8  00007dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dcc  08006dcc  00007dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006dd0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00014564  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145d0  200145d0  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fd1  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c55  00000000  00000000  0001a06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0001ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db2  00000000  00000000  0001dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024056  00000000  00000000  0001ec5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d51  00000000  00000000  00042cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8e53  00000000  00000000  00056a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f854  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000523c  00000000  00000000  0012f898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  00134ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b7c 	.word	0x08006b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006b7c 	.word	0x08006b7c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eac 	.word	0x20012eac
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b092      	sub	sp, #72	@ 0x48
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fd0f 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f8f3 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f95b 	bl	8000904 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
#if (SEGGER_UART_REC == 1)
  SEGGER_UART_init(500000);
#endif
  /*Enable the CYCCNT*/
  DWT_CTRL|= (1<< 0);
 800064e:	4b65      	ldr	r3, [pc, #404]	@ (80007e4 <main+0x1a8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a64      	ldr	r2, [pc, #400]	@ (80007e4 <main+0x1a8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800065a:	f003 f9e3 	bl	8003a24 <SEGGER_SYSVIEW_Conf>

#if (SEGGER_UART_REC == 0)
  SEGGER_SYSVIEW_Start();
 800065e:	f004 fce1 	bl	8005024 <SEGGER_SYSVIEW_Start>
#endif
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World From Task-1", 2, &task1_handle);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	4b5e      	ldr	r3, [pc, #376]	@ (80007e8 <main+0x1ac>)
 800066e:	22c8      	movs	r2, #200	@ 0xc8
 8000670:	495e      	ldr	r1, [pc, #376]	@ (80007ec <main+0x1b0>)
 8000672:	485f      	ldr	r0, [pc, #380]	@ (80007f0 <main+0x1b4>)
 8000674:	f001 ffd5 	bl	8002622 <xTaskCreate>
 8000678:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 800067a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800067c:	2b01      	cmp	r3, #1
 800067e:	d00b      	beq.n	8000698 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000684:	f383 8811 	msr	BASEPRI, r3
 8000688:	f3bf 8f6f 	isb	sy
 800068c:	f3bf 8f4f 	dsb	sy
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World From Task-2", 2, &task2_handle);
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4b54      	ldr	r3, [pc, #336]	@ (80007f4 <main+0x1b8>)
 80006a4:	22c8      	movs	r2, #200	@ 0xc8
 80006a6:	4954      	ldr	r1, [pc, #336]	@ (80007f8 <main+0x1bc>)
 80006a8:	4854      	ldr	r0, [pc, #336]	@ (80007fc <main+0x1c0>)
 80006aa:	f001 ffba 	bl	8002622 <xTaskCreate>
 80006ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 80006b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d00b      	beq.n	80006ce <main+0x92>
        __asm volatile
 80006b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ba:	f383 8811 	msr	BASEPRI, r3
 80006be:	f3bf 8f6f 	isb	sy
 80006c2:	f3bf 8f4f 	dsb	sy
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
    }
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	e7fd      	b.n	80006ca <main+0x8e>

  status = xTaskCreate(taskLED_Green_handler, "Task-LED", 200, "Green_LED_Task Activation", 2, &taskLED_Green_handle);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2302      	movs	r3, #2
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <main+0x1c4>)
 80006da:	22c8      	movs	r2, #200	@ 0xc8
 80006dc:	4949      	ldr	r1, [pc, #292]	@ (8000804 <main+0x1c8>)
 80006de:	484a      	ldr	r0, [pc, #296]	@ (8000808 <main+0x1cc>)
 80006e0:	f001 ff9f 	bl	8002622 <xTaskCreate>
 80006e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 80006e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00b      	beq.n	8000704 <main+0xc8>
        __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	633b      	str	r3, [r7, #48]	@ 0x30
    }
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <main+0xc4>

  status = xTaskCreate(taskLED_Blue_handler, "Task-LED", 200, "Blue_LED_Task Activation", 2, &taskLED_Blue_handle);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2302      	movs	r3, #2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	4b3f      	ldr	r3, [pc, #252]	@ (800080c <main+0x1d0>)
 8000710:	22c8      	movs	r2, #200	@ 0xc8
 8000712:	493c      	ldr	r1, [pc, #240]	@ (8000804 <main+0x1c8>)
 8000714:	483e      	ldr	r0, [pc, #248]	@ (8000810 <main+0x1d4>)
 8000716:	f001 ff84 	bl	8002622 <xTaskCreate>
 800071a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 800071c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800071e:	2b01      	cmp	r3, #1
 8000720:	d00b      	beq.n	800073a <main+0xfe>
        __asm volatile
 8000722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000726:	f383 8811 	msr	BASEPRI, r3
 800072a:	f3bf 8f6f 	isb	sy
 800072e:	f3bf 8f4f 	dsb	sy
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	e7fd      	b.n	8000736 <main+0xfa>

  status = xTaskCreate(taskLED_Red_handler, "Task-LED", 200, "Red_LED_Task Activation", 2, &taskLED_Red_handle);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	4b33      	ldr	r3, [pc, #204]	@ (8000814 <main+0x1d8>)
 8000746:	22c8      	movs	r2, #200	@ 0xc8
 8000748:	492e      	ldr	r1, [pc, #184]	@ (8000804 <main+0x1c8>)
 800074a:	4833      	ldr	r0, [pc, #204]	@ (8000818 <main+0x1dc>)
 800074c:	f001 ff69 	bl	8002622 <xTaskCreate>
 8000750:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 8000752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000754:	2b01      	cmp	r3, #1
 8000756:	d00b      	beq.n	8000770 <main+0x134>
        __asm volatile
 8000758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800075c:	f383 8811 	msr	BASEPRI, r3
 8000760:	f3bf 8f6f 	isb	sy
 8000764:	f3bf 8f4f 	dsb	sy
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x130>

  status = xTaskCreate(taskLED_Yellow_handler, "Task-LED", 200, "Yellow_LED_Task Activation", 2, &taskLED_Yellow_handle);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2302      	movs	r3, #2
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <main+0x1e0>)
 800077c:	22c8      	movs	r2, #200	@ 0xc8
 800077e:	4921      	ldr	r1, [pc, #132]	@ (8000804 <main+0x1c8>)
 8000780:	4827      	ldr	r0, [pc, #156]	@ (8000820 <main+0x1e4>)
 8000782:	f001 ff4e 	bl	8002622 <xTaskCreate>
 8000786:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 8000788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800078a:	2b01      	cmp	r3, #1
 800078c:	d00b      	beq.n	80007a6 <main+0x16a>
        __asm volatile
 800078e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000792:	f383 8811 	msr	BASEPRI, r3
 8000796:	f3bf 8f6f 	isb	sy
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <main+0x166>

  status = xTaskCreate(taskUser_Btn_handler, "Task-Btn", 200, "User_Btn_Task Activation", 2, &taskUser_Btn_handle);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2302      	movs	r3, #2
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <main+0x1e8>)
 80007b0:	22c8      	movs	r2, #200	@ 0xc8
 80007b2:	491d      	ldr	r1, [pc, #116]	@ (8000828 <main+0x1ec>)
 80007b4:	481d      	ldr	r0, [pc, #116]	@ (800082c <main+0x1f0>)
 80007b6:	f001 ff34 	bl	8002622 <xTaskCreate>
 80007ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  configASSERT(status == pdPASS);
 80007bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d00b      	beq.n	80007da <main+0x19e>
        __asm volatile
 80007c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c6:	f383 8811 	msr	BASEPRI, r3
 80007ca:	f3bf 8f6f 	isb	sy
 80007ce:	f3bf 8f4f 	dsb	sy
 80007d2:	623b      	str	r3, [r7, #32]
    }
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	e7fd      	b.n	80007d6 <main+0x19a>
  /*Start the scheduler*/
  vTaskStartScheduler();
 80007da:	f002 f8ad 	bl	8002938 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007de:	bf00      	nop
 80007e0:	e7fd      	b.n	80007de <main+0x1a2>
 80007e2:	bf00      	nop
 80007e4:	e0001000 	.word	0xe0001000
 80007e8:	08006b94 	.word	0x08006b94
 80007ec:	08006bac 	.word	0x08006bac
 80007f0:	08000bc1 	.word	0x08000bc1
 80007f4:	08006bb4 	.word	0x08006bb4
 80007f8:	08006bcc 	.word	0x08006bcc
 80007fc:	08000be9 	.word	0x08000be9
 8000800:	08006bd4 	.word	0x08006bd4
 8000804:	08006bf0 	.word	0x08006bf0
 8000808:	08000c11 	.word	0x08000c11
 800080c:	08006bfc 	.word	0x08006bfc
 8000810:	08000c35 	.word	0x08000c35
 8000814:	08006c18 	.word	0x08006c18
 8000818:	08000c59 	.word	0x08000c59
 800081c:	08006c30 	.word	0x08006c30
 8000820:	08000c7d 	.word	0x08000c7d
 8000824:	08006c4c 	.word	0x08006c4c
 8000828:	08006c68 	.word	0x08006c68
 800082c:	08000c89 	.word	0x08000c89

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	@ 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 fbb0 	bl	8005fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a27      	ldr	r2, [pc, #156]	@ (80008fc <SystemClock_Config+0xcc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xd0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a0:	2308      	movs	r3, #8
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008a4:	2332      	movs	r3, #50	@ 0x32
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 ff05 	bl	80016c4 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c0:	f000 fa72 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f966 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ee:	f000 fa5b 	bl	8000da8 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	@ 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4aa1      	ldr	r2, [pc, #644]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b9b      	ldr	r3, [pc, #620]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b98      	ldr	r3, [pc, #608]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b94      	ldr	r3, [pc, #592]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a93      	ldr	r2, [pc, #588]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b91      	ldr	r3, [pc, #580]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b8d      	ldr	r3, [pc, #564]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a8c      	ldr	r2, [pc, #560]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b86      	ldr	r3, [pc, #536]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a85      	ldr	r2, [pc, #532]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b83      	ldr	r3, [pc, #524]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b7f      	ldr	r3, [pc, #508]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a7e      	ldr	r2, [pc, #504]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ba8 <MX_GPIO_Init+0x2a4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	4879      	ldr	r0, [pc, #484]	@ (8000bac <MX_GPIO_Init+0x2a8>)
 80009c8:	f000 fe48 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	4877      	ldr	r0, [pc, #476]	@ (8000bb0 <MX_GPIO_Init+0x2ac>)
 80009d2:	f000 fe43 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d6:	2200      	movs	r2, #0
 80009d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009dc:	4875      	ldr	r0, [pc, #468]	@ (8000bb4 <MX_GPIO_Init+0x2b0>)
 80009de:	f000 fe3d 	bl	800165c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e2:	2308      	movs	r3, #8
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	486c      	ldr	r0, [pc, #432]	@ (8000bac <MX_GPIO_Init+0x2a8>)
 80009fa:	f000 fc7b 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4866      	ldr	r0, [pc, #408]	@ (8000bb0 <MX_GPIO_Init+0x2ac>)
 8000a16:	f000 fc6d 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	485e      	ldr	r0, [pc, #376]	@ (8000bb0 <MX_GPIO_Init+0x2ac>)
 8000a36:	f000 fc5d 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	485a      	ldr	r0, [pc, #360]	@ (8000bb8 <MX_GPIO_Init+0x2b4>)
 8000a50:	f000 fc50 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a54:	2310      	movs	r3, #16
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a64:	2306      	movs	r3, #6
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4852      	ldr	r0, [pc, #328]	@ (8000bb8 <MX_GPIO_Init+0x2b4>)
 8000a70:	f000 fc40 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a74:	23e0      	movs	r3, #224	@ 0xe0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a84:	2305      	movs	r3, #5
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	484a      	ldr	r0, [pc, #296]	@ (8000bb8 <MX_GPIO_Init+0x2b4>)
 8000a90:	f000 fc30 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a94:	2304      	movs	r3, #4
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4845      	ldr	r0, [pc, #276]	@ (8000bbc <MX_GPIO_Init+0x2b8>)
 8000aa8:	f000 fc24 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483c      	ldr	r0, [pc, #240]	@ (8000bbc <MX_GPIO_Init+0x2b8>)
 8000aca:	f000 fc13 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ace:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ad2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4833      	ldr	r0, [pc, #204]	@ (8000bb4 <MX_GPIO_Init+0x2b0>)
 8000ae8:	f000 fc04 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aec:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000afe:	2306      	movs	r3, #6
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4829      	ldr	r0, [pc, #164]	@ (8000bb0 <MX_GPIO_Init+0x2ac>)
 8000b0a:	f000 fbf3 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4825      	ldr	r0, [pc, #148]	@ (8000bb8 <MX_GPIO_Init+0x2b4>)
 8000b24:	f000 fbe6 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b28:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	481c      	ldr	r0, [pc, #112]	@ (8000bb8 <MX_GPIO_Init+0x2b4>)
 8000b46:	f000 fbd5 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4815      	ldr	r0, [pc, #84]	@ (8000bb4 <MX_GPIO_Init+0x2b0>)
 8000b5e:	f000 fbc9 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480f      	ldr	r0, [pc, #60]	@ (8000bbc <MX_GPIO_Init+0x2b8>)
 8000b80:	f000 fbb8 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b88:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_GPIO_Init+0x2a8>)
 8000b9a:	f000 fbab 	bl	80012f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	@ 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09c      	sub	sp, #112	@ 0x70
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000bc8:	f107 000c 	add.w	r0, r7, #12
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <task1_handler+0x24>)
 8000bd0:	2164      	movs	r1, #100	@ 0x64
 8000bd2:	f005 f8c9 	bl	8005d68 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 ff22 	bl	8005a24 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000be0:	bf00      	nop
 8000be2:	e7f1      	b.n	8000bc8 <task1_handler+0x8>
 8000be4:	08006c74 	.word	0x08006c74

08000be8 <task2_handler>:
		//taskYIELD();
	}
}

static void task2_handler(void* parameters)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09c      	sub	sp, #112	@ 0x70
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000bf0:	f107 000c 	add.w	r0, r7, #12
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <task2_handler+0x24>)
 8000bf8:	2164      	movs	r1, #100	@ 0x64
 8000bfa:	f005 f8b5 	bl	8005d68 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 ff0e 	bl	8005a24 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000c08:	bf00      	nop
 8000c0a:	e7f1      	b.n	8000bf0 <task2_handler+0x8>
 8000c0c:	08006c74 	.word	0x08006c74

08000c10 <taskLED_Green_handler>:
		//taskYIELD();
	}
}

static void taskLED_Green_handler(void* parameters)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <taskLED_Green_handler+0x20>)
 8000c1e:	f000 fd36 	bl	800168e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c26:	f000 fa5f 	bl	80010e8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c2a:	bf00      	nop
 8000c2c:	e7f4      	b.n	8000c18 <taskLED_Green_handler+0x8>
 8000c2e:	bf00      	nop
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <taskLED_Blue_handler>:
	}
}

static void taskLED_Blue_handler(void* parameters)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <taskLED_Blue_handler+0x20>)
 8000c42:	f000 fd24 	bl	800168e <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000c46:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000c4a:	f000 fa4d 	bl	80010e8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c4e:	bf00      	nop
 8000c50:	e7f4      	b.n	8000c3c <taskLED_Blue_handler+0x8>
 8000c52:	bf00      	nop
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <taskLED_Red_handler>:
	}
}

static void taskLED_Red_handler(void* parameters)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <taskLED_Red_handler+0x20>)
 8000c66:	f000 fd12 	bl	800168e <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000c6a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000c6e:	f000 fa3b 	bl	80010e8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c72:	bf00      	nop
 8000c74:	e7f4      	b.n	8000c60 <taskLED_Red_handler+0x8>
 8000c76:	bf00      	nop
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <taskLED_Yellow_handler>:
	}
}

static void taskLED_Yellow_handler(void* parameters)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	while(1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <taskLED_Yellow_handler+0x8>

08000c88 <taskUser_Btn_handler>:
//		taskYIELD();
	}
}

static void taskUser_Btn_handler(void* parameters)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(User_Btn_Cnt >9){
 8000c90:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	d903      	bls.n	8000ca0 <taskUser_Btn_handler+0x18>
			printf("%s\n", (char*)"PUSHED");
 8000c98:	4831      	ldr	r0, [pc, #196]	@ (8000d60 <taskUser_Btn_handler+0xd8>)
 8000c9a:	f005 f85d 	bl	8005d58 <puts>
 8000c9e:	e002      	b.n	8000ca6 <taskUser_Btn_handler+0x1e>
		}
		else{
			printf("%s\n", (char*)"OFF");
 8000ca0:	4830      	ldr	r0, [pc, #192]	@ (8000d64 <taskUser_Btn_handler+0xdc>)
 8000ca2:	f005 f859 	bl	8005d58 <puts>
		}

		User_Btn_Sts = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	482f      	ldr	r0, [pc, #188]	@ (8000d68 <taskUser_Btn_handler+0xe0>)
 8000caa:	f000 fcbf 	bl	800162c <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <taskUser_Btn_handler+0xe4>)
 8000cb4:	701a      	strb	r2, [r3, #0]
		if( User_Btn_Sts == GPIO_PIN_SET){
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <taskUser_Btn_handler+0xe4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d10c      	bne.n	8000cd8 <taskUser_Btn_handler+0x50>
			if(User_Btn_Cnt>=10)
 8000cbe:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b09      	cmp	r3, #9
 8000cc4:	d902      	bls.n	8000ccc <taskUser_Btn_handler+0x44>
			{
				User_Btn_Cnt = 10;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	601a      	str	r2, [r3, #0]
			}
			User_Btn_Cnt = User_Btn_Cnt+1u;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e00f      	b.n	8000cf8 <taskUser_Btn_handler+0x70>
		}
		else if( User_Btn_Sts == GPIO_PIN_RESET){
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <taskUser_Btn_handler+0xe4>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10b      	bne.n	8000cf8 <taskUser_Btn_handler+0x70>
			if(User_Btn_Cnt<=1)
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d802      	bhi.n	8000cee <taskUser_Btn_handler+0x66>
			{
				User_Btn_Cnt = 1;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
			}
			User_Btn_Cnt = User_Btn_Cnt-1u;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	4a19      	ldr	r2, [pc, #100]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cf6:	6013      	str	r3, [r2, #0]
		}

		if(User_Btn_Cnt>=10)
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <taskUser_Btn_handler+0xd4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	d903      	bls.n	8000d08 <taskUser_Btn_handler+0x80>
		{
			User_Btn_Sts_Debounce = 1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <taskUser_Btn_handler+0xe8>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <taskUser_Btn_handler+0x86>
		}
		else{
			User_Btn_Sts_Debounce = 0;
 8000d08:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <taskUser_Btn_handler+0xe8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
		}

		User_Btn_Toggle_Last = User_Btn_Toggle;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <taskUser_Btn_handler+0xec>)
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <taskUser_Btn_handler+0xf0>)
 8000d14:	701a      	strb	r2, [r3, #0]
		User_Btn_Toggle = User_Btn_Sts_Debounce;
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <taskUser_Btn_handler+0xe8>)
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <taskUser_Btn_handler+0xec>)
 8000d1c:	701a      	strb	r2, [r3, #0]

		if(User_Btn_Toggle > User_Btn_Toggle_Last){
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <taskUser_Btn_handler+0xec>)
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <taskUser_Btn_handler+0xf0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d90e      	bls.n	8000d48 <taskUser_Btn_handler+0xc0>
			if(User_Btn_Clicked == 0){
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <taskUser_Btn_handler+0xf4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d103      	bne.n	8000d3a <taskUser_Btn_handler+0xb2>
				User_Btn_Clicked = 1;
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <taskUser_Btn_handler+0xf4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e006      	b.n	8000d48 <taskUser_Btn_handler+0xc0>
			}
			else if (User_Btn_Clicked ==1) {
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <taskUser_Btn_handler+0xf4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <taskUser_Btn_handler+0xc0>
				User_Btn_Clicked = 0;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <taskUser_Btn_handler+0xf4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
			}
		}
		taskYIELD();
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <taskUser_Btn_handler+0xf8>)
 8000d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	f3bf 8f6f 	isb	sy
		if(User_Btn_Cnt >9){
 8000d58:	e79a      	b.n	8000c90 <taskUser_Btn_handler+0x8>
 8000d5a:	bf00      	nop
 8000d5c:	20000088 	.word	0x20000088
 8000d60:	08006c78 	.word	0x08006c78
 8000d64:	08006c80 	.word	0x08006c80
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	2000008c 	.word	0x2000008c
 8000d70:	2000008d 	.word	0x2000008d
 8000d74:	2000008f 	.word	0x2000008f
 8000d78:	2000008e 	.word	0x2000008e
 8000d7c:	20000090 	.word	0x20000090
 8000d80:	e000ed04 	.word	0xe000ed04

08000d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d96:	f000 f987 	bl	80010a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40001000 	.word	0x40001000

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000df2:	f002 fa8b 	bl	800330c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	@ 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 0210 	add.w	r2, r7, #16
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 f8c6 	bl	8001fcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4a:	f001 f8ab 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e52:	f001 f8a7 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8000e56:	4603      	mov	r3, r0
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5e:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9b      	lsrs	r3, r3, #18
 8000e66:	3b01      	subs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xf0>)
 8000e6e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e92:	f001 f8cd 	bl	8002030 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11b      	bne.n	8000edc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea4:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000ea6:	f001 f91d 	bl	80020e4 <HAL_TIM_Base_Start_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d111      	bne.n	8000edc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eb8:	2036      	movs	r0, #54	@ 0x36
 8000eba:	f000 fa0d 	bl	80012d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d808      	bhi.n	8000ed6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2036      	movs	r0, #54	@ 0x36
 8000eca:	f000 f9e9 	bl	80012a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_InitTick+0xf4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e002      	b.n	8000edc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3738      	adds	r7, #56	@ 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	40001000 	.word	0x40001000
 8000ef8:	20000004 	.word	0x20000004

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM6_DAC_IRQHandler+0x10>)
 8000f3a:	f001 f943 	bl	80021c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000094 	.word	0x20000094

08000f48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
  }

  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f004 ffed 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fafb 	bl	800063c <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001054:	08006dd0 	.word	0x08006dd0
  ldr r2, =_sbss
 8001058:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800105c:	200145d0 	.word	0x200145d0

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f8fc 	bl	800128a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f7ff feb6 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fe8c 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	200000dc 	.word	0x200000dc

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200000dc 	.word	0x200000dc

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff4c 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b2:	f7ff ff61 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	6978      	ldr	r0, [r7, #20]
 80012be:	f7ff ffb1 	bl	8001224 <NVIC_EncodePriority>
 80012c2:	4602      	mov	r2, r0
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff80 	bl	80011d0 <__NVIC_SetPriority>
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff54 	bl	8001194 <__NVIC_EnableIRQ>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e16b      	b.n	80015e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 815a 	bne.w	80015e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	2b02      	cmp	r3, #2
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80b4 	beq.w	80015e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b60      	ldr	r3, [pc, #384]	@ (8001600 <HAL_GPIO_Init+0x30c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a5f      	ldr	r2, [pc, #380]	@ (8001600 <HAL_GPIO_Init+0x30c>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b5d      	ldr	r3, [pc, #372]	@ (8001600 <HAL_GPIO_Init+0x30c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a5b      	ldr	r2, [pc, #364]	@ (8001604 <HAL_GPIO_Init+0x310>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a52      	ldr	r2, [pc, #328]	@ (8001608 <HAL_GPIO_Init+0x314>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d02b      	beq.n	800151a <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a51      	ldr	r2, [pc, #324]	@ (800160c <HAL_GPIO_Init+0x318>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d025      	beq.n	8001516 <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a50      	ldr	r2, [pc, #320]	@ (8001610 <HAL_GPIO_Init+0x31c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01f      	beq.n	8001512 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001614 <HAL_GPIO_Init+0x320>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0x21a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001618 <HAL_GPIO_Init+0x324>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x216>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_GPIO_Init+0x328>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x212>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001620 <HAL_GPIO_Init+0x32c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x20e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001624 <HAL_GPIO_Init+0x330>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x20a>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00e      	b.n	800151c <HAL_GPIO_Init+0x228>
 80014fe:	2308      	movs	r3, #8
 8001500:	e00c      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001502:	2306      	movs	r3, #6
 8001504:	e00a      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001506:	2305      	movs	r3, #5
 8001508:	e008      	b.n	800151c <HAL_GPIO_Init+0x228>
 800150a:	2304      	movs	r3, #4
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x228>
 800150e:	2303      	movs	r3, #3
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x228>
 800151a:	2300      	movs	r3, #0
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f002 0203 	and.w	r2, r2, #3
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4093      	lsls	r3, r2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800152c:	4935      	ldr	r1, [pc, #212]	@ (8001604 <HAL_GPIO_Init+0x310>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b3b      	ldr	r3, [pc, #236]	@ (8001628 <HAL_GPIO_Init+0x334>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155e:	4a32      	ldr	r2, [pc, #200]	@ (8001628 <HAL_GPIO_Init+0x334>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <HAL_GPIO_Init+0x334>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001588:	4a27      	ldr	r2, [pc, #156]	@ (8001628 <HAL_GPIO_Init+0x334>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <HAL_GPIO_Init+0x334>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_GPIO_Init+0x334>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_GPIO_Init+0x334>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_GPIO_Init+0x334>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	f67f ae90 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	400b      	ands	r3, r1
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e267      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016e2:	4b88      	ldr	r3, [pc, #544]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b85      	ldr	r3, [pc, #532]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b82      	ldr	r3, [pc, #520]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b7e      	ldr	r3, [pc, #504]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e242      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b76      	ldr	r3, [pc, #472]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a75      	ldr	r2, [pc, #468]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b70      	ldr	r3, [pc, #448]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6f      	ldr	r2, [pc, #444]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6d      	ldr	r3, [pc, #436]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6c      	ldr	r2, [pc, #432]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b69      	ldr	r3, [pc, #420]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a68      	ldr	r2, [pc, #416]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a65      	ldr	r2, [pc, #404]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fca8 	bl	80010d0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fca4 	bl	80010d0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e207      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc94 	bl	80010d0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc90 	bl	80010d0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	@ 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b51      	ldr	r3, [pc, #324]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017da:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b44      	ldr	r3, [pc, #272]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c7      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4937      	ldr	r1, [pc, #220]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_RCC_OscConfig+0x244>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fc49 	bl	80010d0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fc45 	bl	80010d0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4925      	ldr	r1, [pc, #148]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x244>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fc28 	bl	80010d0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fc24 	bl	80010d0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e187      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d036      	beq.n	800191c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_RCC_OscConfig+0x248>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fc08 	bl	80010d0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc04 	bl	80010d0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e167      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e01b      	b.n	800191c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_OscConfig+0x248>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fbf1 	bl	80010d0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e00e      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fbed 	bl	80010d0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d907      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e150      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	42470000 	.word	0x42470000
 800190c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b88      	ldr	r3, [pc, #544]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ea      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8097 	beq.w	8001a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b81      	ldr	r3, [pc, #516]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a7c      	ldr	r2, [pc, #496]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b77      	ldr	r3, [pc, #476]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b74      	ldr	r3, [pc, #464]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a73      	ldr	r2, [pc, #460]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fbad 	bl	80010d0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fba9 	bl	80010d0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e10c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x2ea>
 80019a0:	4b64      	ldr	r3, [pc, #400]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a4:	4a63      	ldr	r2, [pc, #396]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x30c>
 80019b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019d0:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d4:	4a57      	ldr	r2, [pc, #348]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	@ 0x70
 80019dc:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e0:	4a54      	ldr	r2, [pc, #336]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d015      	beq.n	8001a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fb6e 	bl	80010d0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb6a 	bl	80010d0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0cb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	4b49      	ldr	r3, [pc, #292]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ee      	beq.n	80019f8 <HAL_RCC_OscConfig+0x334>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fb58 	bl	80010d0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fb54 	bl	80010d0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0b5      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ee      	bne.n	8001a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a1 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a62:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d05c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d141      	bne.n	8001afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fb28 	bl	80010d0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fb24 	bl	80010d0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e087      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	491b      	ldr	r1, [pc, #108]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fafd 	bl	80010d0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff faf9 	bl	80010d0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e05c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x416>
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fae6 	bl	80010d0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fae2 	bl	80010d0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e045      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x444>
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e038      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d028      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff fa14 	bl	80010d0 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff fa10 	bl	80010d0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f852 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08006d4c 	.word	0x08006d4c
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b094      	sub	sp, #80	@ 0x50
 8001d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d98:	4b79      	ldr	r3, [pc, #484]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d00d      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f200 80e1 	bhi.w	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x3a>
 8001db2:	e0db      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db8:	e0db      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dbe:	e0d8      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b6d      	ldr	r3, [pc, #436]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001df2:	4622      	mov	r2, r4
 8001df4:	462b      	mov	r3, r5
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0159      	lsls	r1, r3, #5
 8001e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e04:	0150      	lsls	r0, r2, #5
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	1a51      	subs	r1, r2, r1
 8001e0e:	6139      	str	r1, [r7, #16]
 8001e10:	4629      	mov	r1, r5
 8001e12:	eb63 0301 	sbc.w	r3, r3, r1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e24:	4659      	mov	r1, fp
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	4651      	mov	r1, sl
 8001e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2e:	4651      	mov	r1, sl
 8001e30:	018a      	lsls	r2, r1, #6
 8001e32:	4651      	mov	r1, sl
 8001e34:	ebb2 0801 	subs.w	r8, r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	eb18 0303 	adds.w	r3, r8, r3
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	462b      	mov	r3, r5
 8001e60:	eb49 0303 	adc.w	r3, r9, r3
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e72:	4629      	mov	r1, r5
 8001e74:	024b      	lsls	r3, r1, #9
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	024a      	lsls	r2, r1, #9
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e86:	2200      	movs	r2, #0
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e90:	f7fe fa3e 	bl	8000310 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e9c:	e058      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb8:	4642      	mov	r2, r8
 8001eba:	464b      	mov	r3, r9
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	0159      	lsls	r1, r3, #5
 8001ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eca:	0150      	lsls	r0, r2, #5
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	00eb      	lsls	r3, r5, #3
 8001f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f06:	00e2      	lsls	r2, r4, #3
 8001f08:	4614      	mov	r4, r2
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	18e3      	adds	r3, r4, r3
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	464b      	mov	r3, r9
 8001f14:	eb45 0303 	adc.w	r3, r5, r3
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f26:	4629      	mov	r1, r5
 8001f28:	028b      	lsls	r3, r1, #10
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f30:	4621      	mov	r1, r4
 8001f32:	028a      	lsls	r2, r1, #10
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	61fa      	str	r2, [r7, #28]
 8001f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f44:	f7fe f9e4 	bl	8000310 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3750      	adds	r7, #80	@ 0x50
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08006d5c 	.word	0x08006d5c

08001fcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	220f      	movs	r2, #15
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_RCC_GetClockConfig+0x5c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_RCC_GetClockConfig+0x5c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_GetClockConfig+0x5c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_RCC_GetClockConfig+0x60>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0207 	and.w	r2, r3, #7
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e041      	b.n	80020c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f839 	bl	80020ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f000 f9c0 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d001      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04e      	b.n	800219a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002126:	d01d      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <HAL_TIM_Base_Start_IT+0xc8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1e      	ldr	r2, [pc, #120]	@ (80021b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	@ (80021c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d111      	bne.n	8002188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d010      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	e007      	b.n	8002198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40000c00 	.word	0x40000c00
 80021b8:	40010400 	.word	0x40010400
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40001800 	.word	0x40001800

080021c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d020      	beq.n	8002228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0202 	mvn.w	r2, #2
 80021f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8d2 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8c4 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8d5 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d020      	beq.n	8002274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0204 	mvn.w	r2, #4
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8ac 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f89e 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f8af 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d020      	beq.n	80022c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01b      	beq.n	80022c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0208 	mvn.w	r2, #8
 8002290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2204      	movs	r2, #4
 8002296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f886 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80022ac:	e005      	b.n	80022ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f878 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f889 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d020      	beq.n	800230c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01b      	beq.n	800230c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0210 	mvn.w	r2, #16
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f860 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f852 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f863 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0201 	mvn.w	r2, #1
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fd2a 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800234c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f906 	bl	8002560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f834 	bl	80023e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8d8 	bl	800254c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <TIM_Base_SetConfig+0x12c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002412:	d00f      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a43      	ldr	r2, [pc, #268]	@ (8002524 <TIM_Base_SetConfig+0x130>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00b      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a42      	ldr	r2, [pc, #264]	@ (8002528 <TIM_Base_SetConfig+0x134>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a41      	ldr	r2, [pc, #260]	@ (800252c <TIM_Base_SetConfig+0x138>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a40      	ldr	r2, [pc, #256]	@ (8002530 <TIM_Base_SetConfig+0x13c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d108      	bne.n	8002446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a35      	ldr	r2, [pc, #212]	@ (8002520 <TIM_Base_SetConfig+0x12c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002454:	d027      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <TIM_Base_SetConfig+0x130>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d023      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a31      	ldr	r2, [pc, #196]	@ (8002528 <TIM_Base_SetConfig+0x134>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01f      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a30      	ldr	r2, [pc, #192]	@ (800252c <TIM_Base_SetConfig+0x138>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2f      	ldr	r2, [pc, #188]	@ (8002530 <TIM_Base_SetConfig+0x13c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d017      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2e      	ldr	r2, [pc, #184]	@ (8002534 <TIM_Base_SetConfig+0x140>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2d      	ldr	r2, [pc, #180]	@ (8002538 <TIM_Base_SetConfig+0x144>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00f      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2c      	ldr	r2, [pc, #176]	@ (800253c <TIM_Base_SetConfig+0x148>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a2b      	ldr	r2, [pc, #172]	@ (8002540 <TIM_Base_SetConfig+0x14c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2a      	ldr	r2, [pc, #168]	@ (8002544 <TIM_Base_SetConfig+0x150>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d003      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a29      	ldr	r2, [pc, #164]	@ (8002548 <TIM_Base_SetConfig+0x154>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d108      	bne.n	80024b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <TIM_Base_SetConfig+0x12c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0xf8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <TIM_Base_SetConfig+0x13c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f023 0201 	bic.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]
  }
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40000c00 	.word	0x40000c00
 8002530:	40010400 	.word	0x40010400
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800
 8002540:	40001800 	.word	0x40001800
 8002544:	40001c00 	.word	0x40001c00
 8002548:	40002000 	.word	0x40002000

0800254c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0208 	add.w	r2, r3, #8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 0208 	add.w	r2, r3, #8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0208 	add.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6852      	ldr	r2, [r2, #4]
 80025ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d103      	bne.n	8002602 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002622:	b580      	push	{r7, lr}
 8002624:	b08c      	sub	sp, #48	@ 0x30
 8002626:	af04      	add	r7, sp, #16
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4618      	mov	r0, r3
 8002638:	f001 f81a 	bl	8003670 <pvPortMalloc>
 800263c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002644:	2058      	movs	r0, #88	@ 0x58
 8002646:	f001 f813 	bl	8003670 <pvPortMalloc>
 800264a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002652:	2258      	movs	r2, #88	@ 0x58
 8002654:	2100      	movs	r1, #0
 8002656:	69f8      	ldr	r0, [r7, #28]
 8002658:	f003 fca4 	bl	8005fa4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	631a      	str	r2, [r3, #48]	@ 0x30
 8002662:	e005      	b.n	8002670 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	f001 f8bf 	bl	80037e8 <vPortFree>
 800266a:	e001      	b.n	8002670 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d013      	beq.n	800269e <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002676:	88fa      	ldrh	r2, [r7, #6]
 8002678:	2300      	movs	r3, #0
 800267a:	9303      	str	r3, [sp, #12]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f80e 	bl	80026ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002692:	69f8      	ldr	r0, [r7, #28]
 8002694:	f000 f89c 	bl	80027d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002698:	2301      	movs	r3, #1
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e002      	b.n	80026a4 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026a4:	69bb      	ldr	r3, [r7, #24]
    }
 80026a6:	4618      	mov	r0, r3
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	21a5      	movs	r1, #165	@ 0xa5
 80026c8:	f003 fc6c 	bl	8005fa4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026d6:	3b01      	subs	r3, #1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f023 0307 	bic.w	r3, r3, #7
 80026e4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	617b      	str	r3, [r7, #20]
    }
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01e      	beq.n	800274c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e012      	b.n	800273a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	7819      	ldrb	r1, [r3, #0]
 800271c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	3334      	adds	r3, #52	@ 0x34
 8002724:	460a      	mov	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b09      	cmp	r3, #9
 800273e:	d9e9      	bls.n	8002714 <prvInitialiseNewTask+0x66>
 8002740:	e000      	b.n	8002744 <prvInitialiseNewTask+0x96>
            {
                break;
 8002742:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	2b04      	cmp	r3, #4
 8002750:	d90b      	bls.n	800276a <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	613b      	str	r3, [r7, #16]
    }
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800276a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276c:	2b04      	cmp	r3, #4
 800276e:	d901      	bls.n	8002774 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002770:	2304      	movs	r3, #4
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800277e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002782:	3304      	adds	r3, #4
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff15 	bl	80025b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278c:	3318      	adds	r3, #24
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff10 	bl	80025b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002798:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279c:	f1c3 0205 	rsb	r2, r3, #5
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	69b8      	ldr	r0, [r7, #24]
 80027b0:	f000 fc76 	bl	80030a0 <pxPortInitialiseStack>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027c6:	bf00      	nop
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027d8:	f000 fe18 	bl	800340c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027dc:	4b4f      	ldr	r3, [pc, #316]	@ (800291c <prvAddNewTaskToReadyList+0x14c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a4e      	ldr	r2, [pc, #312]	@ (800291c <prvAddNewTaskToReadyList+0x14c>)
 80027e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <prvAddNewTaskToReadyList+0x150>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002920 <prvAddNewTaskToReadyList+0x150>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027f4:	4b49      	ldr	r3, [pc, #292]	@ (800291c <prvAddNewTaskToReadyList+0x14c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d110      	bne.n	800281e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027fc:	f000 fbb6 	bl	8002f6c <prvInitialiseTaskLists>
 8002800:	e00d      	b.n	800281e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002802:	4b48      	ldr	r3, [pc, #288]	@ (8002924 <prvAddNewTaskToReadyList+0x154>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800280a:	4b45      	ldr	r3, [pc, #276]	@ (8002920 <prvAddNewTaskToReadyList+0x150>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	429a      	cmp	r2, r3
 8002816:	d802      	bhi.n	800281e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002818:	4a41      	ldr	r2, [pc, #260]	@ (8002920 <prvAddNewTaskToReadyList+0x150>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800281e:	4b42      	ldr	r3, [pc, #264]	@ (8002928 <prvAddNewTaskToReadyList+0x158>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	4a40      	ldr	r2, [pc, #256]	@ (8002928 <prvAddNewTaskToReadyList+0x158>)
 8002826:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002828:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <prvAddNewTaskToReadyList+0x158>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <prvAddNewTaskToReadyList+0x94>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4618      	mov	r0, r3
 800283a:	f002 ff51 	bl	80056e0 <SEGGER_SYSVIEW_OnTaskCreate>
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	461d      	mov	r5, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461c      	mov	r4, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	1ae3      	subs	r3, r4, r3
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	462b      	mov	r3, r5
 8002860:	f001 f982 	bl	8003b68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	f002 ffbe 	bl	80057e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	2201      	movs	r2, #1
 8002872:	409a      	lsls	r2, r3
 8002874:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <prvAddNewTaskToReadyList+0x15c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	4a2c      	ldr	r2, [pc, #176]	@ (800292c <prvAddNewTaskToReadyList+0x15c>)
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002882:	492b      	ldr	r1, [pc, #172]	@ (8002930 <prvAddNewTaskToReadyList+0x160>)
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3304      	adds	r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	3204      	adds	r2, #4
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <prvAddNewTaskToReadyList+0x160>)
 80028c2:	441a      	add	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028cc:	4918      	ldr	r1, [pc, #96]	@ (8002930 <prvAddNewTaskToReadyList+0x160>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1c59      	adds	r1, r3, #1
 80028dc:	4814      	ldr	r0, [pc, #80]	@ (8002930 <prvAddNewTaskToReadyList+0x160>)
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4403      	add	r3, r0
 80028e8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028ea:	f000 fdc1 	bl	8003470 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <prvAddNewTaskToReadyList+0x154>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00e      	beq.n	8002914 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <prvAddNewTaskToReadyList+0x150>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <prvAddNewTaskToReadyList+0x164>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	200001b8 	.word	0x200001b8
 8002920:	200000e0 	.word	0x200000e0
 8002924:	200001c4 	.word	0x200001c4
 8002928:	200001d4 	.word	0x200001d4
 800292c:	200001c0 	.word	0x200001c0
 8002930:	200000e4 	.word	0x200000e4
 8002934:	e000ed04 	.word	0xe000ed04

08002938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800293e:	4b24      	ldr	r3, [pc, #144]	@ (80029d0 <vTaskStartScheduler+0x98>)
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2300      	movs	r3, #0
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2300      	movs	r3, #0
 8002948:	2282      	movs	r2, #130	@ 0x82
 800294a:	4922      	ldr	r1, [pc, #136]	@ (80029d4 <vTaskStartScheduler+0x9c>)
 800294c:	4822      	ldr	r0, [pc, #136]	@ (80029d8 <vTaskStartScheduler+0xa0>)
 800294e:	f7ff fe68 	bl	8002622 <xTaskCreate>
 8002952:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d124      	bne.n	80029a4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	60bb      	str	r3, [r7, #8]
    }
 800296c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800296e:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <vTaskStartScheduler+0xa4>)
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <vTaskStartScheduler+0xa8>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <vTaskStartScheduler+0xac>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002982:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <vTaskStartScheduler+0xb0>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <vTaskStartScheduler+0x98>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d102      	bne.n	8002994 <vTaskStartScheduler+0x5c>
 800298e:	f002 fe8b 	bl	80056a8 <SEGGER_SYSVIEW_OnIdle>
 8002992:	e004      	b.n	800299e <vTaskStartScheduler+0x66>
 8002994:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <vTaskStartScheduler+0xb0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fee3 	bl	8005764 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800299e:	f000 fc11 	bl	80031c4 <xPortStartScheduler>
 80029a2:	e00f      	b.n	80029c4 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d10b      	bne.n	80029c4 <vTaskStartScheduler+0x8c>
        __asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	607b      	str	r3, [r7, #4]
    }
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <vTaskStartScheduler+0xb4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200001dc 	.word	0x200001dc
 80029d4:	08006c84 	.word	0x08006c84
 80029d8:	08002f3d 	.word	0x08002f3d
 80029dc:	200001d8 	.word	0x200001d8
 80029e0:	200001c4 	.word	0x200001c4
 80029e4:	200001bc 	.word	0x200001bc
 80029e8:	200000e0 	.word	0x200000e0
 80029ec:	08006d64 	.word	0x08006d64

080029f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <vTaskSuspendAll+0x18>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	4a03      	ldr	r2, [pc, #12]	@ (8002a08 <vTaskSuspendAll+0x18>)
 80029fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	200001e0 	.word	0x200001e0

08002a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a1a:	4b73      	ldr	r3, [pc, #460]	@ (8002be8 <xTaskResumeAll+0x1dc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <xTaskResumeAll+0x2e>
        __asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	607b      	str	r3, [r7, #4]
    }
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	e7fd      	b.n	8002a36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a3a:	f000 fce7 	bl	800340c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002be8 <xTaskResumeAll+0x1dc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	4a68      	ldr	r2, [pc, #416]	@ (8002be8 <xTaskResumeAll+0x1dc>)
 8002a46:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a48:	4b67      	ldr	r3, [pc, #412]	@ (8002be8 <xTaskResumeAll+0x1dc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 80c4 	bne.w	8002bda <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a52:	4b66      	ldr	r3, [pc, #408]	@ (8002bec <xTaskResumeAll+0x1e0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80bf 	beq.w	8002bda <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a5c:	e08e      	b.n	8002b7c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a5e:	4b64      	ldr	r3, [pc, #400]	@ (8002bf0 <xTaskResumeAll+0x1e4>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	6a12      	ldr	r2, [r2, #32]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	69d2      	ldr	r2, [r2, #28]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3318      	adds	r3, #24
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d103      	bne.n	8002a94 <xTaskResumeAll+0x88>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2200      	movs	r2, #0
 8002a98:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d103      	bne.n	8002ad2 <xTaskResumeAll+0xc6>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fe7f 	bl	80057e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	4b40      	ldr	r3, [pc, #256]	@ (8002bf4 <xTaskResumeAll+0x1e8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf4 <xTaskResumeAll+0x1e8>)
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b00:	493d      	ldr	r1, [pc, #244]	@ (8002bf8 <xTaskResumeAll+0x1ec>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	3204      	adds	r2, #4
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf8 <xTaskResumeAll+0x1ec>)
 8002b40:	441a      	add	r2, r3
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	615a      	str	r2, [r3, #20]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4a:	492b      	ldr	r1, [pc, #172]	@ (8002bf8 <xTaskResumeAll+0x1ec>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1c59      	adds	r1, r3, #1
 8002b5a:	4827      	ldr	r0, [pc, #156]	@ (8002bf8 <xTaskResumeAll+0x1ec>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4403      	add	r3, r0
 8002b66:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <xTaskResumeAll+0x1f0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002b76:	4b22      	ldr	r3, [pc, #136]	@ (8002c00 <xTaskResumeAll+0x1f4>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf0 <xTaskResumeAll+0x1e4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f47f af6c 	bne.w	8002a5e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b8c:	f000 fa6c 	bl	8003068 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <xTaskResumeAll+0x1f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d010      	beq.n	8002bbe <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b9c:	f000 f848 	bl	8002c30 <xTaskIncrementTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002ba6:	4b16      	ldr	r3, [pc, #88]	@ (8002c00 <xTaskResumeAll+0x1f4>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f1      	bne.n	8002b9c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <xTaskResumeAll+0x1f8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <xTaskResumeAll+0x1f4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002bca:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <xTaskResumeAll+0x1fc>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002bda:	f000 fc49 	bl	8003470 <vPortExitCritical>

    return xAlreadyYielded;
 8002bde:	69bb      	ldr	r3, [r7, #24]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200001e0 	.word	0x200001e0
 8002bec:	200001b8 	.word	0x200001b8
 8002bf0:	20000178 	.word	0x20000178
 8002bf4:	200001c0 	.word	0x200001c0
 8002bf8:	200000e4 	.word	0x200000e4
 8002bfc:	200000e0 	.word	0x200000e0
 8002c00:	200001cc 	.word	0x200001cc
 8002c04:	200001c8 	.word	0x200001c8
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c12:	f000 fceb 	bl	80035ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <xTaskGetTickCountFromISR+0x20>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c20:	683b      	ldr	r3, [r7, #0]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200001bc 	.word	0x200001bc

08002c30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	@ 0x28
 8002c34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c3a:	4b80      	ldr	r3, [pc, #512]	@ (8002e3c <xTaskIncrementTick+0x20c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 80f1 	bne.w	8002e26 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c44:	4b7e      	ldr	r3, [pc, #504]	@ (8002e40 <xTaskIncrementTick+0x210>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c4c:	4a7c      	ldr	r2, [pc, #496]	@ (8002e40 <xTaskIncrementTick+0x210>)
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d121      	bne.n	8002c9c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c58:	4b7a      	ldr	r3, [pc, #488]	@ (8002e44 <xTaskIncrementTick+0x214>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <xTaskIncrementTick+0x4a>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	607b      	str	r3, [r7, #4]
    }
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	e7fd      	b.n	8002c76 <xTaskIncrementTick+0x46>
 8002c7a:	4b72      	ldr	r3, [pc, #456]	@ (8002e44 <xTaskIncrementTick+0x214>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	4b71      	ldr	r3, [pc, #452]	@ (8002e48 <xTaskIncrementTick+0x218>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6f      	ldr	r2, [pc, #444]	@ (8002e44 <xTaskIncrementTick+0x214>)
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4a6f      	ldr	r2, [pc, #444]	@ (8002e48 <xTaskIncrementTick+0x218>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002e4c <xTaskIncrementTick+0x21c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	4a6d      	ldr	r2, [pc, #436]	@ (8002e4c <xTaskIncrementTick+0x21c>)
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	f000 f9e6 	bl	8003068 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e50 <xTaskIncrementTick+0x220>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	f0c0 80aa 	bcc.w	8002dfc <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <xTaskIncrementTick+0x214>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb2:	4b67      	ldr	r3, [pc, #412]	@ (8002e50 <xTaskIncrementTick+0x220>)
 8002cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb8:	601a      	str	r2, [r3, #0]
                    break;
 8002cba:	e09f      	b.n	8002dfc <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbc:	4b61      	ldr	r3, [pc, #388]	@ (8002e44 <xTaskIncrementTick+0x214>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d203      	bcs.n	8002cdc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e50 <xTaskIncrementTick+0x220>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002cda:	e08f      	b.n	8002dfc <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	68d2      	ldr	r2, [r2, #12]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	6892      	ldr	r2, [r2, #8]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d103      	bne.n	8002d0a <xTaskIncrementTick+0xda>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01e      	beq.n	8002d60 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	6a12      	ldr	r2, [r2, #32]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	69d2      	ldr	r2, [r2, #28]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	3318      	adds	r3, #24
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d103      	bne.n	8002d50 <xTaskIncrementTick+0x120>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fd40 	bl	80057e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <xTaskIncrementTick+0x224>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	4a37      	ldr	r2, [pc, #220]	@ (8002e54 <xTaskIncrementTick+0x224>)
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7e:	4936      	ldr	r1, [pc, #216]	@ (8002e58 <xTaskIncrementTick+0x228>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	3204      	adds	r2, #4
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1d1a      	adds	r2, r3, #4
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4a26      	ldr	r2, [pc, #152]	@ (8002e58 <xTaskIncrementTick+0x228>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	615a      	str	r2, [r3, #20]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc8:	4923      	ldr	r1, [pc, #140]	@ (8002e58 <xTaskIncrementTick+0x228>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	481f      	ldr	r0, [pc, #124]	@ (8002e58 <xTaskIncrementTick+0x228>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4403      	add	r3, r0
 8002de4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dea:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <xTaskIncrementTick+0x22c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f67f af59 	bls.w	8002ca8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002df6:	2301      	movs	r3, #1
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dfa:	e755      	b.n	8002ca8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dfc:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <xTaskIncrementTick+0x22c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e02:	4915      	ldr	r1, [pc, #84]	@ (8002e58 <xTaskIncrementTick+0x228>)
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d901      	bls.n	8002e18 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <xTaskIncrementTick+0x230>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e24:	e004      	b.n	8002e30 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <xTaskIncrementTick+0x234>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e64 <xTaskIncrementTick+0x234>)
 8002e2e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3728      	adds	r7, #40	@ 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200001e0 	.word	0x200001e0
 8002e40:	200001bc 	.word	0x200001bc
 8002e44:	20000170 	.word	0x20000170
 8002e48:	20000174 	.word	0x20000174
 8002e4c:	200001d0 	.word	0x200001d0
 8002e50:	200001d8 	.word	0x200001d8
 8002e54:	200001c0 	.word	0x200001c0
 8002e58:	200000e4 	.word	0x200000e4
 8002e5c:	200000e0 	.word	0x200000e0
 8002e60:	200001cc 	.word	0x200001cc
 8002e64:	200001c8 	.word	0x200001c8

08002e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f24 <vTaskSwitchContext+0xbc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e76:	4b2c      	ldr	r3, [pc, #176]	@ (8002f28 <vTaskSwitchContext+0xc0>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002e7c:	e04e      	b.n	8002f1c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <vTaskSwitchContext+0xc0>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e84:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <vTaskSwitchContext+0xc4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	f1c3 031f 	rsb	r3, r3, #31
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	4925      	ldr	r1, [pc, #148]	@ (8002f30 <vTaskSwitchContext+0xc8>)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	607b      	str	r3, [r7, #4]
    }
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vTaskSwitchContext+0x5a>
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <vTaskSwitchContext+0xc8>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d104      	bne.n	8002ef6 <vTaskSwitchContext+0x8e>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <vTaskSwitchContext+0xcc>)
 8002efe:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <vTaskSwitchContext+0xcc>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <vTaskSwitchContext+0xd0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d102      	bne.n	8002f12 <vTaskSwitchContext+0xaa>
 8002f0c:	f002 fbcc 	bl	80056a8 <SEGGER_SYSVIEW_OnIdle>
}
 8002f10:	e004      	b.n	8002f1c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002f12:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <vTaskSwitchContext+0xcc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fc24 	bl	8005764 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f1c:	bf00      	nop
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200001e0 	.word	0x200001e0
 8002f28:	200001cc 	.word	0x200001cc
 8002f2c:	200001c0 	.word	0x200001c0
 8002f30:	200000e4 	.word	0x200000e4
 8002f34:	200000e0 	.word	0x200000e0
 8002f38:	200001dc 	.word	0x200001dc

08002f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f44:	f000 f852 	bl	8002fec <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <prvIdleTask+0x28>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d9f9      	bls.n	8002f44 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <prvIdleTask+0x2c>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f60:	e7f0      	b.n	8002f44 <prvIdleTask+0x8>
 8002f62:	bf00      	nop
 8002f64:	200000e4 	.word	0x200000e4
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	e00c      	b.n	8002f92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4a12      	ldr	r2, [pc, #72]	@ (8002fcc <prvInitialiseTaskLists+0x60>)
 8002f84:	4413      	add	r3, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff faf4 	bl	8002574 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d9ef      	bls.n	8002f78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f98:	480d      	ldr	r0, [pc, #52]	@ (8002fd0 <prvInitialiseTaskLists+0x64>)
 8002f9a:	f7ff faeb 	bl	8002574 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f9e:	480d      	ldr	r0, [pc, #52]	@ (8002fd4 <prvInitialiseTaskLists+0x68>)
 8002fa0:	f7ff fae8 	bl	8002574 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fa4:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <prvInitialiseTaskLists+0x6c>)
 8002fa6:	f7ff fae5 	bl	8002574 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002faa:	480c      	ldr	r0, [pc, #48]	@ (8002fdc <prvInitialiseTaskLists+0x70>)
 8002fac:	f7ff fae2 	bl	8002574 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002fb0:	480b      	ldr	r0, [pc, #44]	@ (8002fe0 <prvInitialiseTaskLists+0x74>)
 8002fb2:	f7ff fadf 	bl	8002574 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <prvInitialiseTaskLists+0x78>)
 8002fb8:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <prvInitialiseTaskLists+0x64>)
 8002fba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <prvInitialiseTaskLists+0x7c>)
 8002fbe:	4a05      	ldr	r2, [pc, #20]	@ (8002fd4 <prvInitialiseTaskLists+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200000e4 	.word	0x200000e4
 8002fd0:	20000148 	.word	0x20000148
 8002fd4:	2000015c 	.word	0x2000015c
 8002fd8:	20000178 	.word	0x20000178
 8002fdc:	2000018c 	.word	0x2000018c
 8002fe0:	200001a4 	.word	0x200001a4
 8002fe4:	20000170 	.word	0x20000170
 8002fe8:	20000174 	.word	0x20000174

08002fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ff2:	e019      	b.n	8003028 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002ff4:	f000 fa0a 	bl	800340c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff8:	4b10      	ldr	r3, [pc, #64]	@ (800303c <prvCheckTasksWaitingTermination+0x50>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fae2 	bl	80025ce <uxListRemove>
                --uxCurrentNumberOfTasks;
 800300a:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <prvCheckTasksWaitingTermination+0x54>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	4a0b      	ldr	r2, [pc, #44]	@ (8003040 <prvCheckTasksWaitingTermination+0x54>)
 8003012:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <prvCheckTasksWaitingTermination+0x58>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3b01      	subs	r3, #1
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <prvCheckTasksWaitingTermination+0x58>)
 800301c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800301e:	f000 fa27 	bl	8003470 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f810 	bl	8003048 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <prvCheckTasksWaitingTermination+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e1      	bne.n	8002ff4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000018c 	.word	0x2000018c
 8003040:	200001b8 	.word	0x200001b8
 8003044:	200001a0 	.word	0x200001a0

08003048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fbc7 	bl	80037e8 <vPortFree>
            vPortFree( pxTCB );
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fbc4 	bl	80037e8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <prvResetNextTaskUnblockTime+0x30>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <prvResetNextTaskUnblockTime+0x34>)
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
 800307c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800307e:	e005      	b.n	800308c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <prvResetNextTaskUnblockTime+0x30>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <prvResetNextTaskUnblockTime+0x34>)
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000170 	.word	0x20000170
 800309c:	200001d8 	.word	0x200001d8

080030a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b04      	subs	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b04      	subs	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 0201 	bic.w	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3b04      	subs	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <pxPortInitialiseStack+0x64>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b14      	subs	r3, #20
 80030da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3b04      	subs	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f06f 0202 	mvn.w	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b20      	subs	r3, #32
 80030f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	08003109 	.word	0x08003109

08003108 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <prvTaskExitError+0x58>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d00b      	beq.n	8003134 <prvTaskExitError+0x2c>
        __asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
    }
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <prvTaskExitError+0x28>
        __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	60bb      	str	r3, [r7, #8]
    }
 8003146:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003148:	bf00      	nop
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0fc      	beq.n	800314a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	2000000c 	.word	0x2000000c
	...

08003170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003170:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <pxCurrentTCBConst2>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	6808      	ldr	r0, [r1, #0]
 8003176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317a:	f380 8809 	msr	PSP, r0
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f380 8811 	msr	BASEPRI, r0
 800318a:	4770      	bx	lr
 800318c:	f3af 8000 	nop.w

08003190 <pxCurrentTCBConst2>:
 8003190:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop

08003198 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003198:	4808      	ldr	r0, [pc, #32]	@ (80031bc <prvPortStartFirstTask+0x24>)
 800319a:	6800      	ldr	r0, [r0, #0]
 800319c:	6800      	ldr	r0, [r0, #0]
 800319e:	f380 8808 	msr	MSP, r0
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f380 8814 	msr	CONTROL, r0
 80031aa:	b662      	cpsie	i
 80031ac:	b661      	cpsie	f
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	df00      	svc	0
 80031b8:	bf00      	nop
 80031ba:	0000      	.short	0x0000
 80031bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop

080031c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031ca:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <xPortStartScheduler+0x124>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a47      	ldr	r2, [pc, #284]	@ (80032ec <xPortStartScheduler+0x128>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10b      	bne.n	80031ec <xPortStartScheduler+0x28>
        __asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60fb      	str	r3, [r7, #12]
    }
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031ec:	4b3e      	ldr	r3, [pc, #248]	@ (80032e8 <xPortStartScheduler+0x124>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3f      	ldr	r2, [pc, #252]	@ (80032f0 <xPortStartScheduler+0x12c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10b      	bne.n	800320e <xPortStartScheduler+0x4a>
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	613b      	str	r3, [r7, #16]
    }
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800320e:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <xPortStartScheduler+0x130>)
 8003210:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	22ff      	movs	r2, #255	@ 0xff
 800321e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b31      	ldr	r3, [pc, #196]	@ (80032f8 <xPortStartScheduler+0x134>)
 8003234:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003236:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <xPortStartScheduler+0x138>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800323c:	e009      	b.n	8003252 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800323e:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <xPortStartScheduler+0x138>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <xPortStartScheduler+0x138>)
 8003246:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325a:	2b80      	cmp	r3, #128	@ 0x80
 800325c:	d0ef      	beq.n	800323e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800325e:	4b27      	ldr	r3, [pc, #156]	@ (80032fc <xPortStartScheduler+0x138>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1c3 0307 	rsb	r3, r3, #7
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00b      	beq.n	8003282 <xPortStartScheduler+0xbe>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60bb      	str	r3, [r7, #8]
    }
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003282:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <xPortStartScheduler+0x138>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <xPortStartScheduler+0x138>)
 800328a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <xPortStartScheduler+0x138>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003294:	4a19      	ldr	r2, [pc, #100]	@ (80032fc <xPortStartScheduler+0x138>)
 8003296:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80032a0:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <xPortStartScheduler+0x13c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a16      	ldr	r2, [pc, #88]	@ (8003300 <xPortStartScheduler+0x13c>)
 80032a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <xPortStartScheduler+0x13c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <xPortStartScheduler+0x13c>)
 80032b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80032b8:	f000 f968 	bl	800358c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <xPortStartScheduler+0x140>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80032c2:	f000 f987 	bl	80035d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <xPortStartScheduler+0x144>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003308 <xPortStartScheduler+0x144>)
 80032cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80032d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80032d2:	f7ff ff61 	bl	8003198 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80032d6:	f7ff fdc7 	bl	8002e68 <vTaskSwitchContext>
    prvTaskExitError();
 80032da:	f7ff ff15 	bl	8003108 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed00 	.word	0xe000ed00
 80032ec:	410fc271 	.word	0x410fc271
 80032f0:	410fc270 	.word	0x410fc270
 80032f4:	e000e400 	.word	0xe000e400
 80032f8:	200001e4 	.word	0x200001e4
 80032fc:	200001e8 	.word	0x200001e8
 8003300:	e000ed20 	.word	0xe000ed20
 8003304:	2000000c 	.word	0x2000000c
 8003308:	e000ef34 	.word	0xe000ef34

0800330c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003312:	4b38      	ldr	r3, [pc, #224]	@ (80033f4 <vInitPrioGroupValue+0xe8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a38      	ldr	r2, [pc, #224]	@ (80033f8 <vInitPrioGroupValue+0xec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10b      	bne.n	8003334 <vInitPrioGroupValue+0x28>
        __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	60fb      	str	r3, [r7, #12]
    }
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003334:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <vInitPrioGroupValue+0xe8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a30      	ldr	r2, [pc, #192]	@ (80033fc <vInitPrioGroupValue+0xf0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10b      	bne.n	8003356 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	613b      	str	r3, [r7, #16]
    }
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	e7fd      	b.n	8003352 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003356:	4b2a      	ldr	r3, [pc, #168]	@ (8003400 <vInitPrioGroupValue+0xf4>)
 8003358:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	22ff      	movs	r2, #255	@ 0xff
 8003366:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <vInitPrioGroupValue+0xf8>)
 800337c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003384:	e009      	b.n	800339a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 800338e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d0ef      	beq.n	8003386 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033a6:	4b18      	ldr	r3, [pc, #96]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00b      	beq.n	80033ca <vInitPrioGroupValue+0xbe>
        __asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60bb      	str	r3, [r7, #8]
    }
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 80033d2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <vInitPrioGroupValue+0xfc>)
 80033de:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	410fc271 	.word	0x410fc271
 80033fc:	410fc270 	.word	0x410fc270
 8003400:	e000e400 	.word	0xe000e400
 8003404:	200001e4 	.word	0x200001e4
 8003408:	200001e8 	.word	0x200001e8

0800340c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
        __asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	607b      	str	r3, [r7, #4]
    }
 8003424:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <vPortEnterCritical+0x5c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <vPortEnterCritical+0x5c>)
 800342e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003430:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <vPortEnterCritical+0x5c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d110      	bne.n	800345a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <vPortEnterCritical+0x60>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <vPortEnterCritical+0x4e>
        __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	603b      	str	r3, [r7, #0]
    }
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	e7fd      	b.n	8003456 <vPortEnterCritical+0x4a>
    }
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	2000000c 	.word	0x2000000c
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003476:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <vPortExitCritical+0x50>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <vPortExitCritical+0x26>
        __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
    }
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <vPortExitCritical+0x50>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3b01      	subs	r3, #1
 800349c:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <vPortExitCritical+0x50>)
 800349e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80034a0:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <vPortExitCritical+0x50>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <vPortExitCritical+0x44>
 80034a8:	2300      	movs	r3, #0
 80034aa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80034b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	2000000c 	.word	0x2000000c
	...

080034d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80034d0:	f3ef 8009 	mrs	r0, PSP
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <pxCurrentTCBConst>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f01e 0f10 	tst.w	lr, #16
 80034e0:	bf08      	it	eq
 80034e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	6010      	str	r0, [r2, #0]
 80034ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80034f4:	f380 8811 	msr	BASEPRI, r0
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f7ff fcb2 	bl	8002e68 <vTaskSwitchContext>
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	f380 8811 	msr	BASEPRI, r0
 800350c:	bc09      	pop	{r0, r3}
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6808      	ldr	r0, [r1, #0]
 8003512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003516:	f01e 0f10 	tst.w	lr, #16
 800351a:	bf08      	it	eq
 800351c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003520:	f380 8809 	msr	PSP, r0
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	f3af 8000 	nop.w

08003530 <pxCurrentTCBConst>:
 8003530:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop

08003538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
        __asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	607b      	str	r3, [r7, #4]
    }
 8003550:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003552:	f002 f82f 	bl	80055b4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003556:	f7ff fb6b 	bl	8002c30 <xTaskIncrementTick>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d006      	beq.n	800356e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003560:	f002 f886 	bl	8005670 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003564:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <SysTick_Handler+0x50>)
 8003566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e001      	b.n	8003572 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800356e:	f002 f863 	bl	8005638 <SEGGER_SYSVIEW_RecordExitISR>
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f383 8811 	msr	BASEPRI, r3
    }
 800357c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <vPortSetupTimerInterrupt+0x34>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <vPortSetupTimerInterrupt+0x38>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <vPortSetupTimerInterrupt+0x3c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <vPortSetupTimerInterrupt+0x40>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <vPortSetupTimerInterrupt+0x44>)
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035ae:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <vPortSetupTimerInterrupt+0x34>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010
 80035c4:	e000e018 	.word	0xe000e018
 80035c8:	20000000 	.word	0x20000000
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	e000e014 	.word	0xe000e014

080035d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80035d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80035e4 <vPortEnableVFP+0x10>
 80035d8:	6801      	ldr	r1, [r0, #0]
 80035da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80035de:	6001      	str	r1, [r0, #0]
 80035e0:	4770      	bx	lr
 80035e2:	0000      	.short	0x0000
 80035e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop

080035ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80035f2:	f3ef 8305 	mrs	r3, IPSR
 80035f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	d915      	bls.n	800362a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035fe:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <vPortValidateInterruptPriority+0x74>)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003608:	4b16      	ldr	r3, [pc, #88]	@ (8003664 <vPortValidateInterruptPriority+0x78>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	7afa      	ldrb	r2, [r7, #11]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20b      	bcs.n	800362a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	607b      	str	r3, [r7, #4]
    }
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	e7fd      	b.n	8003626 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800362a:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <vPortValidateInterruptPriority+0x7c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003632:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <vPortValidateInterruptPriority+0x80>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d90b      	bls.n	8003652 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	603b      	str	r3, [r7, #0]
    }
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	e7fd      	b.n	800364e <vPortValidateInterruptPriority+0x62>
    }
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e3f0 	.word	0xe000e3f0
 8003664:	200001e4 	.word	0x200001e4
 8003668:	e000ed0c 	.word	0xe000ed0c
 800366c:	200001e8 	.word	0x200001e8

08003670 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800367c:	f7ff f9b8 	bl	80029f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003680:	4b54      	ldr	r3, [pc, #336]	@ (80037d4 <pvPortMalloc+0x164>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003688:	f000 f908 	bl	800389c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003692:	2208      	movs	r2, #8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	3308      	adds	r3, #8
 800369e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d804      	bhi.n	80036b4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4413      	add	r3, r2
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	e001      	b.n	80036b8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db71      	blt.n	80037a2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d06e      	beq.n	80037a2 <pvPortMalloc+0x132>
 80036c4:	4b44      	ldr	r3, [pc, #272]	@ (80037d8 <pvPortMalloc+0x168>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d869      	bhi.n	80037a2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80036ce:	4b43      	ldr	r3, [pc, #268]	@ (80037dc <pvPortMalloc+0x16c>)
 80036d0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80036d2:	4b42      	ldr	r3, [pc, #264]	@ (80037dc <pvPortMalloc+0x16c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036d8:	e004      	b.n	80036e4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d903      	bls.n	80036f6 <pvPortMalloc+0x86>
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f1      	bne.n	80036da <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80036f6:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <pvPortMalloc+0x164>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d050      	beq.n	80037a2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2208      	movs	r2, #8
 8003706:	4413      	add	r3, r2
 8003708:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	1ad2      	subs	r2, r2, r3
 800371a:	2308      	movs	r3, #8
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	429a      	cmp	r2, r3
 8003720:	d920      	bls.n	8003764 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <pvPortMalloc+0xdc>
        __asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	613b      	str	r3, [r7, #16]
    }
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f000 f8f8 	bl	8003954 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003764:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <pvPortMalloc+0x168>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	4a1a      	ldr	r2, [pc, #104]	@ (80037d8 <pvPortMalloc+0x168>)
 8003770:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <pvPortMalloc+0x168>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <pvPortMalloc+0x170>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d203      	bcs.n	8003786 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800377e:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <pvPortMalloc+0x168>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <pvPortMalloc+0x170>)
 8003784:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003798:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <pvPortMalloc+0x174>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <pvPortMalloc+0x174>)
 80037a0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80037a2:	f7ff f933 	bl	8002a0c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <pvPortMalloc+0x158>
        __asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
    }
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <pvPortMalloc+0x154>
    return pvReturn;
 80037c8:	69fb      	ldr	r3, [r7, #28]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3728      	adds	r7, #40	@ 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20012df4 	.word	0x20012df4
 80037d8:	20012df8 	.word	0x20012df8
 80037dc:	20012dec 	.word	0x20012dec
 80037e0:	20012dfc 	.word	0x20012dfc
 80037e4:	20012e00 	.word	0x20012e00

080037e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d047      	beq.n	800388a <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80037fa:	2308      	movs	r3, #8
 80037fc:	425b      	negs	r3, r3
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4413      	add	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0b      	blt.n	8003828 <vPortFree+0x40>
        __asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
    }
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <vPortFree+0x60>
        __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60bb      	str	r3, [r7, #8]
    }
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	da1c      	bge.n	800388a <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d118      	bne.n	800388a <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003864:	f7ff f8c4 	bl	80029f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <vPortFree+0xac>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4413      	add	r3, r2
 8003872:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <vPortFree+0xac>)
 8003874:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003876:	6938      	ldr	r0, [r7, #16]
 8003878:	f000 f86c 	bl	8003954 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <vPortFree+0xb0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <vPortFree+0xb0>)
 8003884:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003886:	f7ff f8c1 	bl	8002a0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20012df8 	.word	0x20012df8
 8003898:	20012e04 	.word	0x20012e04

0800389c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038a2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80038a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <prvHeapInit+0xa4>)
 80038aa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3307      	adds	r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0307 	bic.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <prvHeapInit+0xa4>)
 80038cc:	4413      	add	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <prvHeapInit+0xa8>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80038da:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <prvHeapInit+0xa8>)
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80038e8:	2208      	movs	r2, #8
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0307 	bic.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <prvHeapInit+0xac>)
 80038fc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <prvHeapInit+0xac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <prvHeapInit+0xac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <prvHeapInit+0xac>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a08      	ldr	r2, [pc, #32]	@ (800394c <prvHeapInit+0xb0>)
 800392a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a07      	ldr	r2, [pc, #28]	@ (8003950 <prvHeapInit+0xb4>)
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	200001ec 	.word	0x200001ec
 8003944:	20012dec 	.word	0x20012dec
 8003948:	20012df4 	.word	0x20012df4
 800394c:	20012dfc 	.word	0x20012dfc
 8003950:	20012df8 	.word	0x20012df8

08003954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800395c:	4b28      	ldr	r3, [pc, #160]	@ (8003a00 <prvInsertBlockIntoFreeList+0xac>)
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e002      	b.n	8003968 <prvInsertBlockIntoFreeList+0x14>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	d8f7      	bhi.n	8003962 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d108      	bne.n	8003996 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	441a      	add	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d118      	bne.n	80039dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <prvInsertBlockIntoFreeList+0xb0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d00d      	beq.n	80039d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e008      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <prvInsertBlockIntoFreeList+0xb0>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e003      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d002      	beq.n	80039f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20012dec 	.word	0x20012dec
 8003a04:	20012df4 	.word	0x20012df4

08003a08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003a0c:	4803      	ldr	r0, [pc, #12]	@ (8003a1c <_cbSendSystemDesc+0x14>)
 8003a0e:	f001 fd7b 	bl	8005508 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003a12:	4803      	ldr	r0, [pc, #12]	@ (8003a20 <_cbSendSystemDesc+0x18>)
 8003a14:	f001 fd78 	bl	8005508 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	08006c8c 	.word	0x08006c8c
 8003a20:	08006cc4 	.word	0x08006cc4

08003a24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <SEGGER_SYSVIEW_Conf+0x20>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <SEGGER_SYSVIEW_Conf+0x20>)
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <SEGGER_SYSVIEW_Conf+0x24>)
 8003a32:	4a06      	ldr	r2, [pc, #24]	@ (8003a4c <SEGGER_SYSVIEW_Conf+0x28>)
 8003a34:	f001 f9ee 	bl	8004e14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003a38:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003a3c:	f001 fa2e 	bl	8004e9c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000000 	.word	0x20000000
 8003a48:	08003a09 	.word	0x08003a09
 8003a4c:	08006d68 	.word	0x08006d68

08003a50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	e033      	b.n	8003ac4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003a5c:	491e      	ldr	r1, [pc, #120]	@ (8003ad8 <_cbSendTaskList+0x88>)
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	491a      	ldr	r1, [pc, #104]	@ (8003ad8 <_cbSendTaskList+0x88>)
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	4c16      	ldr	r4, [pc, #88]	@ (8003ad8 <_cbSendTaskList+0x88>)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4423      	add	r3, r4
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	681c      	ldr	r4, [r3, #0]
 8003a90:	4d11      	ldr	r5, [pc, #68]	@ (8003ad8 <_cbSendTaskList+0x88>)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	442b      	add	r3, r5
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	4e0d      	ldr	r6, [pc, #52]	@ (8003ad8 <_cbSendTaskList+0x88>)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4433      	add	r3, r6
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	4622      	mov	r2, r4
 8003aba:	f000 f8bd 	bl	8003c38 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <_cbSendTaskList+0x8c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d3c6      	bcc.n	8003a5c <_cbSendTaskList+0xc>
  }
}
 8003ace:	bf00      	nop
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	20012e08 	.word	0x20012e08
 8003adc:	20012ea8 	.word	0x20012ea8

08003ae0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003ae8:	f7ff f890 	bl	8002c0c <xTaskGetTickCountFromISR>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2200      	movs	r2, #0
 8003af0:	469a      	mov	sl, r3
 8003af2:	4693      	mov	fp, r2
 8003af4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	f04f 0a00 	mov.w	sl, #0
 8003b04:	f04f 0b00 	mov.w	fp, #0
 8003b08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003b0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003b10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003b14:	4652      	mov	r2, sl
 8003b16:	465b      	mov	r3, fp
 8003b18:	1a14      	subs	r4, r2, r0
 8003b1a:	eb63 0501 	sbc.w	r5, r3, r1
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	00ab      	lsls	r3, r5, #2
 8003b28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003b2c:	00a2      	lsls	r2, r4, #2
 8003b2e:	4614      	mov	r4, r2
 8003b30:	461d      	mov	r5, r3
 8003b32:	eb14 0800 	adds.w	r8, r4, r0
 8003b36:	eb45 0901 	adc.w	r9, r5, r1
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b4e:	4690      	mov	r8, r2
 8003b50:	4699      	mov	r9, r3
 8003b52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003b56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003b68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003b76:	2205      	movs	r2, #5
 8003b78:	492b      	ldr	r1, [pc, #172]	@ (8003c28 <SYSVIEW_AddTask+0xc0>)
 8003b7a:	68b8      	ldr	r0, [r7, #8]
 8003b7c:	f002 fa02 	bl	8005f84 <memcmp>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04b      	beq.n	8003c1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003b86:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b07      	cmp	r3, #7
 8003b8c:	d903      	bls.n	8003b96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003b8e:	4828      	ldr	r0, [pc, #160]	@ (8003c30 <SYSVIEW_AddTask+0xc8>)
 8003b90:	f001 ff5c 	bl	8005a4c <SEGGER_SYSVIEW_Warn>
    return;
 8003b94:	e044      	b.n	8003c20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003b96:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4926      	ldr	r1, [pc, #152]	@ (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003baa:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4921      	ldr	r1, [pc, #132]	@ (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3304      	adds	r3, #4
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	491b      	ldr	r1, [pc, #108]	@ (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003bd6:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4916      	ldr	r1, [pc, #88]	@ (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	330c      	adds	r3, #12
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4910      	ldr	r1, [pc, #64]	@ (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003c0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f80e 	bl	8003c38 <SYSVIEW_SendTaskInfo>
 8003c1c:	e000      	b.n	8003c20 <SYSVIEW_AddTask+0xb8>
    return;
 8003c1e:	bf00      	nop

}
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08006cd4 	.word	0x08006cd4
 8003c2c:	20012ea8 	.word	0x20012ea8
 8003c30:	08006cdc 	.word	0x08006cdc
 8003c34:	20012e08 	.word	0x20012e08

08003c38 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	2214      	movs	r2, #20
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 f9a8 	bl	8005fa4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fb53 	bl	8005318 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	@ 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c82:	4b24      	ldr	r3, [pc, #144]	@ (8003d14 <_DoInit+0x98>)
 8003c84:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a20      	ldr	r2, [pc, #128]	@ (8003d18 <_DoInit+0x9c>)
 8003c96:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a20      	ldr	r2, [pc, #128]	@ (8003d1c <_DoInit+0xa0>)
 8003c9c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ca4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a17      	ldr	r2, [pc, #92]	@ (8003d18 <_DoInit+0x9c>)
 8003cbc:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <_DoInit+0xa4>)
 8003cc2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3307      	adds	r3, #7
 8003ce0:	4a10      	ldr	r2, [pc, #64]	@ (8003d24 <_DoInit+0xa8>)
 8003ce2:	6810      	ldr	r0, [r2, #0]
 8003ce4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ce6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a0e      	ldr	r2, [pc, #56]	@ (8003d28 <_DoInit+0xac>)
 8003cee:	6810      	ldr	r0, [r2, #0]
 8003cf0:	6018      	str	r0, [r3, #0]
 8003cf2:	8891      	ldrh	r1, [r2, #4]
 8003cf4:	7992      	ldrb	r2, [r2, #6]
 8003cf6:	8099      	strh	r1, [r3, #4]
 8003cf8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003cfa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003d04:	f3bf 8f5f 	dmb	sy
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20012eac 	.word	0x20012eac
 8003d18:	08006d2c 	.word	0x08006d2c
 8003d1c:	20012f54 	.word	0x20012f54
 8003d20:	20013354 	.word	0x20013354
 8003d24:	08006d38 	.word	0x08006d38
 8003d28:	08006d3c 	.word	0x08006d3c

08003d2c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	@ 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d905      	bls.n	8003d5c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5a:	e007      	b.n	8003d6c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	69b9      	ldr	r1, [r7, #24]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	1acb      	subs	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bf28      	it	cs
 8003d7a:	4613      	movcs	r3, r2
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	bf28      	it	cs
 8003d86:	4613      	movcs	r3, r2
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f002 f966 	bl	800606a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	4413      	add	r3, r2
 8003da4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	4413      	add	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	4413      	add	r3, r2
 8003dbc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d101      	bne.n	8003dcc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dcc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1b2      	bne.n	8003d42 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d911      	bls.n	8003e2e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	6938      	ldr	r0, [r7, #16]
 8003e1a:	f002 f926 	bl	800606a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e1e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	441a      	add	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003e2c:	e01f      	b.n	8003e6e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	6938      	ldr	r0, [r7, #16]
 8003e42:	f002 f912 	bl	800606a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4413      	add	r3, r2
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6938      	ldr	r0, [r7, #16]
 8003e60:	f002 f903 	bl	800606a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e64:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	60da      	str	r2, [r3, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e76:	b480      	push	{r7}
 8003e78:	b087      	sub	sp, #28
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d808      	bhi.n	8003ea4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e004      	b.n	8003eae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003eae:	697b      	ldr	r3, [r7, #20]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	@ 0x30
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <SEGGER_RTT_ReadNoLock+0x1e>
 8003ed6:	f7ff fed1 	bl	8003c7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	3360      	adds	r3, #96	@ 0x60
 8003ee6:	4a37      	ldr	r2, [pc, #220]	@ (8003fc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d92b      	bls.n	8003f60 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	bf28      	it	cs
 8003f1a:	4613      	movcs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	4413      	add	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f2e:	f002 f89c 	bl	800606a <memcpy>
    NumBytesRead += NumBytesRem;
 8003f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4413      	add	r3, r2
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d101      	bne.n	8003f60 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bf28      	it	cs
 8003f70:	4613      	movcs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	4413      	add	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	6939      	ldr	r1, [r7, #16]
 8003f88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f8a:	f002 f86e 	bl	800606a <memcpy>
    NumBytesRead += NumBytesRem;
 8003f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	4413      	add	r3, r2
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	4413      	add	r3, r2
 8003fac:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fb8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3730      	adds	r7, #48	@ 0x30
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20012eac 	.word	0x20012eac

08003fc8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8004064 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d029      	beq.n	8004046 <SEGGER_RTT_WriteNoLock+0x7e>
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d82e      	bhi.n	8004054 <SEGGER_RTT_WriteNoLock+0x8c>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <SEGGER_RTT_WriteNoLock+0x38>
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d013      	beq.n	8004026 <SEGGER_RTT_WriteNoLock+0x5e>
 8003ffe:	e029      	b.n	8004054 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f7ff ff38 	bl	8003e76 <_GetAvailWriteSpace>
 8004006:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d202      	bcs.n	8004016 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004014:	e021      	b.n	800405a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f7ff fee1 	bl	8003de6 <_WriteNoCheck>
    break;
 8004024:	e019      	b.n	800405a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f7ff ff25 	bl	8003e76 <_GetAvailWriteSpace>
 800402c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4293      	cmp	r3, r2
 8004034:	bf28      	it	cs
 8004036:	4613      	movcs	r3, r2
 8004038:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	6978      	ldr	r0, [r7, #20]
 8004040:	f7ff fed1 	bl	8003de6 <_WriteNoCheck>
    break;
 8004044:	e009      	b.n	800405a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff fe6e 	bl	8003d2c <_WriteBlocking>
 8004050:	61f8      	str	r0, [r7, #28]
    break;
 8004052:	e002      	b.n	800405a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
    break;
 8004058:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800405a:	69fb      	ldr	r3, [r7, #28]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20012eac 	.word	0x20012eac

08004068 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <SEGGER_RTT_Write+0x48>)
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <SEGGER_RTT_Write+0x1e>
 8004082:	f7ff fdfb 	bl	8003c7c <_DoInit>
  SEGGER_RTT_LOCK();
 8004086:	f3ef 8311 	mrs	r3, BASEPRI
 800408a:	f04f 0120 	mov.w	r1, #32
 800408e:	f381 8811 	msr	BASEPRI, r1
 8004092:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ff95 	bl	8003fc8 <SEGGER_RTT_WriteNoLock>
 800409e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80040a6:	697b      	ldr	r3, [r7, #20]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20012eac 	.word	0x20012eac

080040b4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80040c2:	4b3d      	ldr	r3, [pc, #244]	@ (80041b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80040d0:	f7ff fdd4 	bl	8003c7c <_DoInit>
  SEGGER_RTT_LOCK();
 80040d4:	f3ef 8311 	mrs	r3, BASEPRI
 80040d8:	f04f 0120 	mov.w	r1, #32
 80040dc:	f381 8811 	msr	BASEPRI, r1
 80040e0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040e2:	4b35      	ldr	r3, [pc, #212]	@ (80041b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80040e4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80040ea:	6939      	ldr	r1, [r7, #16]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3304      	adds	r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3301      	adds	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	429a      	cmp	r2, r3
 8004110:	dbeb      	blt.n	80040ea <SEGGER_RTT_AllocUpBuffer+0x36>
 8004112:	e000      	b.n	8004116 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004114:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	429a      	cmp	r2, r3
 800411e:	da3f      	bge.n	80041a0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004120:	6939      	ldr	r1, [r7, #16]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	440b      	add	r3, r1
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	4613      	mov	r3, r2
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	3304      	adds	r3, #4
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800414a:	6939      	ldr	r1, [r7, #16]
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	3320      	adds	r3, #32
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800415e:	6939      	ldr	r1, [r7, #16]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	440b      	add	r3, r1
 800416c:	3328      	adds	r3, #40	@ 0x28
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004172:	6939      	ldr	r1, [r7, #16]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	3324      	adds	r3, #36	@ 0x24
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004186:	6939      	ldr	r1, [r7, #16]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	332c      	adds	r3, #44	@ 0x2c
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800419a:	f3bf 8f5f 	dmb	sy
 800419e:	e002      	b.n	80041a6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80041ac:	69fb      	ldr	r3, [r7, #28]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20012eac 	.word	0x20012eac

080041bc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80041ca:	4b33      	ldr	r3, [pc, #204]	@ (8004298 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80041d8:	f7ff fd50 	bl	8003c7c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80041de:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	461a      	mov	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d24d      	bcs.n	8004288 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80041ec:	f3ef 8311 	mrs	r3, BASEPRI
 80041f0:	f04f 0120 	mov.w	r1, #32
 80041f4:	f381 8811 	msr	BASEPRI, r1
 80041f8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d031      	beq.n	8004264 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004200:	6979      	ldr	r1, [r7, #20]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	440b      	add	r3, r1
 800420e:	3360      	adds	r3, #96	@ 0x60
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004214:	6979      	ldr	r1, [r7, #20]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	3364      	adds	r3, #100	@ 0x64
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	3368      	adds	r3, #104	@ 0x68
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800423c:	6979      	ldr	r1, [r7, #20]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4413      	add	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	440b      	add	r3, r1
 800424a:	3370      	adds	r3, #112	@ 0x70
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004250:	6979      	ldr	r1, [r7, #20]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	336c      	adds	r3, #108	@ 0x6c
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	3374      	adds	r3, #116	@ 0x74
 8004274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004276:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004278:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e002      	b.n	800428e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800428e:	69fb      	ldr	r3, [r7, #28]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20012eac 	.word	0x20012eac

0800429c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80042ac:	e002      	b.n	80042b4 <_EncodeStr+0x18>
    Len++;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3301      	adds	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f6      	bne.n	80042ae <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d901      	bls.n	80042cc <_EncodeStr+0x30>
    Len = Limit;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80042d0:	d806      	bhi.n	80042e0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	60fa      	str	r2, [r7, #12]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e011      	b.n	8004304 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	60fa      	str	r2, [r7, #12]
 80042e6:	22ff      	movs	r2, #255	@ 0xff
 80042e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	60fa      	str	r2, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	0a19      	lsrs	r1, r3, #8
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	60fa      	str	r2, [r7, #12]
 8004300:	b2ca      	uxtb	r2, r1
 8004302:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004308:	e00a      	b.n	8004320 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	1c53      	adds	r3, r2, #1
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	60f9      	str	r1, [r7, #12]
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	701a      	strb	r2, [r3, #0]
    n++;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3301      	adds	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d3f0      	bcc.n	800430a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004356:	4b35      	ldr	r3, [pc, #212]	@ (800442c <_HandleIncomingPacket+0xdc>)
 8004358:	7e1b      	ldrb	r3, [r3, #24]
 800435a:	4618      	mov	r0, r3
 800435c:	1cfb      	adds	r3, r7, #3
 800435e:	2201      	movs	r2, #1
 8004360:	4619      	mov	r1, r3
 8004362:	f7ff fdab 	bl	8003ebc <SEGGER_RTT_ReadNoLock>
 8004366:	4603      	mov	r3, r0
 8004368:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	dd59      	ble.n	8004424 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	2b80      	cmp	r3, #128	@ 0x80
 8004374:	d032      	beq.n	80043dc <_HandleIncomingPacket+0x8c>
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	dc42      	bgt.n	8004400 <_HandleIncomingPacket+0xb0>
 800437a:	2b07      	cmp	r3, #7
 800437c:	dc16      	bgt.n	80043ac <_HandleIncomingPacket+0x5c>
 800437e:	2b00      	cmp	r3, #0
 8004380:	dd3e      	ble.n	8004400 <_HandleIncomingPacket+0xb0>
 8004382:	3b01      	subs	r3, #1
 8004384:	2b06      	cmp	r3, #6
 8004386:	d83b      	bhi.n	8004400 <_HandleIncomingPacket+0xb0>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <_HandleIncomingPacket+0x40>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b3 	.word	0x080043b3
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043bf 	.word	0x080043bf
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80043ae:	d034      	beq.n	800441a <_HandleIncomingPacket+0xca>
 80043b0:	e026      	b.n	8004400 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80043b2:	f000 fe37 	bl	8005024 <SEGGER_SYSVIEW_Start>
      break;
 80043b6:	e035      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80043b8:	f000 feee 	bl	8005198 <SEGGER_SYSVIEW_Stop>
      break;
 80043bc:	e032      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80043be:	f001 f8c7 	bl	8005550 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80043c2:	e02f      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80043c4:	f001 f88c 	bl	80054e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80043c8:	e02c      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80043ca:	f000 ff0b 	bl	80051e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80043ce:	e029      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80043d0:	f001 faea 	bl	80059a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80043d4:	e026      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80043d6:	f001 fac9 	bl	800596c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80043da:	e023      	b.n	8004424 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043dc:	4b13      	ldr	r3, [pc, #76]	@ (800442c <_HandleIncomingPacket+0xdc>)
 80043de:	7e1b      	ldrb	r3, [r3, #24]
 80043e0:	4618      	mov	r0, r3
 80043e2:	1cfb      	adds	r3, r7, #3
 80043e4:	2201      	movs	r2, #1
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7ff fd68 	bl	8003ebc <SEGGER_RTT_ReadNoLock>
 80043ec:	4603      	mov	r3, r0
 80043ee:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	dd13      	ble.n	800441e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fa37 	bl	800586c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80043fe:	e00e      	b.n	800441e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	b25b      	sxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	da0c      	bge.n	8004422 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <_HandleIncomingPacket+0xdc>)
 800440a:	7e1b      	ldrb	r3, [r3, #24]
 800440c:	4618      	mov	r0, r3
 800440e:	1cfb      	adds	r3, r7, #3
 8004410:	2201      	movs	r2, #1
 8004412:	4619      	mov	r1, r3
 8004414:	f7ff fd52 	bl	8003ebc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004418:	e003      	b.n	8004422 <_HandleIncomingPacket+0xd2>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <_HandleIncomingPacket+0xd4>
      break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <_HandleIncomingPacket+0xd4>
      break;
 8004422:	bf00      	nop
    }
  }
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	2001436c 	.word	0x2001436c

08004430 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	@ 0x30
 8004434:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004436:	2301      	movs	r3, #1
 8004438:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	3301      	adds	r3, #1
 800443e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004444:	4b31      	ldr	r3, [pc, #196]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800444a:	e00b      	b.n	8004464 <_TrySendOverflowPacket+0x34>
 800444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444e:	b2da      	uxtb	r2, r3
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	1c59      	adds	r1, r3, #1
 8004454:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004456:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	09db      	lsrs	r3, r3, #7
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	2b7f      	cmp	r3, #127	@ 0x7f
 8004468:	d8f0      	bhi.n	800444c <_TrySendOverflowPacket+0x1c>
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004478:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800447a:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <_TrySendOverflowPacket+0xe0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004480:	4b22      	ldr	r3, [pc, #136]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	e00b      	b.n	80044ac <_TrySendOverflowPacket+0x7c>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	6279      	str	r1, [r7, #36]	@ 0x24
 800449e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	09db      	lsrs	r3, r3, #7
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80044b0:	d8f0      	bhi.n	8004494 <_TrySendOverflowPacket+0x64>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80044c2:	4b12      	ldr	r3, [pc, #72]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	4618      	mov	r0, r3
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	1d3b      	adds	r3, r7, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	f7fb fe7c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80044d8:	4603      	mov	r3, r0
 80044da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044e2:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80044e8:	4b08      	ldr	r3, [pc, #32]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e004      	b.n	8004500 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80044f6:	4b05      	ldr	r3, [pc, #20]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a03      	ldr	r2, [pc, #12]	@ (800450c <_TrySendOverflowPacket+0xdc>)
 80044fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004500:	693b      	ldr	r3, [r7, #16]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3730      	adds	r7, #48	@ 0x30
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	2001436c 	.word	0x2001436c
 8004510:	e0001004 	.word	0xe0001004

08004514 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	@ 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004520:	4b6c      	ldr	r3, [pc, #432]	@ (80046d4 <_SendPacket+0x1c0>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d010      	beq.n	800454a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004528:	4b6a      	ldr	r3, [pc, #424]	@ (80046d4 <_SendPacket+0x1c0>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a3 	beq.w	8004678 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004532:	4b68      	ldr	r3, [pc, #416]	@ (80046d4 <_SendPacket+0x1c0>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d109      	bne.n	800454e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800453a:	f7ff ff79 	bl	8004430 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800453e:	4b65      	ldr	r3, [pc, #404]	@ (80046d4 <_SendPacket+0x1c0>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	f040 809a 	bne.w	800467c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004548:	e001      	b.n	800454e <_SendPacket+0x3a>
    goto Send;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <_SendPacket+0x3c>
Send:
 800454e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b1f      	cmp	r3, #31
 8004554:	d809      	bhi.n	800456a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004556:	4b5f      	ldr	r3, [pc, #380]	@ (80046d4 <_SendPacket+0x1c0>)
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 808b 	bne.w	8004680 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b17      	cmp	r3, #23
 800456e:	d807      	bhi.n	8004580 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3b01      	subs	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e03d      	b.n	80045fc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b7f      	cmp	r3, #127	@ 0x7f
 800458c:	d912      	bls.n	80045b4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	09da      	lsrs	r2, r3, #7
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b01      	subs	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	3a01      	subs	r2, #1
 80045a6:	60fa      	str	r2, [r7, #12]
 80045a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e006      	b.n	80045c2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80045c6:	d912      	bls.n	80045ee <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	09da      	lsrs	r2, r3, #7
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	3a01      	subs	r2, #1
 80045e0:	60fa      	str	r2, [r7, #12]
 80045e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e006      	b.n	80045fc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045fc:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <_SendPacket+0x1c4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004602:	4b34      	ldr	r3, [pc, #208]	@ (80046d4 <_SendPacket+0x1c0>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	e00b      	b.n	800462e <_SendPacket+0x11a>
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004620:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	09db      	lsrs	r3, r3, #7
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2b7f      	cmp	r3, #127	@ 0x7f
 8004632:	d8f0      	bhi.n	8004616 <_SendPacket+0x102>
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	627a      	str	r2, [r7, #36]	@ 0x24
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004644:	4b23      	ldr	r3, [pc, #140]	@ (80046d4 <_SendPacket+0x1c0>)
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	4618      	mov	r0, r3
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	461a      	mov	r2, r3
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	f7fb fdbc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004658:	4603      	mov	r3, r0
 800465a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004662:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <_SendPacket+0x1c0>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	60d3      	str	r3, [r2, #12]
 8004668:	e00b      	b.n	8004682 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <_SendPacket+0x1c0>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <_SendPacket+0x1c0>)
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e004      	b.n	8004682 <_SendPacket+0x16e>
    goto SendDone;
 8004678:	bf00      	nop
 800467a:	e002      	b.n	8004682 <_SendPacket+0x16e>
      goto SendDone;
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <_SendPacket+0x16e>
      goto SendDone;
 8004680:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004682:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <_SendPacket+0x1c0>)
 8004684:	7e1b      	ldrb	r3, [r3, #24]
 8004686:	4619      	mov	r1, r3
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <_SendPacket+0x1c8>)
 800468a:	460b      	mov	r3, r1
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	440b      	add	r3, r1
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	336c      	adds	r3, #108	@ 0x6c
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <_SendPacket+0x1c0>)
 800469a:	7e1b      	ldrb	r3, [r3, #24]
 800469c:	4618      	mov	r0, r3
 800469e:	490f      	ldr	r1, [pc, #60]	@ (80046dc <_SendPacket+0x1c8>)
 80046a0:	4603      	mov	r3, r0
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4403      	add	r3, r0
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	440b      	add	r3, r1
 80046aa:	3370      	adds	r3, #112	@ 0x70
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d00b      	beq.n	80046ca <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80046b2:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <_SendPacket+0x1c0>)
 80046b4:	789b      	ldrb	r3, [r3, #2]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <_SendPacket+0x1c0>)
 80046bc:	2201      	movs	r2, #1
 80046be:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046c0:	f7ff fe46 	bl	8004350 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046c4:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <_SendPacket+0x1c0>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046ca:	bf00      	nop
 80046cc:	3728      	adds	r7, #40	@ 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2001436c 	.word	0x2001436c
 80046d8:	e0001004 	.word	0xe0001004
 80046dc:	20012eac 	.word	0x20012eac

080046e0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	2b80      	cmp	r3, #128	@ 0x80
 80046f8:	d80a      	bhi.n	8004710 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	1c59      	adds	r1, r3, #1
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6051      	str	r1, [r2, #4]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b80      	cmp	r3, #128	@ 0x80
 8004716:	d15a      	bne.n	80047ce <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	e00b      	b.n	8004752 <_StoreChar+0x72>
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1c59      	adds	r1, r3, #1
 8004742:	6279      	str	r1, [r7, #36]	@ 0x24
 8004744:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	09db      	lsrs	r3, r3, #7
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b7f      	cmp	r3, #127	@ 0x7f
 8004756:	d8f0      	bhi.n	800473a <_StoreChar+0x5a>
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	627a      	str	r2, [r7, #36]	@ 0x24
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e00b      	b.n	800478a <_StoreChar+0xaa>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	61f9      	str	r1, [r7, #28]
 800477c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	09db      	lsrs	r3, r3, #7
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b7f      	cmp	r3, #127	@ 0x7f
 800478e:	d8f0      	bhi.n	8004772 <_StoreChar+0x92>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	61fa      	str	r2, [r7, #28]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	221a      	movs	r2, #26
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff feb3 	bl	8004514 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fdbf 	bl	8004336 <_PreparePacket>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
  }
}
 80047ce:	bf00      	nop
 80047d0:	3728      	adds	r7, #40	@ 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	@ 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80047ea:	2301      	movs	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80047f2:	e007      	b.n	8004804 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	623b      	str	r3, [r7, #32]
    Width++;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d2f3      	bcs.n	80047f4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	d901      	bls.n	8004818 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d000      	beq.n	8004824 <_PrintUnsigned+0x4c>
 8004822:	e01f      	b.n	8004864 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01c      	beq.n	8004864 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <_PrintUnsigned+0x68>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <_PrintUnsigned+0x68>
        c = '0';
 800483a:	2330      	movs	r3, #48	@ 0x30
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e001      	b.n	8004844 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004840:	2320      	movs	r3, #32
 8004842:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004844:	e007      	b.n	8004856 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	3b01      	subs	r3, #1
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800484c:	7efb      	ldrb	r3, [r7, #27]
 800484e:	4619      	mov	r1, r3
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff45 	bl	80046e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <_PrintUnsigned+0x8c>
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	429a      	cmp	r2, r3
 8004862:	d3f0      	bcc.n	8004846 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d903      	bls.n	8004872 <_PrintUnsigned+0x9a>
      NumDigits--;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	e009      	b.n	8004886 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d200      	bcs.n	8004886 <_PrintUnsigned+0xae>
        break;
 8004884:	e005      	b.n	8004892 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004890:	e7e8      	b.n	8004864 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80048aa:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <_PrintUnsigned+0x128>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff ff13 	bl	80046e0 <_StoreChar>
    Digit /= Base;
 80048ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e3      	bne.n	8004892 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80048ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d011      	beq.n	80048f8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048da:	e006      	b.n	80048ea <_PrintUnsigned+0x112>
        FieldWidth--;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	3b01      	subs	r3, #1
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80048e2:	2120      	movs	r1, #32
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fefb 	bl	80046e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <_PrintUnsigned+0x120>
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d3f1      	bcc.n	80048dc <_PrintUnsigned+0x104>
      }
    }
  }
}
 80048f8:	bf00      	nop
 80048fa:	3728      	adds	r7, #40	@ 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	08006d7c 	.word	0x08006d7c

08004904 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	bfb8      	it	lt
 8004918:	425b      	neglt	r3, r3
 800491a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800491c:	2301      	movs	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004920:	e007      	b.n	8004932 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	fb92 f3f3 	sdiv	r3, r2, r3
 800492a:	613b      	str	r3, [r7, #16]
    Width++;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	3301      	adds	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	daf3      	bge.n	8004922 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	429a      	cmp	r2, r3
 8004940:	d901      	bls.n	8004946 <_PrintInt+0x42>
    Width = NumDigits;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <_PrintInt+0x5e>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	db04      	blt.n	800495c <_PrintInt+0x58>
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <_PrintInt+0x5e>
    FieldWidth--;
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	3b01      	subs	r3, #1
 8004960:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <_PrintInt+0x6e>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <_PrintInt+0x9c>
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d111      	bne.n	80049a0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004982:	e006      	b.n	8004992 <_PrintInt+0x8e>
        FieldWidth--;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	3b01      	subs	r3, #1
 8004988:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800498a:	2120      	movs	r1, #32
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff fea7 	bl	80046e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <_PrintInt+0x9c>
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3f1      	bcc.n	8004984 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da07      	bge.n	80049b6 <_PrintInt+0xb2>
    v = -v;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	425b      	negs	r3, r3
 80049aa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80049ac:	212d      	movs	r1, #45	@ 0x2d
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff fe96 	bl	80046e0 <_StoreChar>
 80049b4:	e008      	b.n	80049c8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80049c0:	212b      	movs	r1, #43	@ 0x2b
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7ff fe8c 	bl	80046e0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d019      	beq.n	8004a06 <_PrintInt+0x102>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d114      	bne.n	8004a06 <_PrintInt+0x102>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d111      	bne.n	8004a06 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049e8:	e006      	b.n	80049f8 <_PrintInt+0xf4>
        FieldWidth--;
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80049f0:	2130      	movs	r1, #48	@ 0x30
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fe74 	bl	80046e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <_PrintInt+0x102>
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3f1      	bcc.n	80049ea <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fedf 	bl	80047d8 <_PrintUnsigned>
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b098      	sub	sp, #96	@ 0x60
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a30:	f3ef 8311 	mrs	r3, BASEPRI
 8004a34:	f04f 0120 	mov.w	r1, #32
 8004a38:	f381 8811 	msr	BASEPRI, r1
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3e:	48b7      	ldr	r0, [pc, #732]	@ (8004d1c <_VPrintTarget+0x2f8>)
 8004a40:	f7ff fc79 	bl	8004336 <_PreparePacket>
 8004a44:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004a46:	4bb5      	ldr	r3, [pc, #724]	@ (8004d1c <_VPrintTarget+0x2f8>)
 8004a48:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8183 	beq.w	8004d7a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004a74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a78:	2b25      	cmp	r3, #37	@ 0x25
 8004a7a:	f040 8170 	bne.w	8004d5e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8004a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a92:	3b23      	subs	r3, #35	@ 0x23
 8004a94:	2b0d      	cmp	r3, #13
 8004a96:	d83f      	bhi.n	8004b18 <_VPrintTarget+0xf4>
 8004a98:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <_VPrintTarget+0x7c>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004b09 	.word	0x08004b09
 8004aa4:	08004b19 	.word	0x08004b19
 8004aa8:	08004b19 	.word	0x08004b19
 8004aac:	08004b19 	.word	0x08004b19
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004b19 	.word	0x08004b19
 8004abc:	08004b19 	.word	0x08004b19
 8004ac0:	08004af9 	.word	0x08004af9
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004b19 	.word	0x08004b19
 8004ad0:	08004b19 	.word	0x08004b19
 8004ad4:	08004ae9 	.word	0x08004ae9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e01a      	b.n	8004b1e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aea:	f043 0302 	orr.w	r3, r3, #2
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e012      	b.n	8004b1e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e00a      	b.n	8004b1e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0a:	f043 0308 	orr.w	r3, r3, #8
 8004b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e002      	b.n	8004b1e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b1c:	bf00      	nop
        }
      } while (v);
 8004b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1b0      	bne.n	8004a86 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004b24:	2300      	movs	r3, #0
 8004b26:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004b30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b34:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b36:	d912      	bls.n	8004b5e <_VPrintTarget+0x13a>
 8004b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b3c:	2b39      	cmp	r3, #57	@ 0x39
 8004b3e:	d80e      	bhi.n	8004b5e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	461a      	mov	r2, r3
 8004b52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b56:	4413      	add	r3, r2
 8004b58:	3b30      	subs	r3, #48	@ 0x30
 8004b5a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004b5c:	e7e4      	b.n	8004b28 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b70:	d11d      	bne.n	8004bae <_VPrintTarget+0x18a>
        sFormat++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004b80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b84:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b86:	d912      	bls.n	8004bae <_VPrintTarget+0x18a>
 8004b88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b8c:	2b39      	cmp	r3, #57	@ 0x39
 8004b8e:	d80e      	bhi.n	8004bae <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004b96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3b30      	subs	r3, #48	@ 0x30
 8004baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8004bac:	e7e4      	b.n	8004b78 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bba:	2b6c      	cmp	r3, #108	@ 0x6c
 8004bbc:	d003      	beq.n	8004bc6 <_VPrintTarget+0x1a2>
 8004bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bc2:	2b68      	cmp	r3, #104	@ 0x68
 8004bc4:	d107      	bne.n	8004bd6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004bd4:	e7ef      	b.n	8004bb6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004bd6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bda:	2b25      	cmp	r3, #37	@ 0x25
 8004bdc:	f000 80b3 	beq.w	8004d46 <_VPrintTarget+0x322>
 8004be0:	2b25      	cmp	r3, #37	@ 0x25
 8004be2:	f2c0 80b7 	blt.w	8004d54 <_VPrintTarget+0x330>
 8004be6:	2b78      	cmp	r3, #120	@ 0x78
 8004be8:	f300 80b4 	bgt.w	8004d54 <_VPrintTarget+0x330>
 8004bec:	2b58      	cmp	r3, #88	@ 0x58
 8004bee:	f2c0 80b1 	blt.w	8004d54 <_VPrintTarget+0x330>
 8004bf2:	3b58      	subs	r3, #88	@ 0x58
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	f200 80ad 	bhi.w	8004d54 <_VPrintTarget+0x330>
 8004bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <_VPrintTarget+0x1dc>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004cf7 	.word	0x08004cf7
 8004c04:	08004d55 	.word	0x08004d55
 8004c08:	08004d55 	.word	0x08004d55
 8004c0c:	08004d55 	.word	0x08004d55
 8004c10:	08004d55 	.word	0x08004d55
 8004c14:	08004d55 	.word	0x08004d55
 8004c18:	08004d55 	.word	0x08004d55
 8004c1c:	08004d55 	.word	0x08004d55
 8004c20:	08004d55 	.word	0x08004d55
 8004c24:	08004d55 	.word	0x08004d55
 8004c28:	08004d55 	.word	0x08004d55
 8004c2c:	08004c85 	.word	0x08004c85
 8004c30:	08004cab 	.word	0x08004cab
 8004c34:	08004d55 	.word	0x08004d55
 8004c38:	08004d55 	.word	0x08004d55
 8004c3c:	08004d55 	.word	0x08004d55
 8004c40:	08004d55 	.word	0x08004d55
 8004c44:	08004d55 	.word	0x08004d55
 8004c48:	08004d55 	.word	0x08004d55
 8004c4c:	08004d55 	.word	0x08004d55
 8004c50:	08004d55 	.word	0x08004d55
 8004c54:	08004d55 	.word	0x08004d55
 8004c58:	08004d55 	.word	0x08004d55
 8004c5c:	08004d55 	.word	0x08004d55
 8004c60:	08004d21 	.word	0x08004d21
 8004c64:	08004d55 	.word	0x08004d55
 8004c68:	08004d55 	.word	0x08004d55
 8004c6c:	08004d55 	.word	0x08004d55
 8004c70:	08004d55 	.word	0x08004d55
 8004c74:	08004cd1 	.word	0x08004cd1
 8004c78:	08004d55 	.word	0x08004d55
 8004c7c:	08004d55 	.word	0x08004d55
 8004c80:	08004cf7 	.word	0x08004cf7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8004c98:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fd1c 	bl	80046e0 <_StoreChar>
        break;
 8004ca8:	e055      	b.n	8004d56 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1d19      	adds	r1, r3, #4
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6011      	str	r1, [r2, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cb8:	f107 0014 	add.w	r0, r7, #20
 8004cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc6:	220a      	movs	r2, #10
 8004cc8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cca:	f7ff fe1b 	bl	8004904 <_PrintInt>
        break;
 8004cce:	e042      	b.n	8004d56 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6011      	str	r1, [r2, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ce0:	f107 0014 	add.w	r0, r7, #20
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cee:	220a      	movs	r2, #10
 8004cf0:	f7ff fd72 	bl	80047d8 <_PrintUnsigned>
        break;
 8004cf4:	e02f      	b.n	8004d56 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	1d19      	adds	r1, r3, #4
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6011      	str	r1, [r2, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004d04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d06:	f107 0014 	add.w	r0, r7, #20
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d14:	2210      	movs	r2, #16
 8004d16:	f7ff fd5f 	bl	80047d8 <_PrintUnsigned>
        break;
 8004d1a:	e01c      	b.n	8004d56 <_VPrintTarget+0x332>
 8004d1c:	2001439c 	.word	0x2001439c
      case 'p':
        v = va_arg(*pParamList, int);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1d19      	adds	r1, r3, #4
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004d2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d30:	f107 0014 	add.w	r0, r7, #20
 8004d34:	2300      	movs	r3, #0
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	2308      	movs	r3, #8
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	2210      	movs	r2, #16
 8004d40:	f7ff fd4a 	bl	80047d8 <_PrintUnsigned>
        break;
 8004d44:	e007      	b.n	8004d56 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004d46:	f107 0314 	add.w	r3, r7, #20
 8004d4a:	2125      	movs	r1, #37	@ 0x25
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fcc7 	bl	80046e0 <_StoreChar>
        break;
 8004d52:	e000      	b.n	8004d56 <_VPrintTarget+0x332>
      default:
        break;
 8004d54:	bf00      	nop
      }
      sFormat++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e007      	b.n	8004d6e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004d5e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004d62:	f107 0314 	add.w	r3, r7, #20
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fcb9 	bl	80046e0 <_StoreChar>
    }
  } while (*sFormat);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f47f ae72 	bne.w	8004a5c <_VPrintTarget+0x38>
 8004d78:	e000      	b.n	8004d7c <_VPrintTarget+0x358>
      break;
 8004d7a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d041      	beq.n	8004e06 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d92:	e00b      	b.n	8004dac <_VPrintTarget+0x388>
 8004d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	6439      	str	r1, [r7, #64]	@ 0x40
 8004d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da8:	09db      	lsrs	r3, r3, #7
 8004daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db0:	d8f0      	bhi.n	8004d94 <_VPrintTarget+0x370>
 8004db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004db8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dca:	e00b      	b.n	8004de4 <_VPrintTarget+0x3c0>
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de0:	09db      	lsrs	r3, r3, #7
 8004de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004de8:	d8f0      	bhi.n	8004dcc <_VPrintTarget+0x3a8>
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	69b9      	ldr	r1, [r7, #24]
 8004dfe:	221a      	movs	r2, #26
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fb87 	bl	8004514 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004e0c:	bf00      	nop
 8004e0e:	3758      	adds	r7, #88	@ 0x58
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e22:	2300      	movs	r3, #0
 8004e24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e28:	4917      	ldr	r1, [pc, #92]	@ (8004e88 <SEGGER_SYSVIEW_Init+0x74>)
 8004e2a:	4818      	ldr	r0, [pc, #96]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x78>)
 8004e2c:	f7ff f942 	bl	80040b4 <SEGGER_RTT_AllocUpBuffer>
 8004e30:	4603      	mov	r3, r0
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	4b16      	ldr	r3, [pc, #88]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e38:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3a:	785a      	ldrb	r2, [r3, #1]
 8004e3c:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e40:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e42:	7e1b      	ldrb	r3, [r3, #24]
 8004e44:	4618      	mov	r0, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <SEGGER_SYSVIEW_Init+0x80>)
 8004e4e:	490f      	ldr	r1, [pc, #60]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x78>)
 8004e50:	f7ff f9b4 	bl	80041bc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e54:	4b0e      	ldr	r3, [pc, #56]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <SEGGER_SYSVIEW_Init+0x84>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e62:	4a0b      	ldr	r2, [pc, #44]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e68:	4a09      	ldr	r2, [pc, #36]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e6e:	4a08      	ldr	r2, [pc, #32]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e74:	4a06      	ldr	r2, [pc, #24]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e7a:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20013364 	.word	0x20013364
 8004e8c:	08006d44 	.word	0x08006d44
 8004e90:	2001436c 	.word	0x2001436c
 8004e94:	20014364 	.word	0x20014364
 8004e98:	e0001004 	.word	0xe0001004

08004e9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ea4:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6113      	str	r3, [r2, #16]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	2001436c 	.word	0x2001436c

08004ebc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec8:	f04f 0120 	mov.w	r1, #32
 8004ecc:	f381 8811 	msr	BASEPRI, r1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4808      	ldr	r0, [pc, #32]	@ (8004ef4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ed4:	f7ff fa2f 	bl	8004336 <_PreparePacket>
 8004ed8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68b8      	ldr	r0, [r7, #8]
 8004ee0:	f7ff fb18 	bl	8004514 <_SendPacket>
  RECORD_END();
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f383 8811 	msr	BASEPRI, r3
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	2001439c 	.word	0x2001439c

08004ef8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f02:	f3ef 8311 	mrs	r3, BASEPRI
 8004f06:	f04f 0120 	mov.w	r1, #32
 8004f0a:	f381 8811 	msr	BASEPRI, r1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	4816      	ldr	r0, [pc, #88]	@ (8004f6c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004f12:	f7ff fa10 	bl	8004336 <_PreparePacket>
 8004f16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e00b      	b.n	8004f3e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	1c59      	adds	r1, r3, #1
 8004f2e:	61f9      	str	r1, [r7, #28]
 8004f30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	09db      	lsrs	r3, r3, #7
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f42:	d8f0      	bhi.n	8004f26 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	61fa      	str	r2, [r7, #28]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	6938      	ldr	r0, [r7, #16]
 8004f5a:	f7ff fadb 	bl	8004514 <_SendPacket>
  RECORD_END();
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f383 8811 	msr	BASEPRI, r3
}
 8004f64:	bf00      	nop
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	2001439c 	.word	0x2001439c

08004f70 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	@ 0x30
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	f04f 0120 	mov.w	r1, #32
 8004f84:	f381 8811 	msr	BASEPRI, r1
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	4825      	ldr	r0, [pc, #148]	@ (8005020 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f8c:	f7ff f9d3 	bl	8004336 <_PreparePacket>
 8004f90:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f9e:	e00b      	b.n	8004fb8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004faa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	09db      	lsrs	r3, r3, #7
 8004fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fbc:	d8f0      	bhi.n	8004fa0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	e00b      	b.n	8004ff0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fe2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	09db      	lsrs	r3, r3, #7
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff4:	d8f0      	bhi.n	8004fd8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	6979      	ldr	r1, [r7, #20]
 800500a:	69b8      	ldr	r0, [r7, #24]
 800500c:	f7ff fa82 	bl	8004514 <_SendPacket>
  RECORD_END();
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f383 8811 	msr	BASEPRI, r3
}
 8005016:	bf00      	nop
 8005018:	3730      	adds	r7, #48	@ 0x30
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2001439c 	.word	0x2001439c

08005024 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b08c      	sub	sp, #48	@ 0x30
 8005028:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800502a:	4b58      	ldr	r3, [pc, #352]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005030:	f3ef 8311 	mrs	r3, BASEPRI
 8005034:	f04f 0120 	mov.w	r1, #32
 8005038:	f381 8811 	msr	BASEPRI, r1
 800503c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800503e:	4b53      	ldr	r3, [pc, #332]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	220a      	movs	r2, #10
 8005044:	4952      	ldr	r1, [pc, #328]	@ (8005190 <SEGGER_SYSVIEW_Start+0x16c>)
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb f8c2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005052:	200a      	movs	r0, #10
 8005054:	f7ff ff32 	bl	8004ebc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005058:	f3ef 8311 	mrs	r3, BASEPRI
 800505c:	f04f 0120 	mov.w	r1, #32
 8005060:	f381 8811 	msr	BASEPRI, r1
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	484b      	ldr	r0, [pc, #300]	@ (8005194 <SEGGER_SYSVIEW_Start+0x170>)
 8005068:	f7ff f965 	bl	8004336 <_PreparePacket>
 800506c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005076:	4b45      	ldr	r3, [pc, #276]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507c:	e00b      	b.n	8005096 <SEGGER_SYSVIEW_Start+0x72>
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	b2da      	uxtb	r2, r3
 8005082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	2b7f      	cmp	r3, #127	@ 0x7f
 800509a:	d8f0      	bhi.n	800507e <SEGGER_SYSVIEW_Start+0x5a>
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b0:	4b36      	ldr	r3, [pc, #216]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	e00b      	b.n	80050d0 <SEGGER_SYSVIEW_Start+0xac>
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	1c59      	adds	r1, r3, #1
 80050c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80050c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	09db      	lsrs	r3, r3, #7
 80050ce:	623b      	str	r3, [r7, #32]
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d4:	d8f0      	bhi.n	80050b8 <SEGGER_SYSVIEW_Start+0x94>
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	627a      	str	r2, [r7, #36]	@ 0x24
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	4b28      	ldr	r3, [pc, #160]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e00b      	b.n	800510a <SEGGER_SYSVIEW_Start+0xe6>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	61f9      	str	r1, [r7, #28]
 80050fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	09db      	lsrs	r3, r3, #7
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b7f      	cmp	r3, #127	@ 0x7f
 800510e:	d8f0      	bhi.n	80050f2 <SEGGER_SYSVIEW_Start+0xce>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	61fa      	str	r2, [r7, #28]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e00b      	b.n	8005142 <SEGGER_SYSVIEW_Start+0x11e>
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	1c59      	adds	r1, r3, #1
 8005132:	6179      	str	r1, [r7, #20]
 8005134:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	09db      	lsrs	r3, r3, #7
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b7f      	cmp	r3, #127	@ 0x7f
 8005146:	d8f0      	bhi.n	800512a <SEGGER_SYSVIEW_Start+0x106>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	617a      	str	r2, [r7, #20]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005158:	2218      	movs	r2, #24
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff f9d9 	bl	8004514 <_SendPacket>
      RECORD_END();
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005168:	4b08      	ldr	r3, [pc, #32]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <SEGGER_SYSVIEW_Start+0x168>)
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005176:	f000 f9eb 	bl	8005550 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800517a:	f000 f9b1 	bl	80054e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800517e:	f000 fc13 	bl	80059a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005182:	bf00      	nop
 8005184:	3730      	adds	r7, #48	@ 0x30
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2001436c 	.word	0x2001436c
 8005190:	08006d70 	.word	0x08006d70
 8005194:	2001439c 	.word	0x2001439c

08005198 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800519e:	f3ef 8311 	mrs	r3, BASEPRI
 80051a2:	f04f 0120 	mov.w	r1, #32
 80051a6:	f381 8811 	msr	BASEPRI, r1
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	480b      	ldr	r0, [pc, #44]	@ (80051dc <SEGGER_SYSVIEW_Stop+0x44>)
 80051ae:	f7ff f8c2 	bl	8004336 <_PreparePacket>
 80051b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80051b4:	4b0a      	ldr	r3, [pc, #40]	@ (80051e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051bc:	220b      	movs	r2, #11
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6838      	ldr	r0, [r7, #0]
 80051c2:	f7ff f9a7 	bl	8004514 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051c6:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f383 8811 	msr	BASEPRI, r3
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	2001439c 	.word	0x2001439c
 80051e0:	2001436c 	.word	0x2001436c

080051e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	@ 0x30
 80051e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051ea:	f3ef 8311 	mrs	r3, BASEPRI
 80051ee:	f04f 0120 	mov.w	r1, #32
 80051f2:	f381 8811 	msr	BASEPRI, r1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	4845      	ldr	r0, [pc, #276]	@ (8005310 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051fa:	f7ff f89c 	bl	8004336 <_PreparePacket>
 80051fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005208:	4b42      	ldr	r3, [pc, #264]	@ (8005314 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520e:	e00b      	b.n	8005228 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	b2da      	uxtb	r2, r3
 8005214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800521a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	09db      	lsrs	r3, r3, #7
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	2b7f      	cmp	r3, #127	@ 0x7f
 800522c:	d8f0      	bhi.n	8005210 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
 8005242:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	e00b      	b.n	8005262 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	6279      	str	r1, [r7, #36]	@ 0x24
 8005254:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	09db      	lsrs	r3, r3, #7
 8005260:	623b      	str	r3, [r7, #32]
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	2b7f      	cmp	r3, #127	@ 0x7f
 8005266:	d8f0      	bhi.n	800524a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	627a      	str	r2, [r7, #36]	@ 0x24
 800526e:	6a3a      	ldr	r2, [r7, #32]
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	4b25      	ldr	r3, [pc, #148]	@ (8005314 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e00b      	b.n	800529c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	1c59      	adds	r1, r3, #1
 800528c:	61f9      	str	r1, [r7, #28]
 800528e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	09db      	lsrs	r3, r3, #7
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b7f      	cmp	r3, #127	@ 0x7f
 80052a0:	d8f0      	bhi.n	8005284 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	61fa      	str	r2, [r7, #28]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	e00b      	b.n	80052d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	6179      	str	r1, [r7, #20]
 80052c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	617a      	str	r2, [r7, #20]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052ea:	2218      	movs	r2, #24
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	68b8      	ldr	r0, [r7, #8]
 80052f0:	f7ff f910 	bl	8004514 <_SendPacket>
  RECORD_END();
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005302:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	4798      	blx	r3
  }
}
 8005308:	bf00      	nop
 800530a:	3730      	adds	r7, #48	@ 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	2001439c 	.word	0x2001439c
 8005314:	2001436c 	.word	0x2001436c

08005318 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b092      	sub	sp, #72	@ 0x48
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005320:	f3ef 8311 	mrs	r3, BASEPRI
 8005324:	f04f 0120 	mov.w	r1, #32
 8005328:	f381 8811 	msr	BASEPRI, r1
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	486a      	ldr	r0, [pc, #424]	@ (80054d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005330:	f7ff f801 	bl	8004336 <_PreparePacket>
 8005334:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	647b      	str	r3, [r7, #68]	@ 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b66      	ldr	r3, [pc, #408]	@ (80054dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	643b      	str	r3, [r7, #64]	@ 0x40
 800534a:	e00b      	b.n	8005364 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800534c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534e:	b2da      	uxtb	r2, r3
 8005350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	6479      	str	r1, [r7, #68]	@ 0x44
 8005356:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005360:	09db      	lsrs	r3, r3, #7
 8005362:	643b      	str	r3, [r7, #64]	@ 0x40
 8005364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005366:	2b7f      	cmp	r3, #127	@ 0x7f
 8005368:	d8f0      	bhi.n	800534c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800536a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005370:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005384:	e00b      	b.n	800539e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005388:	b2da      	uxtb	r2, r3
 800538a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538c:	1c59      	adds	r1, r3, #1
 800538e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005390:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	09db      	lsrs	r3, r3, #7
 800539c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80053a2:	d8f0      	bhi.n	8005386 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	4619      	mov	r1, r3
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7fe ff6d 	bl	800429c <_EncodeStr>
 80053c2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053c4:	2209      	movs	r2, #9
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	6938      	ldr	r0, [r7, #16]
 80053ca:	f7ff f8a3 	bl	8004514 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b40      	ldr	r3, [pc, #256]	@ (80054dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e2:	e00b      	b.n	80053fc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	6379      	str	r1, [r7, #52]	@ 0x34
 80053ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	09db      	lsrs	r3, r3, #7
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005400:	d8f0      	bhi.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	637a      	str	r2, [r7, #52]	@ 0x34
 8005408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541c:	e00b      	b.n	8005436 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	b2da      	uxtb	r2, r3
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	1c59      	adds	r1, r3, #1
 8005426:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005428:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	09db      	lsrs	r3, r3, #7
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	2b7f      	cmp	r3, #127	@ 0x7f
 800543a:	d8f0      	bhi.n	800541e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	e00b      	b.n	8005470 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	6279      	str	r1, [r7, #36]	@ 0x24
 8005462:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	09db      	lsrs	r3, r3, #7
 800546e:	623b      	str	r3, [r7, #32]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b7f      	cmp	r3, #127	@ 0x7f
 8005474:	d8f0      	bhi.n	8005458 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	627a      	str	r2, [r7, #36]	@ 0x24
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e00b      	b.n	80054a8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	61f9      	str	r1, [r7, #28]
 800549a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	09db      	lsrs	r3, r3, #7
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80054ac:	d8f0      	bhi.n	8005490 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	61fa      	str	r2, [r7, #28]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054be:	2215      	movs	r2, #21
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	6938      	ldr	r0, [r7, #16]
 80054c4:	f7ff f826 	bl	8004514 <_SendPacket>
  RECORD_END();
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
 80054d0:	3748      	adds	r7, #72	@ 0x48
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	2001439c 	.word	0x2001439c
 80054dc:	2001436c 	.word	0x2001436c

080054e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054e4:	4b07      	ldr	r3, [pc, #28]	@ (8005504 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054f6:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4798      	blx	r3
  }
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	2001436c 	.word	0x2001436c

08005508 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005510:	f3ef 8311 	mrs	r3, BASEPRI
 8005514:	f04f 0120 	mov.w	r1, #32
 8005518:	f381 8811 	msr	BASEPRI, r1
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	480b      	ldr	r0, [pc, #44]	@ (800554c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005520:	f7fe ff09 	bl	8004336 <_PreparePacket>
 8005524:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005526:	2280      	movs	r2, #128	@ 0x80
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	6938      	ldr	r0, [r7, #16]
 800552c:	f7fe feb6 	bl	800429c <_EncodeStr>
 8005530:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005532:	220e      	movs	r2, #14
 8005534:	68f9      	ldr	r1, [r7, #12]
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f7fe ffec 	bl	8004514 <_SendPacket>
  RECORD_END();
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f383 8811 	msr	BASEPRI, r3
}
 8005542:	bf00      	nop
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	2001439c 	.word	0x2001439c

08005550 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005556:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01a      	beq.n	8005594 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800555e:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005568:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4798      	blx	r3
 8005570:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005574:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	000a      	movs	r2, r1
 8005584:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005586:	4613      	mov	r3, r2
 8005588:	461a      	mov	r2, r3
 800558a:	4621      	mov	r1, r4
 800558c:	200d      	movs	r0, #13
 800558e:	f7ff fcef 	bl	8004f70 <SEGGER_SYSVIEW_RecordU32x2>
 8005592:	e006      	b.n	80055a2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005594:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4619      	mov	r1, r3
 800559a:	200c      	movs	r0, #12
 800559c:	f7ff fcac 	bl	8004ef8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}
 80055aa:	bf00      	nop
 80055ac:	2001436c 	.word	0x2001436c
 80055b0:	e0001004 	.word	0xe0001004

080055b4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055ba:	f3ef 8311 	mrs	r3, BASEPRI
 80055be:	f04f 0120 	mov.w	r1, #32
 80055c2:	f381 8811 	msr	BASEPRI, r1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	4819      	ldr	r0, [pc, #100]	@ (8005630 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055ca:	f7fe feb4 	bl	8004336 <_PreparePacket>
 80055ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055d4:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055dc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e00b      	b.n	8005600 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	6179      	str	r1, [r7, #20]
 80055f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	09db      	lsrs	r3, r3, #7
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b7f      	cmp	r3, #127	@ 0x7f
 8005604:	d8f0      	bhi.n	80055e8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	617a      	str	r2, [r7, #20]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005616:	2202      	movs	r2, #2
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	68b8      	ldr	r0, [r7, #8]
 800561c:	f7fe ff7a 	bl	8004514 <_SendPacket>
  RECORD_END();
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f383 8811 	msr	BASEPRI, r3
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2001439c 	.word	0x2001439c
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800563e:	f3ef 8311 	mrs	r3, BASEPRI
 8005642:	f04f 0120 	mov.w	r1, #32
 8005646:	f381 8811 	msr	BASEPRI, r1
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	4807      	ldr	r0, [pc, #28]	@ (800566c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800564e:	f7fe fe72 	bl	8004336 <_PreparePacket>
 8005652:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005654:	2203      	movs	r2, #3
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6838      	ldr	r0, [r7, #0]
 800565a:	f7fe ff5b 	bl	8004514 <_SendPacket>
  RECORD_END();
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f383 8811 	msr	BASEPRI, r3
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	2001439c 	.word	0x2001439c

08005670 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005676:	f3ef 8311 	mrs	r3, BASEPRI
 800567a:	f04f 0120 	mov.w	r1, #32
 800567e:	f381 8811 	msr	BASEPRI, r1
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	4807      	ldr	r0, [pc, #28]	@ (80056a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005686:	f7fe fe56 	bl	8004336 <_PreparePacket>
 800568a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800568c:	2212      	movs	r2, #18
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6838      	ldr	r0, [r7, #0]
 8005692:	f7fe ff3f 	bl	8004514 <_SendPacket>
  RECORD_END();
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f383 8811 	msr	BASEPRI, r3
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	2001439c 	.word	0x2001439c

080056a8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	f04f 0120 	mov.w	r1, #32
 80056b6:	f381 8811 	msr	BASEPRI, r1
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	4807      	ldr	r0, [pc, #28]	@ (80056dc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056be:	f7fe fe3a 	bl	8004336 <_PreparePacket>
 80056c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056c4:	2211      	movs	r2, #17
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f7fe ff23 	bl	8004514 <_SendPacket>
  RECORD_END();
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f383 8811 	msr	BASEPRI, r3
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	2001439c 	.word	0x2001439c

080056e0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056e8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ec:	f04f 0120 	mov.w	r1, #32
 80056f0:	f381 8811 	msr	BASEPRI, r1
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	4819      	ldr	r0, [pc, #100]	@ (800575c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80056f8:	f7fe fe1d 	bl	8004336 <_PreparePacket>
 80056fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005702:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	e00b      	b.n	800572e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	61f9      	str	r1, [r7, #28]
 8005720:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b7f      	cmp	r3, #127	@ 0x7f
 8005732:	d8f0      	bhi.n	8005716 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	61fa      	str	r2, [r7, #28]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005744:	2208      	movs	r2, #8
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	6938      	ldr	r0, [r7, #16]
 800574a:	f7fe fee3 	bl	8004514 <_SendPacket>
  RECORD_END();
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f383 8811 	msr	BASEPRI, r3
}
 8005754:	bf00      	nop
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	2001439c 	.word	0x2001439c
 8005760:	2001436c 	.word	0x2001436c

08005764 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800576c:	f3ef 8311 	mrs	r3, BASEPRI
 8005770:	f04f 0120 	mov.w	r1, #32
 8005774:	f381 8811 	msr	BASEPRI, r1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	4819      	ldr	r0, [pc, #100]	@ (80057e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800577c:	f7fe fddb 	bl	8004336 <_PreparePacket>
 8005780:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005786:	4b17      	ldr	r3, [pc, #92]	@ (80057e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e00b      	b.n	80057b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	61f9      	str	r1, [r7, #28]
 80057a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b6:	d8f0      	bhi.n	800579a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	61fa      	str	r2, [r7, #28]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057c8:	2204      	movs	r2, #4
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	6938      	ldr	r0, [r7, #16]
 80057ce:	f7fe fea1 	bl	8004514 <_SendPacket>
  RECORD_END();
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f383 8811 	msr	BASEPRI, r3
}
 80057d8:	bf00      	nop
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	2001439c 	.word	0x2001439c
 80057e4:	2001436c 	.word	0x2001436c

080057e8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057f0:	f3ef 8311 	mrs	r3, BASEPRI
 80057f4:	f04f 0120 	mov.w	r1, #32
 80057f8:	f381 8811 	msr	BASEPRI, r1
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	4819      	ldr	r0, [pc, #100]	@ (8005864 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005800:	f7fe fd99 	bl	8004336 <_PreparePacket>
 8005804:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800580a:	4b17      	ldr	r3, [pc, #92]	@ (8005868 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	e00b      	b.n	8005836 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	1c59      	adds	r1, r3, #1
 8005826:	61f9      	str	r1, [r7, #28]
 8005828:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	09db      	lsrs	r3, r3, #7
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b7f      	cmp	r3, #127	@ 0x7f
 800583a:	d8f0      	bhi.n	800581e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	61fa      	str	r2, [r7, #28]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800584c:	2206      	movs	r2, #6
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6938      	ldr	r0, [r7, #16]
 8005852:	f7fe fe5f 	bl	8004514 <_SendPacket>
  RECORD_END();
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f383 8811 	msr	BASEPRI, r3
}
 800585c:	bf00      	nop
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	2001439c 	.word	0x2001439c
 8005868:	2001436c 	.word	0x2001436c

0800586c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	@ 0x30
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005876:	4b3b      	ldr	r3, [pc, #236]	@ (8005964 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d06d      	beq.n	800595a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800587e:	4b39      	ldr	r3, [pc, #228]	@ (8005964 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005884:	2300      	movs	r3, #0
 8005886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005888:	e008      	b.n	800589c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	3301      	adds	r3, #1
 800589a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d3f2      	bcc.n	800588a <SEGGER_SYSVIEW_SendModule+0x1e>
 80058a4:	e000      	b.n	80058a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d055      	beq.n	800595a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ae:	f3ef 8311 	mrs	r3, BASEPRI
 80058b2:	f04f 0120 	mov.w	r1, #32
 80058b6:	f381 8811 	msr	BASEPRI, r1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	482a      	ldr	r0, [pc, #168]	@ (8005968 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058be:	f7fe fd3a 	bl	8004336 <_PreparePacket>
 80058c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	e00b      	b.n	80058ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	6279      	str	r1, [r7, #36]	@ 0x24
 80058dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ee:	d8f0      	bhi.n	80058d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	e00b      	b.n	8005924 <SEGGER_SYSVIEW_SendModule+0xb8>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	b2da      	uxtb	r2, r3
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	61f9      	str	r1, [r7, #28]
 8005916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	09db      	lsrs	r3, r3, #7
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b7f      	cmp	r3, #127	@ 0x7f
 8005928:	d8f0      	bhi.n	800590c <SEGGER_SYSVIEW_SendModule+0xa0>
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	61fa      	str	r2, [r7, #28]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800593a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2280      	movs	r2, #128	@ 0x80
 8005940:	4619      	mov	r1, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fe fcaa 	bl	800429c <_EncodeStr>
 8005948:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800594a:	2216      	movs	r2, #22
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	6938      	ldr	r0, [r7, #16]
 8005950:	f7fe fde0 	bl	8004514 <_SendPacket>
      RECORD_END();
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800595a:	bf00      	nop
 800595c:	3730      	adds	r7, #48	@ 0x30
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20014394 	.word	0x20014394
 8005968:	2001439c 	.word	0x2001439c

0800596c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005972:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00f      	beq.n	800599a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800597a:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f2      	bne.n	8005980 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20014394 	.word	0x20014394

080059a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059ae:	f3ef 8311 	mrs	r3, BASEPRI
 80059b2:	f04f 0120 	mov.w	r1, #32
 80059b6:	f381 8811 	msr	BASEPRI, r1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	4817      	ldr	r0, [pc, #92]	@ (8005a1c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059be:	f7fe fcba 	bl	8004336 <_PreparePacket>
 80059c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	e00b      	b.n	80059ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	1c59      	adds	r1, r3, #1
 80059dc:	6179      	str	r1, [r7, #20]
 80059de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	09db      	lsrs	r3, r3, #7
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80059f0:	d8f0      	bhi.n	80059d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	617a      	str	r2, [r7, #20]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a02:	221b      	movs	r2, #27
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	68b8      	ldr	r0, [r7, #8]
 8005a08:	f7fe fd84 	bl	8004514 <_SendPacket>
  RECORD_END();
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f383 8811 	msr	BASEPRI, r3
}
 8005a12:	bf00      	nop
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	2001439c 	.word	0x2001439c
 8005a20:	20014398 	.word	0x20014398

08005a24 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a24:	b40f      	push	{r0, r1, r2, r3}
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	461a      	mov	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	6938      	ldr	r0, [r7, #16]
 8005a3a:	f7fe fff3 	bl	8004a24 <_VPrintTarget>
  va_end(ParamList);
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a48:	b004      	add	sp, #16
 8005a4a:	4770      	bx	lr

08005a4c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a54:	f3ef 8311 	mrs	r3, BASEPRI
 8005a58:	f04f 0120 	mov.w	r1, #32
 8005a5c:	f381 8811 	msr	BASEPRI, r1
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	4827      	ldr	r0, [pc, #156]	@ (8005b00 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a64:	f7fe fc67 	bl	8004336 <_PreparePacket>
 8005a68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a6a:	2280      	movs	r2, #128	@ 0x80
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	6938      	ldr	r0, [r7, #16]
 8005a70:	f7fe fc14 	bl	800429c <_EncodeStr>
 8005a74:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	e00b      	b.n	8005a98 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	09db      	lsrs	r3, r3, #7
 8005a96:	623b      	str	r3, [r7, #32]
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a9c:	d8f0      	bhi.n	8005a80 <SEGGER_SYSVIEW_Warn+0x34>
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e00b      	b.n	8005ad0 <SEGGER_SYSVIEW_Warn+0x84>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	61f9      	str	r1, [r7, #28]
 8005ac2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	09db      	lsrs	r3, r3, #7
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ad4:	d8f0      	bhi.n	8005ab8 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	61fa      	str	r2, [r7, #28]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ae6:	221a      	movs	r2, #26
 8005ae8:	68f9      	ldr	r1, [r7, #12]
 8005aea:	6938      	ldr	r0, [r7, #16]
 8005aec:	f7fe fd12 	bl	8004514 <_SendPacket>
  RECORD_END();
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f383 8811 	msr	BASEPRI, r3
}
 8005af6:	bf00      	nop
 8005af8:	3728      	adds	r7, #40	@ 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2001439c 	.word	0x2001439c

08005b04 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	2000      	movs	r0, #0
 8005b18:	f7fe faa6 	bl	8004068 <SEGGER_RTT_Write>
  return len;
 8005b1c:	683b      	ldr	r3, [r7, #0]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <std>:
 8005b28:	2300      	movs	r3, #0
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b36:	6083      	str	r3, [r0, #8]
 8005b38:	8181      	strh	r1, [r0, #12]
 8005b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b3c:	81c2      	strh	r2, [r0, #14]
 8005b3e:	6183      	str	r3, [r0, #24]
 8005b40:	4619      	mov	r1, r3
 8005b42:	2208      	movs	r2, #8
 8005b44:	305c      	adds	r0, #92	@ 0x5c
 8005b46:	f000 fa2d 	bl	8005fa4 <memset>
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <std+0x58>)
 8005b4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <std+0x5c>)
 8005b50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <std+0x60>)
 8005b54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <std+0x64>)
 8005b58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x68>)
 8005b5c:	6224      	str	r4, [r4, #32]
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	d006      	beq.n	8005b70 <std+0x48>
 8005b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b66:	4294      	cmp	r4, r2
 8005b68:	d002      	beq.n	8005b70 <std+0x48>
 8005b6a:	33d0      	adds	r3, #208	@ 0xd0
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	d105      	bne.n	8005b7c <std+0x54>
 8005b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b78:	f000 ba74 	b.w	8006064 <__retarget_lock_init_recursive>
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005dd5 	.word	0x08005dd5
 8005b84:	08005df7 	.word	0x08005df7
 8005b88:	08005e2f 	.word	0x08005e2f
 8005b8c:	08005e53 	.word	0x08005e53
 8005b90:	20014480 	.word	0x20014480

08005b94 <stdio_exit_handler>:
 8005b94:	4a02      	ldr	r2, [pc, #8]	@ (8005ba0 <stdio_exit_handler+0xc>)
 8005b96:	4903      	ldr	r1, [pc, #12]	@ (8005ba4 <stdio_exit_handler+0x10>)
 8005b98:	4803      	ldr	r0, [pc, #12]	@ (8005ba8 <stdio_exit_handler+0x14>)
 8005b9a:	f000 b869 	b.w	8005c70 <_fwalk_sglue>
 8005b9e:	bf00      	nop
 8005ba0:	20000010 	.word	0x20000010
 8005ba4:	08006949 	.word	0x08006949
 8005ba8:	20000020 	.word	0x20000020

08005bac <cleanup_stdio>:
 8005bac:	6841      	ldr	r1, [r0, #4]
 8005bae:	4b0c      	ldr	r3, [pc, #48]	@ (8005be0 <cleanup_stdio+0x34>)
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	d001      	beq.n	8005bbc <cleanup_stdio+0x10>
 8005bb8:	f000 fec6 	bl	8006948 <_fflush_r>
 8005bbc:	68a1      	ldr	r1, [r4, #8]
 8005bbe:	4b09      	ldr	r3, [pc, #36]	@ (8005be4 <cleanup_stdio+0x38>)
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	d002      	beq.n	8005bca <cleanup_stdio+0x1e>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 febf 	bl	8006948 <_fflush_r>
 8005bca:	68e1      	ldr	r1, [r4, #12]
 8005bcc:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <cleanup_stdio+0x3c>)
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	d004      	beq.n	8005bdc <cleanup_stdio+0x30>
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd8:	f000 beb6 	b.w	8006948 <_fflush_r>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	bf00      	nop
 8005be0:	20014480 	.word	0x20014480
 8005be4:	200144e8 	.word	0x200144e8
 8005be8:	20014550 	.word	0x20014550

08005bec <global_stdio_init.part.0>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <global_stdio_init.part.0+0x30>)
 8005bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8005c20 <global_stdio_init.part.0+0x34>)
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8005c24 <global_stdio_init.part.0+0x38>)
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	f7ff ff94 	bl	8005b28 <std>
 8005c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c04:	2201      	movs	r2, #1
 8005c06:	2109      	movs	r1, #9
 8005c08:	f7ff ff8e 	bl	8005b28 <std>
 8005c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c10:	2202      	movs	r2, #2
 8005c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c16:	2112      	movs	r1, #18
 8005c18:	f7ff bf86 	b.w	8005b28 <std>
 8005c1c:	200145b8 	.word	0x200145b8
 8005c20:	20014480 	.word	0x20014480
 8005c24:	08005b95 	.word	0x08005b95

08005c28 <__sfp_lock_acquire>:
 8005c28:	4801      	ldr	r0, [pc, #4]	@ (8005c30 <__sfp_lock_acquire+0x8>)
 8005c2a:	f000 ba1c 	b.w	8006066 <__retarget_lock_acquire_recursive>
 8005c2e:	bf00      	nop
 8005c30:	200145c1 	.word	0x200145c1

08005c34 <__sfp_lock_release>:
 8005c34:	4801      	ldr	r0, [pc, #4]	@ (8005c3c <__sfp_lock_release+0x8>)
 8005c36:	f000 ba17 	b.w	8006068 <__retarget_lock_release_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	200145c1 	.word	0x200145c1

08005c40 <__sinit>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4604      	mov	r4, r0
 8005c44:	f7ff fff0 	bl	8005c28 <__sfp_lock_acquire>
 8005c48:	6a23      	ldr	r3, [r4, #32]
 8005c4a:	b11b      	cbz	r3, 8005c54 <__sinit+0x14>
 8005c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c50:	f7ff bff0 	b.w	8005c34 <__sfp_lock_release>
 8005c54:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <__sinit+0x28>)
 8005c56:	6223      	str	r3, [r4, #32]
 8005c58:	4b04      	ldr	r3, [pc, #16]	@ (8005c6c <__sinit+0x2c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f5      	bne.n	8005c4c <__sinit+0xc>
 8005c60:	f7ff ffc4 	bl	8005bec <global_stdio_init.part.0>
 8005c64:	e7f2      	b.n	8005c4c <__sinit+0xc>
 8005c66:	bf00      	nop
 8005c68:	08005bad 	.word	0x08005bad
 8005c6c:	200145b8 	.word	0x200145b8

08005c70 <_fwalk_sglue>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4607      	mov	r7, r0
 8005c76:	4688      	mov	r8, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c80:	f1b9 0901 	subs.w	r9, r9, #1
 8005c84:	d505      	bpl.n	8005c92 <_fwalk_sglue+0x22>
 8005c86:	6824      	ldr	r4, [r4, #0]
 8005c88:	2c00      	cmp	r4, #0
 8005c8a:	d1f7      	bne.n	8005c7c <_fwalk_sglue+0xc>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d907      	bls.n	8005ca8 <_fwalk_sglue+0x38>
 8005c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d003      	beq.n	8005ca8 <_fwalk_sglue+0x38>
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	4306      	orrs	r6, r0
 8005ca8:	3568      	adds	r5, #104	@ 0x68
 8005caa:	e7e9      	b.n	8005c80 <_fwalk_sglue+0x10>

08005cac <_puts_r>:
 8005cac:	6a03      	ldr	r3, [r0, #32]
 8005cae:	b570      	push	{r4, r5, r6, lr}
 8005cb0:	6884      	ldr	r4, [r0, #8]
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	460e      	mov	r6, r1
 8005cb6:	b90b      	cbnz	r3, 8005cbc <_puts_r+0x10>
 8005cb8:	f7ff ffc2 	bl	8005c40 <__sinit>
 8005cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cbe:	07db      	lsls	r3, r3, #31
 8005cc0:	d405      	bmi.n	8005cce <_puts_r+0x22>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	0598      	lsls	r0, r3, #22
 8005cc6:	d402      	bmi.n	8005cce <_puts_r+0x22>
 8005cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cca:	f000 f9cc 	bl	8006066 <__retarget_lock_acquire_recursive>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	0719      	lsls	r1, r3, #28
 8005cd2:	d502      	bpl.n	8005cda <_puts_r+0x2e>
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d135      	bne.n	8005d46 <_puts_r+0x9a>
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f8fb 	bl	8005ed8 <__swsetup_r>
 8005ce2:	b380      	cbz	r0, 8005d46 <_puts_r+0x9a>
 8005ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ce8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cea:	07da      	lsls	r2, r3, #31
 8005cec:	d405      	bmi.n	8005cfa <_puts_r+0x4e>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	059b      	lsls	r3, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_puts_r+0x4e>
 8005cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf6:	f000 f9b7 	bl	8006068 <__retarget_lock_release_recursive>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da04      	bge.n	8005d0c <_puts_r+0x60>
 8005d02:	69a2      	ldr	r2, [r4, #24]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	dc17      	bgt.n	8005d38 <_puts_r+0x8c>
 8005d08:	290a      	cmp	r1, #10
 8005d0a:	d015      	beq.n	8005d38 <_puts_r+0x8c>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	7019      	strb	r1, [r3, #0]
 8005d14:	68a3      	ldr	r3, [r4, #8]
 8005d16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	60a3      	str	r3, [r4, #8]
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	d1ed      	bne.n	8005cfe <_puts_r+0x52>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	da11      	bge.n	8005d4a <_puts_r+0x9e>
 8005d26:	4622      	mov	r2, r4
 8005d28:	210a      	movs	r1, #10
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 f895 	bl	8005e5a <__swbuf_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d0d7      	beq.n	8005ce4 <_puts_r+0x38>
 8005d34:	250a      	movs	r5, #10
 8005d36:	e7d7      	b.n	8005ce8 <_puts_r+0x3c>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 f88d 	bl	8005e5a <__swbuf_r>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d1e7      	bne.n	8005d14 <_puts_r+0x68>
 8005d44:	e7ce      	b.n	8005ce4 <_puts_r+0x38>
 8005d46:	3e01      	subs	r6, #1
 8005d48:	e7e4      	b.n	8005d14 <_puts_r+0x68>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	220a      	movs	r2, #10
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	e7ee      	b.n	8005d34 <_puts_r+0x88>
	...

08005d58 <puts>:
 8005d58:	4b02      	ldr	r3, [pc, #8]	@ (8005d64 <puts+0xc>)
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f7ff bfa5 	b.w	8005cac <_puts_r>
 8005d62:	bf00      	nop
 8005d64:	2000001c 	.word	0x2000001c

08005d68 <sniprintf>:
 8005d68:	b40c      	push	{r2, r3}
 8005d6a:	b530      	push	{r4, r5, lr}
 8005d6c:	4b18      	ldr	r3, [pc, #96]	@ (8005dd0 <sniprintf+0x68>)
 8005d6e:	1e0c      	subs	r4, r1, #0
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	b09d      	sub	sp, #116	@ 0x74
 8005d74:	da08      	bge.n	8005d88 <sniprintf+0x20>
 8005d76:	238b      	movs	r3, #139	@ 0x8b
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7e:	b01d      	add	sp, #116	@ 0x74
 8005d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d84:	b002      	add	sp, #8
 8005d86:	4770      	bx	lr
 8005d88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d96:	bf14      	ite	ne
 8005d98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d9c:	4623      	moveq	r3, r4
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	9307      	str	r3, [sp, #28]
 8005da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005da6:	9002      	str	r0, [sp, #8]
 8005da8:	9006      	str	r0, [sp, #24]
 8005daa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005db0:	ab21      	add	r3, sp, #132	@ 0x84
 8005db2:	a902      	add	r1, sp, #8
 8005db4:	4628      	mov	r0, r5
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	f000 faba 	bl	8006330 <_svfiprintf_r>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	bfbc      	itt	lt
 8005dc0:	238b      	movlt	r3, #139	@ 0x8b
 8005dc2:	602b      	strlt	r3, [r5, #0]
 8005dc4:	2c00      	cmp	r4, #0
 8005dc6:	d0da      	beq.n	8005d7e <sniprintf+0x16>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e7d6      	b.n	8005d7e <sniprintf+0x16>
 8005dd0:	2000001c 	.word	0x2000001c

08005dd4 <__sread>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	f000 f90c 	bl	8005ff8 <_read_r>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	bfab      	itete	ge
 8005de4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005de6:	89a3      	ldrhlt	r3, [r4, #12]
 8005de8:	181b      	addge	r3, r3, r0
 8005dea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dee:	bfac      	ite	ge
 8005df0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005df2:	81a3      	strhlt	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__swrite>:
 8005df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	898b      	ldrh	r3, [r1, #12]
 8005dfe:	05db      	lsls	r3, r3, #23
 8005e00:	4605      	mov	r5, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4616      	mov	r6, r2
 8005e06:	d505      	bpl.n	8005e14 <__swrite+0x1e>
 8005e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f000 f8e0 	bl	8005fd4 <_lseek_r>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	4632      	mov	r2, r6
 8005e22:	463b      	mov	r3, r7
 8005e24:	4628      	mov	r0, r5
 8005e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	f7ff be6b 	b.w	8005b04 <_write_r>

08005e2e <__sseek>:
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	460c      	mov	r4, r1
 8005e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e36:	f000 f8cd 	bl	8005fd4 <_lseek_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	bf15      	itete	ne
 8005e40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e4a:	81a3      	strheq	r3, [r4, #12]
 8005e4c:	bf18      	it	ne
 8005e4e:	81a3      	strhne	r3, [r4, #12]
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <__sclose>:
 8005e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e56:	f000 b8ad 	b.w	8005fb4 <_close_r>

08005e5a <__swbuf_r>:
 8005e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	4614      	mov	r4, r2
 8005e60:	4605      	mov	r5, r0
 8005e62:	b118      	cbz	r0, 8005e6c <__swbuf_r+0x12>
 8005e64:	6a03      	ldr	r3, [r0, #32]
 8005e66:	b90b      	cbnz	r3, 8005e6c <__swbuf_r+0x12>
 8005e68:	f7ff feea 	bl	8005c40 <__sinit>
 8005e6c:	69a3      	ldr	r3, [r4, #24]
 8005e6e:	60a3      	str	r3, [r4, #8]
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	071a      	lsls	r2, r3, #28
 8005e74:	d501      	bpl.n	8005e7a <__swbuf_r+0x20>
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	b943      	cbnz	r3, 8005e8c <__swbuf_r+0x32>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f82b 	bl	8005ed8 <__swsetup_r>
 8005e82:	b118      	cbz	r0, 8005e8c <__swbuf_r+0x32>
 8005e84:	f04f 37ff 	mov.w	r7, #4294967295
 8005e88:	4638      	mov	r0, r7
 8005e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	6922      	ldr	r2, [r4, #16]
 8005e90:	1a98      	subs	r0, r3, r2
 8005e92:	6963      	ldr	r3, [r4, #20]
 8005e94:	b2f6      	uxtb	r6, r6
 8005e96:	4283      	cmp	r3, r0
 8005e98:	4637      	mov	r7, r6
 8005e9a:	dc05      	bgt.n	8005ea8 <__swbuf_r+0x4e>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fd52 	bl	8006948 <_fflush_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d1ed      	bne.n	8005e84 <__swbuf_r+0x2a>
 8005ea8:	68a3      	ldr	r3, [r4, #8]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	701e      	strb	r6, [r3, #0]
 8005eb6:	6962      	ldr	r2, [r4, #20]
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d004      	beq.n	8005ec8 <__swbuf_r+0x6e>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	07db      	lsls	r3, r3, #31
 8005ec2:	d5e1      	bpl.n	8005e88 <__swbuf_r+0x2e>
 8005ec4:	2e0a      	cmp	r6, #10
 8005ec6:	d1df      	bne.n	8005e88 <__swbuf_r+0x2e>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fd3c 	bl	8006948 <_fflush_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d0d9      	beq.n	8005e88 <__swbuf_r+0x2e>
 8005ed4:	e7d6      	b.n	8005e84 <__swbuf_r+0x2a>
	...

08005ed8 <__swsetup_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4b29      	ldr	r3, [pc, #164]	@ (8005f80 <__swsetup_r+0xa8>)
 8005edc:	4605      	mov	r5, r0
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	b118      	cbz	r0, 8005eec <__swsetup_r+0x14>
 8005ee4:	6a03      	ldr	r3, [r0, #32]
 8005ee6:	b90b      	cbnz	r3, 8005eec <__swsetup_r+0x14>
 8005ee8:	f7ff feaa 	bl	8005c40 <__sinit>
 8005eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef0:	0719      	lsls	r1, r3, #28
 8005ef2:	d422      	bmi.n	8005f3a <__swsetup_r+0x62>
 8005ef4:	06da      	lsls	r2, r3, #27
 8005ef6:	d407      	bmi.n	8005f08 <__swsetup_r+0x30>
 8005ef8:	2209      	movs	r2, #9
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	e033      	b.n	8005f70 <__swsetup_r+0x98>
 8005f08:	0758      	lsls	r0, r3, #29
 8005f0a:	d512      	bpl.n	8005f32 <__swsetup_r+0x5a>
 8005f0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f0e:	b141      	cbz	r1, 8005f22 <__swsetup_r+0x4a>
 8005f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f14:	4299      	cmp	r1, r3
 8005f16:	d002      	beq.n	8005f1e <__swsetup_r+0x46>
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f8b5 	bl	8006088 <_free_r>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	f043 0308 	orr.w	r3, r3, #8
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	b94b      	cbnz	r3, 8005f52 <__swsetup_r+0x7a>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f48:	d003      	beq.n	8005f52 <__swsetup_r+0x7a>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 fd49 	bl	80069e4 <__smakebuf_r>
 8005f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f56:	f013 0201 	ands.w	r2, r3, #1
 8005f5a:	d00a      	beq.n	8005f72 <__swsetup_r+0x9a>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60a2      	str	r2, [r4, #8]
 8005f60:	6962      	ldr	r2, [r4, #20]
 8005f62:	4252      	negs	r2, r2
 8005f64:	61a2      	str	r2, [r4, #24]
 8005f66:	6922      	ldr	r2, [r4, #16]
 8005f68:	b942      	cbnz	r2, 8005f7c <__swsetup_r+0xa4>
 8005f6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f6e:	d1c5      	bne.n	8005efc <__swsetup_r+0x24>
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	0799      	lsls	r1, r3, #30
 8005f74:	bf58      	it	pl
 8005f76:	6962      	ldrpl	r2, [r4, #20]
 8005f78:	60a2      	str	r2, [r4, #8]
 8005f7a:	e7f4      	b.n	8005f66 <__swsetup_r+0x8e>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e7f7      	b.n	8005f70 <__swsetup_r+0x98>
 8005f80:	2000001c 	.word	0x2000001c

08005f84 <memcmp>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	3901      	subs	r1, #1
 8005f88:	4402      	add	r2, r0
 8005f8a:	4290      	cmp	r0, r2
 8005f8c:	d101      	bne.n	8005f92 <memcmp+0xe>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e005      	b.n	8005f9e <memcmp+0x1a>
 8005f92:	7803      	ldrb	r3, [r0, #0]
 8005f94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	d001      	beq.n	8005fa0 <memcmp+0x1c>
 8005f9c:	1b18      	subs	r0, r3, r4
 8005f9e:	bd10      	pop	{r4, pc}
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	e7f2      	b.n	8005f8a <memcmp+0x6>

08005fa4 <memset>:
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d100      	bne.n	8005fae <memset+0xa>
 8005fac:	4770      	bx	lr
 8005fae:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb2:	e7f9      	b.n	8005fa8 <memset+0x4>

08005fb4 <_close_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d06      	ldr	r5, [pc, #24]	@ (8005fd0 <_close_r+0x1c>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fa ffdf 	bl	8000f82 <_close>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_close_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_close_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200145bc 	.word	0x200145bc

08005fd4 <_lseek_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	@ (8005ff4 <_lseek_r+0x20>)
 8005fd8:	4604      	mov	r4, r0
 8005fda:	4608      	mov	r0, r1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fa fff4 	bl	8000fd0 <_lseek>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_lseek_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_lseek_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200145bc 	.word	0x200145bc

08005ff8 <_read_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	@ (8006018 <_read_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fa ff9e 	bl	8000f48 <_read>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_read_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_read_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200145bc 	.word	0x200145bc

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	@ (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	@ (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	@ (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	@ (8006060 <__libc_init_array+0x44>)
 8006030:	f000 fda4 	bl	8006b7c <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	08006dc8 	.word	0x08006dc8
 8006058:	08006dc8 	.word	0x08006dc8
 800605c:	08006dc8 	.word	0x08006dc8
 8006060:	08006dcc 	.word	0x08006dcc

08006064 <__retarget_lock_init_recursive>:
 8006064:	4770      	bx	lr

08006066 <__retarget_lock_acquire_recursive>:
 8006066:	4770      	bx	lr

08006068 <__retarget_lock_release_recursive>:
 8006068:	4770      	bx	lr

0800606a <memcpy>:
 800606a:	440a      	add	r2, r1
 800606c:	4291      	cmp	r1, r2
 800606e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006072:	d100      	bne.n	8006076 <memcpy+0xc>
 8006074:	4770      	bx	lr
 8006076:	b510      	push	{r4, lr}
 8006078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006080:	4291      	cmp	r1, r2
 8006082:	d1f9      	bne.n	8006078 <memcpy+0xe>
 8006084:	bd10      	pop	{r4, pc}
	...

08006088 <_free_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4605      	mov	r5, r0
 800608c:	2900      	cmp	r1, #0
 800608e:	d041      	beq.n	8006114 <_free_r+0x8c>
 8006090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006094:	1f0c      	subs	r4, r1, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfb8      	it	lt
 800609a:	18e4      	addlt	r4, r4, r3
 800609c:	f000 f8e0 	bl	8006260 <__malloc_lock>
 80060a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006118 <_free_r+0x90>)
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	b933      	cbnz	r3, 80060b4 <_free_r+0x2c>
 80060a6:	6063      	str	r3, [r4, #4]
 80060a8:	6014      	str	r4, [r2, #0]
 80060aa:	4628      	mov	r0, r5
 80060ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060b0:	f000 b8dc 	b.w	800626c <__malloc_unlock>
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	d908      	bls.n	80060ca <_free_r+0x42>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	1821      	adds	r1, r4, r0
 80060bc:	428b      	cmp	r3, r1
 80060be:	bf01      	itttt	eq
 80060c0:	6819      	ldreq	r1, [r3, #0]
 80060c2:	685b      	ldreq	r3, [r3, #4]
 80060c4:	1809      	addeq	r1, r1, r0
 80060c6:	6021      	streq	r1, [r4, #0]
 80060c8:	e7ed      	b.n	80060a6 <_free_r+0x1e>
 80060ca:	461a      	mov	r2, r3
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b10b      	cbz	r3, 80060d4 <_free_r+0x4c>
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	d9fa      	bls.n	80060ca <_free_r+0x42>
 80060d4:	6811      	ldr	r1, [r2, #0]
 80060d6:	1850      	adds	r0, r2, r1
 80060d8:	42a0      	cmp	r0, r4
 80060da:	d10b      	bne.n	80060f4 <_free_r+0x6c>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	4401      	add	r1, r0
 80060e0:	1850      	adds	r0, r2, r1
 80060e2:	4283      	cmp	r3, r0
 80060e4:	6011      	str	r1, [r2, #0]
 80060e6:	d1e0      	bne.n	80060aa <_free_r+0x22>
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	6053      	str	r3, [r2, #4]
 80060ee:	4408      	add	r0, r1
 80060f0:	6010      	str	r0, [r2, #0]
 80060f2:	e7da      	b.n	80060aa <_free_r+0x22>
 80060f4:	d902      	bls.n	80060fc <_free_r+0x74>
 80060f6:	230c      	movs	r3, #12
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	e7d6      	b.n	80060aa <_free_r+0x22>
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	1821      	adds	r1, r4, r0
 8006100:	428b      	cmp	r3, r1
 8006102:	bf04      	itt	eq
 8006104:	6819      	ldreq	r1, [r3, #0]
 8006106:	685b      	ldreq	r3, [r3, #4]
 8006108:	6063      	str	r3, [r4, #4]
 800610a:	bf04      	itt	eq
 800610c:	1809      	addeq	r1, r1, r0
 800610e:	6021      	streq	r1, [r4, #0]
 8006110:	6054      	str	r4, [r2, #4]
 8006112:	e7ca      	b.n	80060aa <_free_r+0x22>
 8006114:	bd38      	pop	{r3, r4, r5, pc}
 8006116:	bf00      	nop
 8006118:	200145c8 	.word	0x200145c8

0800611c <sbrk_aligned>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4e0f      	ldr	r6, [pc, #60]	@ (800615c <sbrk_aligned+0x40>)
 8006120:	460c      	mov	r4, r1
 8006122:	6831      	ldr	r1, [r6, #0]
 8006124:	4605      	mov	r5, r0
 8006126:	b911      	cbnz	r1, 800612e <sbrk_aligned+0x12>
 8006128:	f000 fcd4 	bl	8006ad4 <_sbrk_r>
 800612c:	6030      	str	r0, [r6, #0]
 800612e:	4621      	mov	r1, r4
 8006130:	4628      	mov	r0, r5
 8006132:	f000 fccf 	bl	8006ad4 <_sbrk_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d103      	bne.n	8006142 <sbrk_aligned+0x26>
 800613a:	f04f 34ff 	mov.w	r4, #4294967295
 800613e:	4620      	mov	r0, r4
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	1cc4      	adds	r4, r0, #3
 8006144:	f024 0403 	bic.w	r4, r4, #3
 8006148:	42a0      	cmp	r0, r4
 800614a:	d0f8      	beq.n	800613e <sbrk_aligned+0x22>
 800614c:	1a21      	subs	r1, r4, r0
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fcc0 	bl	8006ad4 <_sbrk_r>
 8006154:	3001      	adds	r0, #1
 8006156:	d1f2      	bne.n	800613e <sbrk_aligned+0x22>
 8006158:	e7ef      	b.n	800613a <sbrk_aligned+0x1e>
 800615a:	bf00      	nop
 800615c:	200145c4 	.word	0x200145c4

08006160 <_malloc_r>:
 8006160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006164:	1ccd      	adds	r5, r1, #3
 8006166:	f025 0503 	bic.w	r5, r5, #3
 800616a:	3508      	adds	r5, #8
 800616c:	2d0c      	cmp	r5, #12
 800616e:	bf38      	it	cc
 8006170:	250c      	movcc	r5, #12
 8006172:	2d00      	cmp	r5, #0
 8006174:	4606      	mov	r6, r0
 8006176:	db01      	blt.n	800617c <_malloc_r+0x1c>
 8006178:	42a9      	cmp	r1, r5
 800617a:	d904      	bls.n	8006186 <_malloc_r+0x26>
 800617c:	230c      	movs	r3, #12
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	2000      	movs	r0, #0
 8006182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800625c <_malloc_r+0xfc>
 800618a:	f000 f869 	bl	8006260 <__malloc_lock>
 800618e:	f8d8 3000 	ldr.w	r3, [r8]
 8006192:	461c      	mov	r4, r3
 8006194:	bb44      	cbnz	r4, 80061e8 <_malloc_r+0x88>
 8006196:	4629      	mov	r1, r5
 8006198:	4630      	mov	r0, r6
 800619a:	f7ff ffbf 	bl	800611c <sbrk_aligned>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	4604      	mov	r4, r0
 80061a2:	d158      	bne.n	8006256 <_malloc_r+0xf6>
 80061a4:	f8d8 4000 	ldr.w	r4, [r8]
 80061a8:	4627      	mov	r7, r4
 80061aa:	2f00      	cmp	r7, #0
 80061ac:	d143      	bne.n	8006236 <_malloc_r+0xd6>
 80061ae:	2c00      	cmp	r4, #0
 80061b0:	d04b      	beq.n	800624a <_malloc_r+0xea>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	4639      	mov	r1, r7
 80061b6:	4630      	mov	r0, r6
 80061b8:	eb04 0903 	add.w	r9, r4, r3
 80061bc:	f000 fc8a 	bl	8006ad4 <_sbrk_r>
 80061c0:	4581      	cmp	r9, r0
 80061c2:	d142      	bne.n	800624a <_malloc_r+0xea>
 80061c4:	6821      	ldr	r1, [r4, #0]
 80061c6:	1a6d      	subs	r5, r5, r1
 80061c8:	4629      	mov	r1, r5
 80061ca:	4630      	mov	r0, r6
 80061cc:	f7ff ffa6 	bl	800611c <sbrk_aligned>
 80061d0:	3001      	adds	r0, #1
 80061d2:	d03a      	beq.n	800624a <_malloc_r+0xea>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	442b      	add	r3, r5
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	f8d8 3000 	ldr.w	r3, [r8]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	bb62      	cbnz	r2, 800623c <_malloc_r+0xdc>
 80061e2:	f8c8 7000 	str.w	r7, [r8]
 80061e6:	e00f      	b.n	8006208 <_malloc_r+0xa8>
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	1b52      	subs	r2, r2, r5
 80061ec:	d420      	bmi.n	8006230 <_malloc_r+0xd0>
 80061ee:	2a0b      	cmp	r2, #11
 80061f0:	d917      	bls.n	8006222 <_malloc_r+0xc2>
 80061f2:	1961      	adds	r1, r4, r5
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	6025      	str	r5, [r4, #0]
 80061f8:	bf18      	it	ne
 80061fa:	6059      	strne	r1, [r3, #4]
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	bf08      	it	eq
 8006200:	f8c8 1000 	streq.w	r1, [r8]
 8006204:	5162      	str	r2, [r4, r5]
 8006206:	604b      	str	r3, [r1, #4]
 8006208:	4630      	mov	r0, r6
 800620a:	f000 f82f 	bl	800626c <__malloc_unlock>
 800620e:	f104 000b 	add.w	r0, r4, #11
 8006212:	1d23      	adds	r3, r4, #4
 8006214:	f020 0007 	bic.w	r0, r0, #7
 8006218:	1ac2      	subs	r2, r0, r3
 800621a:	bf1c      	itt	ne
 800621c:	1a1b      	subne	r3, r3, r0
 800621e:	50a3      	strne	r3, [r4, r2]
 8006220:	e7af      	b.n	8006182 <_malloc_r+0x22>
 8006222:	6862      	ldr	r2, [r4, #4]
 8006224:	42a3      	cmp	r3, r4
 8006226:	bf0c      	ite	eq
 8006228:	f8c8 2000 	streq.w	r2, [r8]
 800622c:	605a      	strne	r2, [r3, #4]
 800622e:	e7eb      	b.n	8006208 <_malloc_r+0xa8>
 8006230:	4623      	mov	r3, r4
 8006232:	6864      	ldr	r4, [r4, #4]
 8006234:	e7ae      	b.n	8006194 <_malloc_r+0x34>
 8006236:	463c      	mov	r4, r7
 8006238:	687f      	ldr	r7, [r7, #4]
 800623a:	e7b6      	b.n	80061aa <_malloc_r+0x4a>
 800623c:	461a      	mov	r2, r3
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	42a3      	cmp	r3, r4
 8006242:	d1fb      	bne.n	800623c <_malloc_r+0xdc>
 8006244:	2300      	movs	r3, #0
 8006246:	6053      	str	r3, [r2, #4]
 8006248:	e7de      	b.n	8006208 <_malloc_r+0xa8>
 800624a:	230c      	movs	r3, #12
 800624c:	6033      	str	r3, [r6, #0]
 800624e:	4630      	mov	r0, r6
 8006250:	f000 f80c 	bl	800626c <__malloc_unlock>
 8006254:	e794      	b.n	8006180 <_malloc_r+0x20>
 8006256:	6005      	str	r5, [r0, #0]
 8006258:	e7d6      	b.n	8006208 <_malloc_r+0xa8>
 800625a:	bf00      	nop
 800625c:	200145c8 	.word	0x200145c8

08006260 <__malloc_lock>:
 8006260:	4801      	ldr	r0, [pc, #4]	@ (8006268 <__malloc_lock+0x8>)
 8006262:	f7ff bf00 	b.w	8006066 <__retarget_lock_acquire_recursive>
 8006266:	bf00      	nop
 8006268:	200145c0 	.word	0x200145c0

0800626c <__malloc_unlock>:
 800626c:	4801      	ldr	r0, [pc, #4]	@ (8006274 <__malloc_unlock+0x8>)
 800626e:	f7ff befb 	b.w	8006068 <__retarget_lock_release_recursive>
 8006272:	bf00      	nop
 8006274:	200145c0 	.word	0x200145c0

08006278 <__ssputs_r>:
 8006278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800627c:	688e      	ldr	r6, [r1, #8]
 800627e:	461f      	mov	r7, r3
 8006280:	42be      	cmp	r6, r7
 8006282:	680b      	ldr	r3, [r1, #0]
 8006284:	4682      	mov	sl, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4690      	mov	r8, r2
 800628a:	d82d      	bhi.n	80062e8 <__ssputs_r+0x70>
 800628c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006290:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006294:	d026      	beq.n	80062e4 <__ssputs_r+0x6c>
 8006296:	6965      	ldr	r5, [r4, #20]
 8006298:	6909      	ldr	r1, [r1, #16]
 800629a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800629e:	eba3 0901 	sub.w	r9, r3, r1
 80062a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a6:	1c7b      	adds	r3, r7, #1
 80062a8:	444b      	add	r3, r9
 80062aa:	106d      	asrs	r5, r5, #1
 80062ac:	429d      	cmp	r5, r3
 80062ae:	bf38      	it	cc
 80062b0:	461d      	movcc	r5, r3
 80062b2:	0553      	lsls	r3, r2, #21
 80062b4:	d527      	bpl.n	8006306 <__ssputs_r+0x8e>
 80062b6:	4629      	mov	r1, r5
 80062b8:	f7ff ff52 	bl	8006160 <_malloc_r>
 80062bc:	4606      	mov	r6, r0
 80062be:	b360      	cbz	r0, 800631a <__ssputs_r+0xa2>
 80062c0:	6921      	ldr	r1, [r4, #16]
 80062c2:	464a      	mov	r2, r9
 80062c4:	f7ff fed1 	bl	800606a <memcpy>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d2:	81a3      	strh	r3, [r4, #12]
 80062d4:	6126      	str	r6, [r4, #16]
 80062d6:	6165      	str	r5, [r4, #20]
 80062d8:	444e      	add	r6, r9
 80062da:	eba5 0509 	sub.w	r5, r5, r9
 80062de:	6026      	str	r6, [r4, #0]
 80062e0:	60a5      	str	r5, [r4, #8]
 80062e2:	463e      	mov	r6, r7
 80062e4:	42be      	cmp	r6, r7
 80062e6:	d900      	bls.n	80062ea <__ssputs_r+0x72>
 80062e8:	463e      	mov	r6, r7
 80062ea:	6820      	ldr	r0, [r4, #0]
 80062ec:	4632      	mov	r2, r6
 80062ee:	4641      	mov	r1, r8
 80062f0:	f000 fbb4 	bl	8006a5c <memmove>
 80062f4:	68a3      	ldr	r3, [r4, #8]
 80062f6:	1b9b      	subs	r3, r3, r6
 80062f8:	60a3      	str	r3, [r4, #8]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	4433      	add	r3, r6
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	2000      	movs	r0, #0
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	462a      	mov	r2, r5
 8006308:	f000 fbf4 	bl	8006af4 <_realloc_r>
 800630c:	4606      	mov	r6, r0
 800630e:	2800      	cmp	r0, #0
 8006310:	d1e0      	bne.n	80062d4 <__ssputs_r+0x5c>
 8006312:	6921      	ldr	r1, [r4, #16]
 8006314:	4650      	mov	r0, sl
 8006316:	f7ff feb7 	bl	8006088 <_free_r>
 800631a:	230c      	movs	r3, #12
 800631c:	f8ca 3000 	str.w	r3, [sl]
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e7e9      	b.n	8006302 <__ssputs_r+0x8a>
	...

08006330 <_svfiprintf_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	4698      	mov	r8, r3
 8006336:	898b      	ldrh	r3, [r1, #12]
 8006338:	061b      	lsls	r3, r3, #24
 800633a:	b09d      	sub	sp, #116	@ 0x74
 800633c:	4607      	mov	r7, r0
 800633e:	460d      	mov	r5, r1
 8006340:	4614      	mov	r4, r2
 8006342:	d510      	bpl.n	8006366 <_svfiprintf_r+0x36>
 8006344:	690b      	ldr	r3, [r1, #16]
 8006346:	b973      	cbnz	r3, 8006366 <_svfiprintf_r+0x36>
 8006348:	2140      	movs	r1, #64	@ 0x40
 800634a:	f7ff ff09 	bl	8006160 <_malloc_r>
 800634e:	6028      	str	r0, [r5, #0]
 8006350:	6128      	str	r0, [r5, #16]
 8006352:	b930      	cbnz	r0, 8006362 <_svfiprintf_r+0x32>
 8006354:	230c      	movs	r3, #12
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	b01d      	add	sp, #116	@ 0x74
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	2340      	movs	r3, #64	@ 0x40
 8006364:	616b      	str	r3, [r5, #20]
 8006366:	2300      	movs	r3, #0
 8006368:	9309      	str	r3, [sp, #36]	@ 0x24
 800636a:	2320      	movs	r3, #32
 800636c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006370:	f8cd 800c 	str.w	r8, [sp, #12]
 8006374:	2330      	movs	r3, #48	@ 0x30
 8006376:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006514 <_svfiprintf_r+0x1e4>
 800637a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800637e:	f04f 0901 	mov.w	r9, #1
 8006382:	4623      	mov	r3, r4
 8006384:	469a      	mov	sl, r3
 8006386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800638a:	b10a      	cbz	r2, 8006390 <_svfiprintf_r+0x60>
 800638c:	2a25      	cmp	r2, #37	@ 0x25
 800638e:	d1f9      	bne.n	8006384 <_svfiprintf_r+0x54>
 8006390:	ebba 0b04 	subs.w	fp, sl, r4
 8006394:	d00b      	beq.n	80063ae <_svfiprintf_r+0x7e>
 8006396:	465b      	mov	r3, fp
 8006398:	4622      	mov	r2, r4
 800639a:	4629      	mov	r1, r5
 800639c:	4638      	mov	r0, r7
 800639e:	f7ff ff6b 	bl	8006278 <__ssputs_r>
 80063a2:	3001      	adds	r0, #1
 80063a4:	f000 80a7 	beq.w	80064f6 <_svfiprintf_r+0x1c6>
 80063a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063aa:	445a      	add	r2, fp
 80063ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80063ae:	f89a 3000 	ldrb.w	r3, [sl]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 809f 	beq.w	80064f6 <_svfiprintf_r+0x1c6>
 80063b8:	2300      	movs	r3, #0
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295
 80063be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c2:	f10a 0a01 	add.w	sl, sl, #1
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	9307      	str	r3, [sp, #28]
 80063ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80063d0:	4654      	mov	r4, sl
 80063d2:	2205      	movs	r2, #5
 80063d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d8:	484e      	ldr	r0, [pc, #312]	@ (8006514 <_svfiprintf_r+0x1e4>)
 80063da:	f7f9 ff49 	bl	8000270 <memchr>
 80063de:	9a04      	ldr	r2, [sp, #16]
 80063e0:	b9d8      	cbnz	r0, 800641a <_svfiprintf_r+0xea>
 80063e2:	06d0      	lsls	r0, r2, #27
 80063e4:	bf44      	itt	mi
 80063e6:	2320      	movmi	r3, #32
 80063e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063ec:	0711      	lsls	r1, r2, #28
 80063ee:	bf44      	itt	mi
 80063f0:	232b      	movmi	r3, #43	@ 0x2b
 80063f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063f6:	f89a 3000 	ldrb.w	r3, [sl]
 80063fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80063fc:	d015      	beq.n	800642a <_svfiprintf_r+0xfa>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	4654      	mov	r4, sl
 8006402:	2000      	movs	r0, #0
 8006404:	f04f 0c0a 	mov.w	ip, #10
 8006408:	4621      	mov	r1, r4
 800640a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800640e:	3b30      	subs	r3, #48	@ 0x30
 8006410:	2b09      	cmp	r3, #9
 8006412:	d94b      	bls.n	80064ac <_svfiprintf_r+0x17c>
 8006414:	b1b0      	cbz	r0, 8006444 <_svfiprintf_r+0x114>
 8006416:	9207      	str	r2, [sp, #28]
 8006418:	e014      	b.n	8006444 <_svfiprintf_r+0x114>
 800641a:	eba0 0308 	sub.w	r3, r0, r8
 800641e:	fa09 f303 	lsl.w	r3, r9, r3
 8006422:	4313      	orrs	r3, r2
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	46a2      	mov	sl, r4
 8006428:	e7d2      	b.n	80063d0 <_svfiprintf_r+0xa0>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	1d19      	adds	r1, r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	9103      	str	r1, [sp, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfbb      	ittet	lt
 8006436:	425b      	neglt	r3, r3
 8006438:	f042 0202 	orrlt.w	r2, r2, #2
 800643c:	9307      	strge	r3, [sp, #28]
 800643e:	9307      	strlt	r3, [sp, #28]
 8006440:	bfb8      	it	lt
 8006442:	9204      	strlt	r2, [sp, #16]
 8006444:	7823      	ldrb	r3, [r4, #0]
 8006446:	2b2e      	cmp	r3, #46	@ 0x2e
 8006448:	d10a      	bne.n	8006460 <_svfiprintf_r+0x130>
 800644a:	7863      	ldrb	r3, [r4, #1]
 800644c:	2b2a      	cmp	r3, #42	@ 0x2a
 800644e:	d132      	bne.n	80064b6 <_svfiprintf_r+0x186>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	1d1a      	adds	r2, r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	9203      	str	r2, [sp, #12]
 8006458:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800645c:	3402      	adds	r4, #2
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006524 <_svfiprintf_r+0x1f4>
 8006464:	7821      	ldrb	r1, [r4, #0]
 8006466:	2203      	movs	r2, #3
 8006468:	4650      	mov	r0, sl
 800646a:	f7f9 ff01 	bl	8000270 <memchr>
 800646e:	b138      	cbz	r0, 8006480 <_svfiprintf_r+0x150>
 8006470:	9b04      	ldr	r3, [sp, #16]
 8006472:	eba0 000a 	sub.w	r0, r0, sl
 8006476:	2240      	movs	r2, #64	@ 0x40
 8006478:	4082      	lsls	r2, r0
 800647a:	4313      	orrs	r3, r2
 800647c:	3401      	adds	r4, #1
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006484:	4824      	ldr	r0, [pc, #144]	@ (8006518 <_svfiprintf_r+0x1e8>)
 8006486:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800648a:	2206      	movs	r2, #6
 800648c:	f7f9 fef0 	bl	8000270 <memchr>
 8006490:	2800      	cmp	r0, #0
 8006492:	d036      	beq.n	8006502 <_svfiprintf_r+0x1d2>
 8006494:	4b21      	ldr	r3, [pc, #132]	@ (800651c <_svfiprintf_r+0x1ec>)
 8006496:	bb1b      	cbnz	r3, 80064e0 <_svfiprintf_r+0x1b0>
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	3307      	adds	r3, #7
 800649c:	f023 0307 	bic.w	r3, r3, #7
 80064a0:	3308      	adds	r3, #8
 80064a2:	9303      	str	r3, [sp, #12]
 80064a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a6:	4433      	add	r3, r6
 80064a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064aa:	e76a      	b.n	8006382 <_svfiprintf_r+0x52>
 80064ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80064b0:	460c      	mov	r4, r1
 80064b2:	2001      	movs	r0, #1
 80064b4:	e7a8      	b.n	8006408 <_svfiprintf_r+0xd8>
 80064b6:	2300      	movs	r3, #0
 80064b8:	3401      	adds	r4, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	4619      	mov	r1, r3
 80064be:	f04f 0c0a 	mov.w	ip, #10
 80064c2:	4620      	mov	r0, r4
 80064c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c8:	3a30      	subs	r2, #48	@ 0x30
 80064ca:	2a09      	cmp	r2, #9
 80064cc:	d903      	bls.n	80064d6 <_svfiprintf_r+0x1a6>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0c6      	beq.n	8006460 <_svfiprintf_r+0x130>
 80064d2:	9105      	str	r1, [sp, #20]
 80064d4:	e7c4      	b.n	8006460 <_svfiprintf_r+0x130>
 80064d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064da:	4604      	mov	r4, r0
 80064dc:	2301      	movs	r3, #1
 80064de:	e7f0      	b.n	80064c2 <_svfiprintf_r+0x192>
 80064e0:	ab03      	add	r3, sp, #12
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	462a      	mov	r2, r5
 80064e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006520 <_svfiprintf_r+0x1f0>)
 80064e8:	a904      	add	r1, sp, #16
 80064ea:	4638      	mov	r0, r7
 80064ec:	f3af 8000 	nop.w
 80064f0:	1c42      	adds	r2, r0, #1
 80064f2:	4606      	mov	r6, r0
 80064f4:	d1d6      	bne.n	80064a4 <_svfiprintf_r+0x174>
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	065b      	lsls	r3, r3, #25
 80064fa:	f53f af2d 	bmi.w	8006358 <_svfiprintf_r+0x28>
 80064fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006500:	e72c      	b.n	800635c <_svfiprintf_r+0x2c>
 8006502:	ab03      	add	r3, sp, #12
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	462a      	mov	r2, r5
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <_svfiprintf_r+0x1f0>)
 800650a:	a904      	add	r1, sp, #16
 800650c:	4638      	mov	r0, r7
 800650e:	f000 f879 	bl	8006604 <_printf_i>
 8006512:	e7ed      	b.n	80064f0 <_svfiprintf_r+0x1c0>
 8006514:	08006d8c 	.word	0x08006d8c
 8006518:	08006d96 	.word	0x08006d96
 800651c:	00000000 	.word	0x00000000
 8006520:	08006279 	.word	0x08006279
 8006524:	08006d92 	.word	0x08006d92

08006528 <_printf_common>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	4698      	mov	r8, r3
 8006530:	688a      	ldr	r2, [r1, #8]
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006538:	4293      	cmp	r3, r2
 800653a:	bfb8      	it	lt
 800653c:	4613      	movlt	r3, r2
 800653e:	6033      	str	r3, [r6, #0]
 8006540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006544:	4607      	mov	r7, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b10a      	cbz	r2, 800654e <_printf_common+0x26>
 800654a:	3301      	adds	r3, #1
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	0699      	lsls	r1, r3, #26
 8006552:	bf42      	ittt	mi
 8006554:	6833      	ldrmi	r3, [r6, #0]
 8006556:	3302      	addmi	r3, #2
 8006558:	6033      	strmi	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	f015 0506 	ands.w	r5, r5, #6
 8006560:	d106      	bne.n	8006570 <_printf_common+0x48>
 8006562:	f104 0a19 	add.w	sl, r4, #25
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	6832      	ldr	r2, [r6, #0]
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc26      	bgt.n	80065be <_printf_common+0x96>
 8006570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	3b00      	subs	r3, #0
 8006578:	bf18      	it	ne
 800657a:	2301      	movne	r3, #1
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d42b      	bmi.n	80065d8 <_printf_common+0xb0>
 8006580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006584:	4641      	mov	r1, r8
 8006586:	4638      	mov	r0, r7
 8006588:	47c8      	blx	r9
 800658a:	3001      	adds	r0, #1
 800658c:	d01e      	beq.n	80065cc <_printf_common+0xa4>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	6922      	ldr	r2, [r4, #16]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf02      	ittt	eq
 800659a:	68e5      	ldreq	r5, [r4, #12]
 800659c:	6833      	ldreq	r3, [r6, #0]
 800659e:	1aed      	subeq	r5, r5, r3
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	bf0c      	ite	eq
 80065a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a8:	2500      	movne	r5, #0
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bfc4      	itt	gt
 80065ae:	1a9b      	subgt	r3, r3, r2
 80065b0:	18ed      	addgt	r5, r5, r3
 80065b2:	2600      	movs	r6, #0
 80065b4:	341a      	adds	r4, #26
 80065b6:	42b5      	cmp	r5, r6
 80065b8:	d11a      	bne.n	80065f0 <_printf_common+0xc8>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e008      	b.n	80065d0 <_printf_common+0xa8>
 80065be:	2301      	movs	r3, #1
 80065c0:	4652      	mov	r2, sl
 80065c2:	4641      	mov	r1, r8
 80065c4:	4638      	mov	r0, r7
 80065c6:	47c8      	blx	r9
 80065c8:	3001      	adds	r0, #1
 80065ca:	d103      	bne.n	80065d4 <_printf_common+0xac>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	3501      	adds	r5, #1
 80065d6:	e7c6      	b.n	8006566 <_printf_common+0x3e>
 80065d8:	18e1      	adds	r1, r4, r3
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	2030      	movs	r0, #48	@ 0x30
 80065de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065e2:	4422      	add	r2, r4
 80065e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065ec:	3302      	adds	r3, #2
 80065ee:	e7c7      	b.n	8006580 <_printf_common+0x58>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4622      	mov	r2, r4
 80065f4:	4641      	mov	r1, r8
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c8      	blx	r9
 80065fa:	3001      	adds	r0, #1
 80065fc:	d0e6      	beq.n	80065cc <_printf_common+0xa4>
 80065fe:	3601      	adds	r6, #1
 8006600:	e7d9      	b.n	80065b6 <_printf_common+0x8e>
	...

08006604 <_printf_i>:
 8006604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	7e0f      	ldrb	r7, [r1, #24]
 800660a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800660c:	2f78      	cmp	r7, #120	@ 0x78
 800660e:	4691      	mov	r9, r2
 8006610:	4680      	mov	r8, r0
 8006612:	460c      	mov	r4, r1
 8006614:	469a      	mov	sl, r3
 8006616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800661a:	d807      	bhi.n	800662c <_printf_i+0x28>
 800661c:	2f62      	cmp	r7, #98	@ 0x62
 800661e:	d80a      	bhi.n	8006636 <_printf_i+0x32>
 8006620:	2f00      	cmp	r7, #0
 8006622:	f000 80d1 	beq.w	80067c8 <_printf_i+0x1c4>
 8006626:	2f58      	cmp	r7, #88	@ 0x58
 8006628:	f000 80b8 	beq.w	800679c <_printf_i+0x198>
 800662c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006634:	e03a      	b.n	80066ac <_printf_i+0xa8>
 8006636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800663a:	2b15      	cmp	r3, #21
 800663c:	d8f6      	bhi.n	800662c <_printf_i+0x28>
 800663e:	a101      	add	r1, pc, #4	@ (adr r1, 8006644 <_printf_i+0x40>)
 8006640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066b1 	.word	0x080066b1
 800664c:	0800662d 	.word	0x0800662d
 8006650:	0800662d 	.word	0x0800662d
 8006654:	0800662d 	.word	0x0800662d
 8006658:	0800662d 	.word	0x0800662d
 800665c:	080066b1 	.word	0x080066b1
 8006660:	0800662d 	.word	0x0800662d
 8006664:	0800662d 	.word	0x0800662d
 8006668:	0800662d 	.word	0x0800662d
 800666c:	0800662d 	.word	0x0800662d
 8006670:	080067af 	.word	0x080067af
 8006674:	080066db 	.word	0x080066db
 8006678:	08006769 	.word	0x08006769
 800667c:	0800662d 	.word	0x0800662d
 8006680:	0800662d 	.word	0x0800662d
 8006684:	080067d1 	.word	0x080067d1
 8006688:	0800662d 	.word	0x0800662d
 800668c:	080066db 	.word	0x080066db
 8006690:	0800662d 	.word	0x0800662d
 8006694:	0800662d 	.word	0x0800662d
 8006698:	08006771 	.word	0x08006771
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6032      	str	r2, [r6, #0]
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ac:	2301      	movs	r3, #1
 80066ae:	e09c      	b.n	80067ea <_printf_i+0x1e6>
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	d501      	bpl.n	80066c0 <_printf_i+0xbc>
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	e003      	b.n	80066c8 <_printf_i+0xc4>
 80066c0:	0645      	lsls	r5, r0, #25
 80066c2:	d5fb      	bpl.n	80066bc <_printf_i+0xb8>
 80066c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xd0>
 80066cc:	232d      	movs	r3, #45	@ 0x2d
 80066ce:	426d      	negs	r5, r5
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d4:	4858      	ldr	r0, [pc, #352]	@ (8006838 <_printf_i+0x234>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e011      	b.n	80066fe <_printf_i+0xfa>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	0608      	lsls	r0, r1, #24
 80066e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0xe8>
 80066e6:	0649      	lsls	r1, r1, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2ad      	uxthmi	r5, r5
 80066ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ee:	4852      	ldr	r0, [pc, #328]	@ (8006838 <_printf_i+0x234>)
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	bf14      	ite	ne
 80066f4:	230a      	movne	r3, #10
 80066f6:	2308      	moveq	r3, #8
 80066f8:	2100      	movs	r1, #0
 80066fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066fe:	6866      	ldr	r6, [r4, #4]
 8006700:	60a6      	str	r6, [r4, #8]
 8006702:	2e00      	cmp	r6, #0
 8006704:	db05      	blt.n	8006712 <_printf_i+0x10e>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	432e      	orrs	r6, r5
 800670a:	f021 0104 	bic.w	r1, r1, #4
 800670e:	6021      	str	r1, [r4, #0]
 8006710:	d04b      	beq.n	80067aa <_printf_i+0x1a6>
 8006712:	4616      	mov	r6, r2
 8006714:	fbb5 f1f3 	udiv	r1, r5, r3
 8006718:	fb03 5711 	mls	r7, r3, r1, r5
 800671c:	5dc7      	ldrb	r7, [r0, r7]
 800671e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006722:	462f      	mov	r7, r5
 8006724:	42bb      	cmp	r3, r7
 8006726:	460d      	mov	r5, r1
 8006728:	d9f4      	bls.n	8006714 <_printf_i+0x110>
 800672a:	2b08      	cmp	r3, #8
 800672c:	d10b      	bne.n	8006746 <_printf_i+0x142>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	07df      	lsls	r7, r3, #31
 8006732:	d508      	bpl.n	8006746 <_printf_i+0x142>
 8006734:	6923      	ldr	r3, [r4, #16]
 8006736:	6861      	ldr	r1, [r4, #4]
 8006738:	4299      	cmp	r1, r3
 800673a:	bfde      	ittt	le
 800673c:	2330      	movle	r3, #48	@ 0x30
 800673e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006742:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006746:	1b92      	subs	r2, r2, r6
 8006748:	6122      	str	r2, [r4, #16]
 800674a:	f8cd a000 	str.w	sl, [sp]
 800674e:	464b      	mov	r3, r9
 8006750:	aa03      	add	r2, sp, #12
 8006752:	4621      	mov	r1, r4
 8006754:	4640      	mov	r0, r8
 8006756:	f7ff fee7 	bl	8006528 <_printf_common>
 800675a:	3001      	adds	r0, #1
 800675c:	d14a      	bne.n	80067f4 <_printf_i+0x1f0>
 800675e:	f04f 30ff 	mov.w	r0, #4294967295
 8006762:	b004      	add	sp, #16
 8006764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	f043 0320 	orr.w	r3, r3, #32
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	4832      	ldr	r0, [pc, #200]	@ (800683c <_printf_i+0x238>)
 8006772:	2778      	movs	r7, #120	@ 0x78
 8006774:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	061f      	lsls	r7, r3, #24
 800677e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006782:	d402      	bmi.n	800678a <_printf_i+0x186>
 8006784:	065f      	lsls	r7, r3, #25
 8006786:	bf48      	it	mi
 8006788:	b2ad      	uxthmi	r5, r5
 800678a:	6031      	str	r1, [r6, #0]
 800678c:	07d9      	lsls	r1, r3, #31
 800678e:	bf44      	itt	mi
 8006790:	f043 0320 	orrmi.w	r3, r3, #32
 8006794:	6023      	strmi	r3, [r4, #0]
 8006796:	b11d      	cbz	r5, 80067a0 <_printf_i+0x19c>
 8006798:	2310      	movs	r3, #16
 800679a:	e7ad      	b.n	80066f8 <_printf_i+0xf4>
 800679c:	4826      	ldr	r0, [pc, #152]	@ (8006838 <_printf_i+0x234>)
 800679e:	e7e9      	b.n	8006774 <_printf_i+0x170>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	f023 0320 	bic.w	r3, r3, #32
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	e7f6      	b.n	8006798 <_printf_i+0x194>
 80067aa:	4616      	mov	r6, r2
 80067ac:	e7bd      	b.n	800672a <_printf_i+0x126>
 80067ae:	6833      	ldr	r3, [r6, #0]
 80067b0:	6825      	ldr	r5, [r4, #0]
 80067b2:	6961      	ldr	r1, [r4, #20]
 80067b4:	1d18      	adds	r0, r3, #4
 80067b6:	6030      	str	r0, [r6, #0]
 80067b8:	062e      	lsls	r6, r5, #24
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	d501      	bpl.n	80067c2 <_printf_i+0x1be>
 80067be:	6019      	str	r1, [r3, #0]
 80067c0:	e002      	b.n	80067c8 <_printf_i+0x1c4>
 80067c2:	0668      	lsls	r0, r5, #25
 80067c4:	d5fb      	bpl.n	80067be <_printf_i+0x1ba>
 80067c6:	8019      	strh	r1, [r3, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	4616      	mov	r6, r2
 80067ce:	e7bc      	b.n	800674a <_printf_i+0x146>
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	6032      	str	r2, [r6, #0]
 80067d6:	681e      	ldr	r6, [r3, #0]
 80067d8:	6862      	ldr	r2, [r4, #4]
 80067da:	2100      	movs	r1, #0
 80067dc:	4630      	mov	r0, r6
 80067de:	f7f9 fd47 	bl	8000270 <memchr>
 80067e2:	b108      	cbz	r0, 80067e8 <_printf_i+0x1e4>
 80067e4:	1b80      	subs	r0, r0, r6
 80067e6:	6060      	str	r0, [r4, #4]
 80067e8:	6863      	ldr	r3, [r4, #4]
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	2300      	movs	r3, #0
 80067ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f2:	e7aa      	b.n	800674a <_printf_i+0x146>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	4632      	mov	r2, r6
 80067f8:	4649      	mov	r1, r9
 80067fa:	4640      	mov	r0, r8
 80067fc:	47d0      	blx	sl
 80067fe:	3001      	adds	r0, #1
 8006800:	d0ad      	beq.n	800675e <_printf_i+0x15a>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	079b      	lsls	r3, r3, #30
 8006806:	d413      	bmi.n	8006830 <_printf_i+0x22c>
 8006808:	68e0      	ldr	r0, [r4, #12]
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	4298      	cmp	r0, r3
 800680e:	bfb8      	it	lt
 8006810:	4618      	movlt	r0, r3
 8006812:	e7a6      	b.n	8006762 <_printf_i+0x15e>
 8006814:	2301      	movs	r3, #1
 8006816:	4632      	mov	r2, r6
 8006818:	4649      	mov	r1, r9
 800681a:	4640      	mov	r0, r8
 800681c:	47d0      	blx	sl
 800681e:	3001      	adds	r0, #1
 8006820:	d09d      	beq.n	800675e <_printf_i+0x15a>
 8006822:	3501      	adds	r5, #1
 8006824:	68e3      	ldr	r3, [r4, #12]
 8006826:	9903      	ldr	r1, [sp, #12]
 8006828:	1a5b      	subs	r3, r3, r1
 800682a:	42ab      	cmp	r3, r5
 800682c:	dcf2      	bgt.n	8006814 <_printf_i+0x210>
 800682e:	e7eb      	b.n	8006808 <_printf_i+0x204>
 8006830:	2500      	movs	r5, #0
 8006832:	f104 0619 	add.w	r6, r4, #25
 8006836:	e7f5      	b.n	8006824 <_printf_i+0x220>
 8006838:	08006d9d 	.word	0x08006d9d
 800683c:	08006dae 	.word	0x08006dae

08006840 <__sflush_r>:
 8006840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006848:	0716      	lsls	r6, r2, #28
 800684a:	4605      	mov	r5, r0
 800684c:	460c      	mov	r4, r1
 800684e:	d454      	bmi.n	80068fa <__sflush_r+0xba>
 8006850:	684b      	ldr	r3, [r1, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	dc02      	bgt.n	800685c <__sflush_r+0x1c>
 8006856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	dd48      	ble.n	80068ee <__sflush_r+0xae>
 800685c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800685e:	2e00      	cmp	r6, #0
 8006860:	d045      	beq.n	80068ee <__sflush_r+0xae>
 8006862:	2300      	movs	r3, #0
 8006864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006868:	682f      	ldr	r7, [r5, #0]
 800686a:	6a21      	ldr	r1, [r4, #32]
 800686c:	602b      	str	r3, [r5, #0]
 800686e:	d030      	beq.n	80068d2 <__sflush_r+0x92>
 8006870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	0759      	lsls	r1, r3, #29
 8006876:	d505      	bpl.n	8006884 <__sflush_r+0x44>
 8006878:	6863      	ldr	r3, [r4, #4]
 800687a:	1ad2      	subs	r2, r2, r3
 800687c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800687e:	b10b      	cbz	r3, 8006884 <__sflush_r+0x44>
 8006880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	2300      	movs	r3, #0
 8006886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006888:	6a21      	ldr	r1, [r4, #32]
 800688a:	4628      	mov	r0, r5
 800688c:	47b0      	blx	r6
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	d106      	bne.n	80068a2 <__sflush_r+0x62>
 8006894:	6829      	ldr	r1, [r5, #0]
 8006896:	291d      	cmp	r1, #29
 8006898:	d82b      	bhi.n	80068f2 <__sflush_r+0xb2>
 800689a:	4a2a      	ldr	r2, [pc, #168]	@ (8006944 <__sflush_r+0x104>)
 800689c:	40ca      	lsrs	r2, r1
 800689e:	07d6      	lsls	r6, r2, #31
 80068a0:	d527      	bpl.n	80068f2 <__sflush_r+0xb2>
 80068a2:	2200      	movs	r2, #0
 80068a4:	6062      	str	r2, [r4, #4]
 80068a6:	04d9      	lsls	r1, r3, #19
 80068a8:	6922      	ldr	r2, [r4, #16]
 80068aa:	6022      	str	r2, [r4, #0]
 80068ac:	d504      	bpl.n	80068b8 <__sflush_r+0x78>
 80068ae:	1c42      	adds	r2, r0, #1
 80068b0:	d101      	bne.n	80068b6 <__sflush_r+0x76>
 80068b2:	682b      	ldr	r3, [r5, #0]
 80068b4:	b903      	cbnz	r3, 80068b8 <__sflush_r+0x78>
 80068b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80068b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068ba:	602f      	str	r7, [r5, #0]
 80068bc:	b1b9      	cbz	r1, 80068ee <__sflush_r+0xae>
 80068be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068c2:	4299      	cmp	r1, r3
 80068c4:	d002      	beq.n	80068cc <__sflush_r+0x8c>
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff fbde 	bl	8006088 <_free_r>
 80068cc:	2300      	movs	r3, #0
 80068ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80068d0:	e00d      	b.n	80068ee <__sflush_r+0xae>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b0      	blx	r6
 80068d8:	4602      	mov	r2, r0
 80068da:	1c50      	adds	r0, r2, #1
 80068dc:	d1c9      	bne.n	8006872 <__sflush_r+0x32>
 80068de:	682b      	ldr	r3, [r5, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0c6      	beq.n	8006872 <__sflush_r+0x32>
 80068e4:	2b1d      	cmp	r3, #29
 80068e6:	d001      	beq.n	80068ec <__sflush_r+0xac>
 80068e8:	2b16      	cmp	r3, #22
 80068ea:	d11e      	bne.n	800692a <__sflush_r+0xea>
 80068ec:	602f      	str	r7, [r5, #0]
 80068ee:	2000      	movs	r0, #0
 80068f0:	e022      	b.n	8006938 <__sflush_r+0xf8>
 80068f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f6:	b21b      	sxth	r3, r3
 80068f8:	e01b      	b.n	8006932 <__sflush_r+0xf2>
 80068fa:	690f      	ldr	r7, [r1, #16]
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	d0f6      	beq.n	80068ee <__sflush_r+0xae>
 8006900:	0793      	lsls	r3, r2, #30
 8006902:	680e      	ldr	r6, [r1, #0]
 8006904:	bf08      	it	eq
 8006906:	694b      	ldreq	r3, [r1, #20]
 8006908:	600f      	str	r7, [r1, #0]
 800690a:	bf18      	it	ne
 800690c:	2300      	movne	r3, #0
 800690e:	eba6 0807 	sub.w	r8, r6, r7
 8006912:	608b      	str	r3, [r1, #8]
 8006914:	f1b8 0f00 	cmp.w	r8, #0
 8006918:	dde9      	ble.n	80068ee <__sflush_r+0xae>
 800691a:	6a21      	ldr	r1, [r4, #32]
 800691c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800691e:	4643      	mov	r3, r8
 8006920:	463a      	mov	r2, r7
 8006922:	4628      	mov	r0, r5
 8006924:	47b0      	blx	r6
 8006926:	2800      	cmp	r0, #0
 8006928:	dc08      	bgt.n	800693c <__sflush_r+0xfc>
 800692a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006932:	81a3      	strh	r3, [r4, #12]
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800693c:	4407      	add	r7, r0
 800693e:	eba8 0800 	sub.w	r8, r8, r0
 8006942:	e7e7      	b.n	8006914 <__sflush_r+0xd4>
 8006944:	20400001 	.word	0x20400001

08006948 <_fflush_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	690b      	ldr	r3, [r1, #16]
 800694c:	4605      	mov	r5, r0
 800694e:	460c      	mov	r4, r1
 8006950:	b913      	cbnz	r3, 8006958 <_fflush_r+0x10>
 8006952:	2500      	movs	r5, #0
 8006954:	4628      	mov	r0, r5
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	b118      	cbz	r0, 8006962 <_fflush_r+0x1a>
 800695a:	6a03      	ldr	r3, [r0, #32]
 800695c:	b90b      	cbnz	r3, 8006962 <_fflush_r+0x1a>
 800695e:	f7ff f96f 	bl	8005c40 <__sinit>
 8006962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f3      	beq.n	8006952 <_fflush_r+0xa>
 800696a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800696c:	07d0      	lsls	r0, r2, #31
 800696e:	d404      	bmi.n	800697a <_fflush_r+0x32>
 8006970:	0599      	lsls	r1, r3, #22
 8006972:	d402      	bmi.n	800697a <_fflush_r+0x32>
 8006974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006976:	f7ff fb76 	bl	8006066 <__retarget_lock_acquire_recursive>
 800697a:	4628      	mov	r0, r5
 800697c:	4621      	mov	r1, r4
 800697e:	f7ff ff5f 	bl	8006840 <__sflush_r>
 8006982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006984:	07da      	lsls	r2, r3, #31
 8006986:	4605      	mov	r5, r0
 8006988:	d4e4      	bmi.n	8006954 <_fflush_r+0xc>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	059b      	lsls	r3, r3, #22
 800698e:	d4e1      	bmi.n	8006954 <_fflush_r+0xc>
 8006990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006992:	f7ff fb69 	bl	8006068 <__retarget_lock_release_recursive>
 8006996:	e7dd      	b.n	8006954 <_fflush_r+0xc>

08006998 <__swhatbuf_r>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	460c      	mov	r4, r1
 800699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a0:	2900      	cmp	r1, #0
 80069a2:	b096      	sub	sp, #88	@ 0x58
 80069a4:	4615      	mov	r5, r2
 80069a6:	461e      	mov	r6, r3
 80069a8:	da0d      	bge.n	80069c6 <__swhatbuf_r+0x2e>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069b0:	f04f 0100 	mov.w	r1, #0
 80069b4:	bf14      	ite	ne
 80069b6:	2340      	movne	r3, #64	@ 0x40
 80069b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069bc:	2000      	movs	r0, #0
 80069be:	6031      	str	r1, [r6, #0]
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	b016      	add	sp, #88	@ 0x58
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	466a      	mov	r2, sp
 80069c8:	f000 f862 	bl	8006a90 <_fstat_r>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	dbec      	blt.n	80069aa <__swhatbuf_r+0x12>
 80069d0:	9901      	ldr	r1, [sp, #4]
 80069d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069da:	4259      	negs	r1, r3
 80069dc:	4159      	adcs	r1, r3
 80069de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069e2:	e7eb      	b.n	80069bc <__swhatbuf_r+0x24>

080069e4 <__smakebuf_r>:
 80069e4:	898b      	ldrh	r3, [r1, #12]
 80069e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e8:	079d      	lsls	r5, r3, #30
 80069ea:	4606      	mov	r6, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	d507      	bpl.n	8006a00 <__smakebuf_r+0x1c>
 80069f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	2301      	movs	r3, #1
 80069fa:	6163      	str	r3, [r4, #20]
 80069fc:	b003      	add	sp, #12
 80069fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a00:	ab01      	add	r3, sp, #4
 8006a02:	466a      	mov	r2, sp
 8006a04:	f7ff ffc8 	bl	8006998 <__swhatbuf_r>
 8006a08:	9f00      	ldr	r7, [sp, #0]
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff fba6 	bl	8006160 <_malloc_r>
 8006a14:	b948      	cbnz	r0, 8006a2a <__smakebuf_r+0x46>
 8006a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1a:	059a      	lsls	r2, r3, #22
 8006a1c:	d4ee      	bmi.n	80069fc <__smakebuf_r+0x18>
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	f043 0302 	orr.w	r3, r3, #2
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	e7e2      	b.n	80069f0 <__smakebuf_r+0xc>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	6020      	str	r0, [r4, #0]
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a3a:	b15b      	cbz	r3, 8006a54 <__smakebuf_r+0x70>
 8006a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 f837 	bl	8006ab4 <_isatty_r>
 8006a46:	b128      	cbz	r0, 8006a54 <__smakebuf_r+0x70>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	431d      	orrs	r5, r3
 8006a58:	81a5      	strh	r5, [r4, #12]
 8006a5a:	e7cf      	b.n	80069fc <__smakebuf_r+0x18>

08006a5c <memmove>:
 8006a5c:	4288      	cmp	r0, r1
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	eb01 0402 	add.w	r4, r1, r2
 8006a64:	d902      	bls.n	8006a6c <memmove+0x10>
 8006a66:	4284      	cmp	r4, r0
 8006a68:	4623      	mov	r3, r4
 8006a6a:	d807      	bhi.n	8006a7c <memmove+0x20>
 8006a6c:	1e43      	subs	r3, r0, #1
 8006a6e:	42a1      	cmp	r1, r4
 8006a70:	d008      	beq.n	8006a84 <memmove+0x28>
 8006a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a7a:	e7f8      	b.n	8006a6e <memmove+0x12>
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4601      	mov	r1, r0
 8006a80:	428a      	cmp	r2, r1
 8006a82:	d100      	bne.n	8006a86 <memmove+0x2a>
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8e:	e7f7      	b.n	8006a80 <memmove+0x24>

08006a90 <_fstat_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d07      	ldr	r5, [pc, #28]	@ (8006ab0 <_fstat_r+0x20>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	f7fa fa7c 	bl	8000f9a <_fstat>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d102      	bne.n	8006aac <_fstat_r+0x1c>
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	b103      	cbz	r3, 8006aac <_fstat_r+0x1c>
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	bd38      	pop	{r3, r4, r5, pc}
 8006aae:	bf00      	nop
 8006ab0:	200145bc 	.word	0x200145bc

08006ab4 <_isatty_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	@ (8006ad0 <_isatty_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fa fa7b 	bl	8000fba <_isatty>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_isatty_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_isatty_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	200145bc 	.word	0x200145bc

08006ad4 <_sbrk_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4d06      	ldr	r5, [pc, #24]	@ (8006af0 <_sbrk_r+0x1c>)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	602b      	str	r3, [r5, #0]
 8006ae0:	f000 f83e 	bl	8006b60 <_sbrk>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_sbrk_r+0x1a>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_sbrk_r+0x1a>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	200145bc 	.word	0x200145bc

08006af4 <_realloc_r>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	4607      	mov	r7, r0
 8006afa:	4614      	mov	r4, r2
 8006afc:	460d      	mov	r5, r1
 8006afe:	b921      	cbnz	r1, 8006b0a <_realloc_r+0x16>
 8006b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	4611      	mov	r1, r2
 8006b06:	f7ff bb2b 	b.w	8006160 <_malloc_r>
 8006b0a:	b92a      	cbnz	r2, 8006b18 <_realloc_r+0x24>
 8006b0c:	f7ff fabc 	bl	8006088 <_free_r>
 8006b10:	4625      	mov	r5, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	f000 f81a 	bl	8006b50 <_malloc_usable_size_r>
 8006b1c:	4284      	cmp	r4, r0
 8006b1e:	4606      	mov	r6, r0
 8006b20:	d802      	bhi.n	8006b28 <_realloc_r+0x34>
 8006b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b26:	d8f4      	bhi.n	8006b12 <_realloc_r+0x1e>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff fb18 	bl	8006160 <_malloc_r>
 8006b30:	4680      	mov	r8, r0
 8006b32:	b908      	cbnz	r0, 8006b38 <_realloc_r+0x44>
 8006b34:	4645      	mov	r5, r8
 8006b36:	e7ec      	b.n	8006b12 <_realloc_r+0x1e>
 8006b38:	42b4      	cmp	r4, r6
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	bf28      	it	cs
 8006b40:	4632      	movcs	r2, r6
 8006b42:	f7ff fa92 	bl	800606a <memcpy>
 8006b46:	4629      	mov	r1, r5
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7ff fa9d 	bl	8006088 <_free_r>
 8006b4e:	e7f1      	b.n	8006b34 <_realloc_r+0x40>

08006b50 <_malloc_usable_size_r>:
 8006b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b54:	1f18      	subs	r0, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bfbc      	itt	lt
 8006b5a:	580b      	ldrlt	r3, [r1, r0]
 8006b5c:	18c0      	addlt	r0, r0, r3
 8006b5e:	4770      	bx	lr

08006b60 <_sbrk>:
 8006b60:	4a04      	ldr	r2, [pc, #16]	@ (8006b74 <_sbrk+0x14>)
 8006b62:	6811      	ldr	r1, [r2, #0]
 8006b64:	4603      	mov	r3, r0
 8006b66:	b909      	cbnz	r1, 8006b6c <_sbrk+0xc>
 8006b68:	4903      	ldr	r1, [pc, #12]	@ (8006b78 <_sbrk+0x18>)
 8006b6a:	6011      	str	r1, [r2, #0]
 8006b6c:	6810      	ldr	r0, [r2, #0]
 8006b6e:	4403      	add	r3, r0
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	4770      	bx	lr
 8006b74:	200145cc 	.word	0x200145cc
 8006b78:	200145d0 	.word	0x200145d0

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
