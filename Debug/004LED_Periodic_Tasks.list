
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005078  08005078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080051ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00014408  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014418  20014418  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110ee  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002923  00000000  00000000  0001812e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  0001aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d14  00000000  00000000  0001bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002323b  00000000  00000000  0001c86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f9c  00000000  00000000  0003faa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c54  00000000  00000000  00052a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129697  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046d8  00000000  00000000  001296dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  0012ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005060 	.word	0x08005060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005060 	.word	0x08005060

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e44 	.word	0x20012e44

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fba7 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f871 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8d9 	bl	8000754 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
#if (SEGGER_UART_REC == 1)
  SEGGER_UART_init(500000);
#endif
  /*Enable the CYCCNT*/
  DWT_CTRL|= (1<< 0);
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <main+0xd0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000660 <main+0xd0>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80005ae:	f003 f989 	bl	80038c4 <SEGGER_SYSVIEW_Conf>

#if (SEGGER_UART_REC == 0)
  SEGGER_SYSVIEW_Start();
 80005b2:	f003 ffaf 	bl	8004514 <SEGGER_SYSVIEW_Start>
  configASSERT(status == pdPASS);

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World From Task-2", 2, &task2_handle);
  configASSERT(status == pdPASS);
*/
  status = xTaskCreate(taskLED_Green_handler, "Task-LED", 200, "Green_LED_Task Activation", 2, &taskLED_Green_handle);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <main+0xd4>)
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	4928      	ldr	r1, [pc, #160]	@ (8000668 <main+0xd8>)
 80005c6:	4829      	ldr	r0, [pc, #164]	@ (800066c <main+0xdc>)
 80005c8:	f001 fe6a 	bl	80022a0 <xTaskCreate>
 80005cc:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x58>

  status = xTaskCreate(taskLED_Blue_handler, "Task-LED", 200, "Blue_LED_Task Activation", 2, &taskLED_Blue_handle);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <main+0xe0>)
 80005f8:	22c8      	movs	r2, #200	@ 0xc8
 80005fa:	491b      	ldr	r1, [pc, #108]	@ (8000668 <main+0xd8>)
 80005fc:	481d      	ldr	r0, [pc, #116]	@ (8000674 <main+0xe4>)
 80005fe:	f001 fe4f 	bl	80022a0 <xTaskCreate>
 8000602:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d00b      	beq.n	8000622 <main+0x92>
        __asm volatile
 800060a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060e:	f383 8811 	msr	BASEPRI, r3
 8000612:	f3bf 8f6f 	isb	sy
 8000616:	f3bf 8f4f 	dsb	sy
 800061a:	617b      	str	r3, [r7, #20]
    }
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	e7fd      	b.n	800061e <main+0x8e>

  status = xTaskCreate(taskLED_Red_handler, "Task-LED", 200, "Red_LED_Task Activation", 2, &taskLED_Red_handle);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <main+0xe8>)
 800062c:	22c8      	movs	r2, #200	@ 0xc8
 800062e:	490e      	ldr	r1, [pc, #56]	@ (8000668 <main+0xd8>)
 8000630:	4812      	ldr	r0, [pc, #72]	@ (800067c <main+0xec>)
 8000632:	f001 fe35 	bl	80022a0 <xTaskCreate>
 8000636:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d00b      	beq.n	8000656 <main+0xc6>
        __asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	613b      	str	r3, [r7, #16]
    }
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	e7fd      	b.n	8000652 <main+0xc2>

  status = xTaskCreate(taskUser_Btn_handler, "Task-Btn", 200, "User_Btn_Task Activation", 2, &taskUser_Btn_handle);
  configASSERT(status == pdPASS);
  */
  /*Start the scheduler*/
  vTaskStartScheduler();
 8000656:	f002 f831 	bl	80026bc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0xca>
 800065e:	bf00      	nop
 8000660:	e0001000 	.word	0xe0001000
 8000664:	08005078 	.word	0x08005078
 8000668:	08005094 	.word	0x08005094
 800066c:	08000a11 	.word	0x08000a11
 8000670:	080050a0 	.word	0x080050a0
 8000674:	08000a45 	.word	0x08000a45
 8000678:	080050bc 	.word	0x080050bc
 800067c:	08000a79 	.word	0x08000a79

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fcac 	bl	8004fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f4:	2332      	movs	r3, #50	@ 0x32
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fde3 	bl	80012d0 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f9de 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f844 	bl	80017c0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073e:	f000 f9c7 	bl	8000ad0 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	@ 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4ba2      	ldr	r3, [pc, #648]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4aa1      	ldr	r2, [pc, #644]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b9f      	ldr	r3, [pc, #636]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b9b      	ldr	r3, [pc, #620]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a9a      	ldr	r2, [pc, #616]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b98      	ldr	r3, [pc, #608]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b94      	ldr	r3, [pc, #592]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a93      	ldr	r2, [pc, #588]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b91      	ldr	r3, [pc, #580]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b8d      	ldr	r3, [pc, #564]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a8c      	ldr	r2, [pc, #560]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b8a      	ldr	r3, [pc, #552]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b86      	ldr	r3, [pc, #536]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a85      	ldr	r2, [pc, #532]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b83      	ldr	r3, [pc, #524]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b7f      	ldr	r3, [pc, #508]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a7e      	ldr	r2, [pc, #504]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b7c      	ldr	r3, [pc, #496]	@ (80009f8 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4879      	ldr	r0, [pc, #484]	@ (80009fc <MX_GPIO_Init+0x2a8>)
 8000818:	f000 fd26 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	4877      	ldr	r0, [pc, #476]	@ (8000a00 <MX_GPIO_Init+0x2ac>)
 8000822:	f000 fd21 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000826:	2200      	movs	r2, #0
 8000828:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800082c:	4875      	ldr	r0, [pc, #468]	@ (8000a04 <MX_GPIO_Init+0x2b0>)
 800082e:	f000 fd1b 	bl	8001268 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	486c      	ldr	r0, [pc, #432]	@ (80009fc <MX_GPIO_Init+0x2a8>)
 800084a:	f000 fb71 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4866      	ldr	r0, [pc, #408]	@ (8000a00 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fb63 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	485e      	ldr	r0, [pc, #376]	@ (8000a00 <MX_GPIO_Init+0x2ac>)
 8000886:	f000 fb53 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	485a      	ldr	r0, [pc, #360]	@ (8000a08 <MX_GPIO_Init+0x2b4>)
 80008a0:	f000 fb46 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4852      	ldr	r0, [pc, #328]	@ (8000a08 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fb36 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c4:	23e0      	movs	r3, #224	@ 0xe0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d4:	2305      	movs	r3, #5
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	484a      	ldr	r0, [pc, #296]	@ (8000a08 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 fb26 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e4:	2304      	movs	r3, #4
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4845      	ldr	r0, [pc, #276]	@ (8000a0c <MX_GPIO_Init+0x2b8>)
 80008f8:	f000 fb1a 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	483c      	ldr	r0, [pc, #240]	@ (8000a0c <MX_GPIO_Init+0x2b8>)
 800091a:	f000 fb09 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000922:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4833      	ldr	r0, [pc, #204]	@ (8000a04 <MX_GPIO_Init+0x2b0>)
 8000938:	f000 fafa 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800093c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094e:	2306      	movs	r3, #6
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4829      	ldr	r0, [pc, #164]	@ (8000a00 <MX_GPIO_Init+0x2ac>)
 800095a:	f000 fae9 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800095e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	@ (8000a08 <MX_GPIO_Init+0x2b4>)
 8000974:	f000 fadc 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000978:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098a:	230a      	movs	r3, #10
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <MX_GPIO_Init+0x2b4>)
 8000996:	f000 facb 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099a:	2320      	movs	r3, #32
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4815      	ldr	r0, [pc, #84]	@ (8000a04 <MX_GPIO_Init+0x2b0>)
 80009ae:	f000 fabf 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	@ (8000a0c <MX_GPIO_Init+0x2b8>)
 80009d0:	f000 faae 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_GPIO_Init+0x2a8>)
 80009ea:	f000 faa1 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <taskLED_Green_handler>:
		//taskYIELD();
	}
}

static void taskLED_Green_handler(void* parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	TickType_t xTimeLast = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]

	xTimeLast = xTaskGetTickCount();
 8000a1c:	f001 ffb8 	bl	8002990 <xTaskGetTickCount>
 8000a20:	4603      	mov	r3, r0
 8000a22:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <taskLED_Green_handler+0x30>)
 8000a2a:	f000 fc36 	bl	800129a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTimeLast, pdMS_TO_TICKS(1000));
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fdbc 	bl	80025b4 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a3c:	bf00      	nop
 8000a3e:	e7f1      	b.n	8000a24 <taskLED_Green_handler+0x14>
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <taskLED_Blue_handler>:
	}
}

static void taskLED_Blue_handler(void* parameters)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	TickType_t xTimeLast = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

	xTimeLast = xTaskGetTickCount();
 8000a50:	f001 ff9e 	bl	8002990 <xTaskGetTickCount>
 8000a54:	4603      	mov	r3, r0
 8000a56:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <taskLED_Blue_handler+0x30>)
 8000a5e:	f000 fc1c 	bl	800129a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTimeLast, pdMS_TO_TICKS(800));
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fda2 	bl	80025b4 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a70:	bf00      	nop
 8000a72:	e7f1      	b.n	8000a58 <taskLED_Blue_handler+0x14>
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <taskLED_Red_handler>:
	}
}

static void taskLED_Red_handler(void* parameters)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	TickType_t xTimeLast = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]

	xTimeLast = xTaskGetTickCount();
 8000a84:	f001 ff84 	bl	8002990 <xTaskGetTickCount>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <taskLED_Red_handler+0x30>)
 8000a92:	f000 fc02 	bl	800129a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTimeLast, pdMS_TO_TICKS(400));
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fd88 	bl	80025b4 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000aa4:	bf00      	nop
 8000aa6:	e7f1      	b.n	8000a8c <taskLED_Red_handler+0x14>
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000abe:	f000 f935 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001000 	.word	0x40001000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b1a:	f002 fb47 	bl	80031ac <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	@ 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a32      	ldr	r2, [pc, #200]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b58:	f107 0210 	add.w	r2, r7, #16
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f838 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b72:	f001 f81d 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000b76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b78:	e004      	b.n	8000b84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b7a:	f001 f819 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <HAL_InitTick+0xe8>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	0c9b      	lsrs	r3, r3, #18
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_InitTick+0xec>)
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_InitTick+0xf0>)
 8000b96:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_InitTick+0xec>)
 8000b9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <HAL_InitTick+0xec>)
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_InitTick+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bba:	f001 f83f 	bl	8001c3c <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bce:	f001 f88f 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be0:	2036      	movs	r0, #54	@ 0x36
 8000be2:	f000 f997 	bl	8000f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d808      	bhi.n	8000bfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2036      	movs	r0, #54	@ 0x36
 8000bf2:	f000 f973 	bl	8000edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0xf4>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e002      	b.n	8000c04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3738      	adds	r7, #56	@ 0x38
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	40001000 	.word	0x40001000
 8000c20:	20000004 	.word	0x20000004

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <TIM6_DAC_IRQHandler+0x10>)
 8000c62:	f001 f8b5 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000002c 	.word	0x2000002c

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ccc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c98:	f7ff ffea 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f004 f99b 	bl	8004ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc63 	bl	8000590 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cd8:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 8000cdc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ce0:	20014418 	.word	0x20014418

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f8d8 	bl	8000ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff ff08 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fede 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000074 	.word	0x20000074

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000074 	.word	0x20000074

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eee:	f7ff ff61 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f7ff ffb1 	bl	8000e60 <NVIC_EncodePriority>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff80 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e16b      	b.n	8001224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 815a 	bne.w	800121e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b4 	beq.w	800121e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b60      	ldr	r3, [pc, #384]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a5f      	ldr	r2, [pc, #380]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001240 <HAL_GPIO_Init+0x310>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	@ (8001244 <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	@ (8001248 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	@ (800124c <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	@ (8001250 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	@ (8001254 <HAL_GPIO_Init+0x324>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	@ (8001258 <HAL_GPIO_Init+0x328>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	@ (800125c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	@ (8001260 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20a>
 8001136:	2307      	movs	r3, #7
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113a:	2308      	movs	r3, #8
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x310>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <HAL_GPIO_Init+0x334>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae90 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40021c00 	.word	0x40021c00
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e267      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ee:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b82      	ldr	r3, [pc, #520]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b7e      	ldr	r3, [pc, #504]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e242      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b76      	ldr	r3, [pc, #472]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b70      	ldr	r3, [pc, #448]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fce4 	bl	8000d54 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fce0 	bl	8000d54 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e207      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcd0 	bl	8000d54 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fccc 	bl	8000d54 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c7      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4937      	ldr	r1, [pc, #220]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_RCC_OscConfig+0x244>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc85 	bl	8000d54 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc81 	bl	8000d54 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a8      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4925      	ldr	r1, [pc, #148]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_RCC_OscConfig+0x244>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc64 	bl	8000d54 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc60 	bl	8000d54 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e187      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_RCC_OscConfig+0x248>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc44 	bl	8000d54 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc40 	bl	8000d54 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e167      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_RCC_OscConfig+0x248>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc2d 	bl	8000d54 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc29 	bl	8000d54 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e150      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8097 	beq.w	8001664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b81      	ldr	r3, [pc, #516]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b7d      	ldr	r3, [pc, #500]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a7c      	ldr	r2, [pc, #496]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b7a      	ldr	r3, [pc, #488]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b77      	ldr	r3, [pc, #476]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b74      	ldr	r3, [pc, #464]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fbe9 	bl	8000d54 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fbe5 	bl	8000d54 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x2ea>
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b0:	4a63      	ldr	r2, [pc, #396]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x30c>
 80015c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015dc:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a57      	ldr	r2, [pc, #348]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a54      	ldr	r2, [pc, #336]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbaa 	bl	8000d54 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fba6 	bl	8000d54 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0cb      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x334>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fb94 	bl	8000d54 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fb90 	bl	8000d54 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0b5      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b3e      	ldr	r3, [pc, #248]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a38      	ldr	r2, [pc, #224]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166e:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d05c      	beq.n	8001734 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d141      	bne.n	8001706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb64 	bl	8000d54 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb60 	bl	8000d54 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	491b      	ldr	r1, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb39 	bl	8000d54 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb35 	bl	8000d54 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e05c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001704:	e054      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb22 	bl	8000d54 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb1e 	bl	8000d54 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e045      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
 8001732:	e03d      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e038      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_RCC_OscConfig+0x4ec>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d121      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa50 	bl	8000d54 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa4c 	bl	8000d54 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f8e0 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	080051ac 	.word	0x080051ac
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b094      	sub	sp, #80	@ 0x50
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a4:	4b79      	ldr	r3, [pc, #484]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	f200 80e1 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019be:	e0db      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019c4:	e0db      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6139      	str	r1, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a30:	4659      	mov	r1, fp
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4651      	mov	r1, sl
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ebb2 0801 	subs.w	r8, r2, r1
 8001a44:	4659      	mov	r1, fp
 8001a46:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	4699      	mov	r9, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	eb18 0303 	adds.w	r3, r8, r3
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	eb49 0303 	adc.w	r3, r9, r3
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	024b      	lsls	r3, r1, #9
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a88:	4621      	mov	r1, r4
 8001a8a:	024a      	lsls	r2, r1, #9
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a9c:	f7fe fbe2 	bl	8000264 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad6:	0150      	lsls	r0, r2, #5
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afc:	ebb2 040a 	subs.w	r4, r2, sl
 8001b00:	eb63 050b 	sbc.w	r5, r3, fp
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	00eb      	lsls	r3, r5, #3
 8001b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b12:	00e2      	lsls	r2, r4, #3
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	18e3      	adds	r3, r4, r3
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	464b      	mov	r3, r9
 8001b20:	eb45 0303 	adc.w	r3, r5, r3
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b32:	4629      	mov	r1, r5
 8001b34:	028b      	lsls	r3, r1, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	028a      	lsls	r2, r1, #10
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	61fa      	str	r2, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	f7fe fb88 	bl	8000264 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	@ 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080051bc 	.word	0x080051bc

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9c0 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8d2 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8d5 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8ac 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f89e 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8af 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f886 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f878 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f889 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0210 	mvn.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f860 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f852 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f863 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fdb8 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f906 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f834 	bl	8001fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8d8 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a46      	ldr	r2, [pc, #280]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a43      	ldr	r2, [pc, #268]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a42      	ldr	r2, [pc, #264]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a41      	ldr	r2, [pc, #260]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a35      	ldr	r2, [pc, #212]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d027      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d023      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a30      	ldr	r2, [pc, #192]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <TIM_Base_SetConfig+0x140>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <TIM_Base_SetConfig+0x144>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	@ (8002148 <TIM_Base_SetConfig+0x148>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <TIM_Base_SetConfig+0x14c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <TIM_Base_SetConfig+0x150>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a29      	ldr	r2, [pc, #164]	@ (8002154 <TIM_Base_SetConfig+0x154>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
  }
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	40001800 	.word	0x40001800
 8002150:	40001c00 	.word	0x40001c00
 8002154:	40002000 	.word	0x40002000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0208 	add.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0208 	add.w	r2, r3, #8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0208 	add.w	r2, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d103      	bne.n	80021fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e00c      	b.n	8002214 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3308      	adds	r3, #8
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e002      	b.n	8002208 <vListInsert+0x2e>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	429a      	cmp	r2, r3
 8002212:	d2f6      	bcs.n	8002202 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6892      	ldr	r2, [r2, #8]
 8002262:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6852      	ldr	r2, [r2, #4]
 800226c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	d103      	bne.n	8002280 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	@ 0x30
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f001 f92b 	bl	8003510 <pvPortMalloc>
 80022ba:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d013      	beq.n	80022ea <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022c2:	2058      	movs	r0, #88	@ 0x58
 80022c4:	f001 f924 	bl	8003510 <pvPortMalloc>
 80022c8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022d0:	2258      	movs	r2, #88	@ 0x58
 80022d2:	2100      	movs	r1, #0
 80022d4:	69f8      	ldr	r0, [r7, #28]
 80022d6:	f002 fe89 	bl	8004fec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e0:	e005      	b.n	80022ee <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f001 f9d0 	bl	8003688 <vPortFree>
 80022e8:	e001      	b.n	80022ee <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9303      	str	r3, [sp, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f80e 	bl	800232c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002310:	69f8      	ldr	r0, [r7, #28]
 8002312:	f000 f89b 	bl	800244c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002316:	2301      	movs	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e002      	b.n	8002322 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002322:	69bb      	ldr	r3, [r7, #24]
    }
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	21a5      	movs	r1, #165	@ 0xa5
 8002346:	f002 fe51 	bl	8004fec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002354:	3b01      	subs	r3, #1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f023 0307 	bic.w	r3, r3, #7
 8002362:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800236e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	617b      	str	r3, [r7, #20]
    }
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	e7fd      	b.n	8002382 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01e      	beq.n	80023ca <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e012      	b.n	80023b8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	7819      	ldrb	r1, [r3, #0]
 800239a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	3334      	adds	r3, #52	@ 0x34
 80023a2:	460a      	mov	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	d9e9      	bls.n	8002392 <prvInitialiseNewTask+0x66>
 80023be:	e000      	b.n	80023c2 <prvInitialiseNewTask+0x96>
            {
                break;
 80023c0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d90b      	bls.n	80023e8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	613b      	str	r3, [r7, #16]
    }
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d901      	bls.n	80023f2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023ee:	2304      	movs	r3, #4
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023fc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002400:	3304      	adds	r3, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fedc 	bl	80021c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	3318      	adds	r3, #24
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fed7 	bl	80021c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002416:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241a:	f1c3 0205 	rsb	r2, r3, #5
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	69b8      	ldr	r0, [r7, #24]
 800242e:	f000 fd89 	bl	8002f44 <pxPortInitialiseStack>
 8002432:	4602      	mov	r2, r0
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800243e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002442:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002444:	bf00      	nop
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002454:	f000 ff2a 	bl	80032ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002458:	4b4f      	ldr	r3, [pc, #316]	@ (8002598 <prvAddNewTaskToReadyList+0x14c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	4a4e      	ldr	r2, [pc, #312]	@ (8002598 <prvAddNewTaskToReadyList+0x14c>)
 8002460:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002462:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <prvAddNewTaskToReadyList+0x150>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800246a:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <prvAddNewTaskToReadyList+0x150>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002470:	4b49      	ldr	r3, [pc, #292]	@ (8002598 <prvAddNewTaskToReadyList+0x14c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d110      	bne.n	800249a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002478:	f000 fc4a 	bl	8002d10 <prvInitialiseTaskLists>
 800247c:	e00d      	b.n	800249a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800247e:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <prvAddNewTaskToReadyList+0x154>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002486:	4b45      	ldr	r3, [pc, #276]	@ (800259c <prvAddNewTaskToReadyList+0x150>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	429a      	cmp	r2, r3
 8002492:	d802      	bhi.n	800249a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002494:	4a41      	ldr	r2, [pc, #260]	@ (800259c <prvAddNewTaskToReadyList+0x150>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800249a:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <prvAddNewTaskToReadyList+0x158>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	4a40      	ldr	r2, [pc, #256]	@ (80025a4 <prvAddNewTaskToReadyList+0x158>)
 80024a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024a4:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <prvAddNewTaskToReadyList+0x158>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <prvAddNewTaskToReadyList+0x94>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fb8b 	bl	8004bd0 <SEGGER_SYSVIEW_OnTaskCreate>
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	461d      	mov	r5, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461c      	mov	r4, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	1ae3      	subs	r3, r4, r3
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	462b      	mov	r3, r5
 80024dc:	f001 fa94 	bl	8003a08 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 fbf8 	bl	8004cd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	2201      	movs	r2, #1
 80024ee:	409a      	lsls	r2, r3
 80024f0:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <prvAddNewTaskToReadyList+0x15c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	4a2c      	ldr	r2, [pc, #176]	@ (80025a8 <prvAddNewTaskToReadyList+0x15c>)
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fe:	492b      	ldr	r1, [pc, #172]	@ (80025ac <prvAddNewTaskToReadyList+0x160>)
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	3204      	adds	r2, #4
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <prvAddNewTaskToReadyList+0x160>)
 800253e:	441a      	add	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	615a      	str	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002548:	4918      	ldr	r1, [pc, #96]	@ (80025ac <prvAddNewTaskToReadyList+0x160>)
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1c59      	adds	r1, r3, #1
 8002558:	4814      	ldr	r0, [pc, #80]	@ (80025ac <prvAddNewTaskToReadyList+0x160>)
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4403      	add	r3, r0
 8002564:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002566:	f000 fed3 	bl	8003310 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <prvAddNewTaskToReadyList+0x154>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00e      	beq.n	8002590 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <prvAddNewTaskToReadyList+0x150>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <prvAddNewTaskToReadyList+0x164>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bdb0      	pop	{r4, r5, r7, pc}
 8002598:	20000150 	.word	0x20000150
 800259c:	20000078 	.word	0x20000078
 80025a0:	2000015c 	.word	0x2000015c
 80025a4:	2000016c 	.word	0x2000016c
 80025a8:	20000158 	.word	0x20000158
 80025ac:	2000007c 	.word	0x2000007c
 80025b0:	e000ed04 	.word	0xe000ed04

080025b4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <xTaskDelayUntil+0x2c>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	617b      	str	r3, [r7, #20]
    }
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <xTaskDelayUntil+0x4a>
        __asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	613b      	str	r3, [r7, #16]
    }
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	e7fd      	b.n	80025fa <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 80025fe:	4b2c      	ldr	r3, [pc, #176]	@ (80026b0 <xTaskDelayUntil+0xfc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <xTaskDelayUntil+0x6a>
        __asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	60fb      	str	r3, [r7, #12]
    }
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	e7fd      	b.n	800261a <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 800261e:	f000 f8a9 	bl	8002774 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <xTaskDelayUntil+0x100>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	429a      	cmp	r2, r3
 800263a:	d20b      	bcs.n	8002654 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	429a      	cmp	r2, r3
 8002644:	d211      	bcs.n	800266a <xTaskDelayUntil+0xb6>
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	429a      	cmp	r2, r3
 800264c:	d90d      	bls.n	800266a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
 8002652:	e00a      	b.n	800266a <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	429a      	cmp	r2, r3
 800265c:	d303      	bcc.n	8002666 <xTaskDelayUntil+0xb2>
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	429a      	cmp	r2, r3
 8002664:	d901      	bls.n	800266a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002666:	2301      	movs	r3, #1
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <xTaskDelayUntil+0xd6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002676:	2024      	movs	r0, #36	@ 0x24
 8002678:	f001 fe98 	bl	80043ac <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fbdd 	bl	8002e44 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800268a:	f000 f881 	bl	8002790 <xTaskResumeAll>
 800268e:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <xTaskDelayUntil+0xf2>
        {
            portYIELD_WITHIN_API();
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <xTaskDelayUntil+0x104>)
 8002698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80026a8:	4618      	mov	r0, r3
 80026aa:	3728      	adds	r7, #40	@ 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000178 	.word	0x20000178
 80026b4:	20000154 	.word	0x20000154
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80026c2:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <vTaskStartScheduler+0x98>)
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	2282      	movs	r2, #130	@ 0x82
 80026ce:	4922      	ldr	r1, [pc, #136]	@ (8002758 <vTaskStartScheduler+0x9c>)
 80026d0:	4822      	ldr	r0, [pc, #136]	@ (800275c <vTaskStartScheduler+0xa0>)
 80026d2:	f7ff fde5 	bl	80022a0 <xTaskCreate>
 80026d6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d124      	bne.n	8002728 <vTaskStartScheduler+0x6c>
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	60bb      	str	r3, [r7, #8]
    }
 80026f0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <vTaskStartScheduler+0xa4>)
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <vTaskStartScheduler+0xa8>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <vTaskStartScheduler+0xac>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002706:	4b19      	ldr	r3, [pc, #100]	@ (800276c <vTaskStartScheduler+0xb0>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <vTaskStartScheduler+0x98>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d102      	bne.n	8002718 <vTaskStartScheduler+0x5c>
 8002712:	f002 fa41 	bl	8004b98 <SEGGER_SYSVIEW_OnIdle>
 8002716:	e004      	b.n	8002722 <vTaskStartScheduler+0x66>
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <vTaskStartScheduler+0xb0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fa99 	bl	8004c54 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002722:	f000 fc9f 	bl	8003064 <xPortStartScheduler>
 8002726:	e00f      	b.n	8002748 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d10b      	bne.n	8002748 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	607b      	str	r3, [r7, #4]
    }
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <vTaskStartScheduler+0xb4>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000174 	.word	0x20000174
 8002758:	080050e4 	.word	0x080050e4
 800275c:	08002ce1 	.word	0x08002ce1
 8002760:	20000170 	.word	0x20000170
 8002764:	2000015c 	.word	0x2000015c
 8002768:	20000154 	.word	0x20000154
 800276c:	20000078 	.word	0x20000078
 8002770:	080051c4 	.word	0x080051c4

08002774 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <vTaskSuspendAll+0x18>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	4a03      	ldr	r2, [pc, #12]	@ (800278c <vTaskSuspendAll+0x18>)
 8002780:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	20000178 	.word	0x20000178

08002790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800279e:	4b73      	ldr	r3, [pc, #460]	@ (800296c <xTaskResumeAll+0x1dc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <xTaskResumeAll+0x2e>
        __asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	607b      	str	r3, [r7, #4]
    }
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	e7fd      	b.n	80027ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027be:	f000 fd75 	bl	80032ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027c2:	4b6a      	ldr	r3, [pc, #424]	@ (800296c <xTaskResumeAll+0x1dc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	4a68      	ldr	r2, [pc, #416]	@ (800296c <xTaskResumeAll+0x1dc>)
 80027ca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027cc:	4b67      	ldr	r3, [pc, #412]	@ (800296c <xTaskResumeAll+0x1dc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 80c4 	bne.w	800295e <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027d6:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <xTaskResumeAll+0x1e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80bf 	beq.w	800295e <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027e0:	e08e      	b.n	8002900 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027e2:	4b64      	ldr	r3, [pc, #400]	@ (8002974 <xTaskResumeAll+0x1e4>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	6a12      	ldr	r2, [r2, #32]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	69d2      	ldr	r2, [r2, #28]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3318      	adds	r3, #24
 800280c:	429a      	cmp	r2, r3
 800280e:	d103      	bne.n	8002818 <xTaskResumeAll+0x88>
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	6a1a      	ldr	r2, [r3, #32]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2200      	movs	r2, #0
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	6892      	ldr	r2, [r2, #8]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	429a      	cmp	r2, r3
 800284c:	d103      	bne.n	8002856 <xTaskResumeAll+0xc6>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fa35 	bl	8004cd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <xTaskResumeAll+0x1e8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	4a3e      	ldr	r2, [pc, #248]	@ (8002978 <xTaskResumeAll+0x1e8>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002884:	493d      	ldr	r1, [pc, #244]	@ (800297c <xTaskResumeAll+0x1ec>)
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	3204      	adds	r2, #4
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	1d1a      	adds	r2, r3, #4
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4a2e      	ldr	r2, [pc, #184]	@ (800297c <xTaskResumeAll+0x1ec>)
 80028c4:	441a      	add	r2, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	615a      	str	r2, [r3, #20]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ce:	492b      	ldr	r1, [pc, #172]	@ (800297c <xTaskResumeAll+0x1ec>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c59      	adds	r1, r3, #1
 80028de:	4827      	ldr	r0, [pc, #156]	@ (800297c <xTaskResumeAll+0x1ec>)
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4403      	add	r3, r0
 80028ea:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f0:	4b23      	ldr	r3, [pc, #140]	@ (8002980 <xTaskResumeAll+0x1f0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <xTaskResumeAll+0x1f4>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002900:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <xTaskResumeAll+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f af6c 	bne.w	80027e2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002910:	f000 fa7c 	bl	8002e0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002914:	4b1c      	ldr	r3, [pc, #112]	@ (8002988 <xTaskResumeAll+0x1f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002920:	f000 f858 	bl	80029d4 <xTaskIncrementTick>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800292a:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <xTaskResumeAll+0x1f4>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3b01      	subs	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f1      	bne.n	8002920 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <xTaskResumeAll+0x1f8>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <xTaskResumeAll+0x1f4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <xTaskResumeAll+0x1fc>)
 8002950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800295e:	f000 fcd7 	bl	8003310 <vPortExitCritical>

    return xAlreadyYielded;
 8002962:	69bb      	ldr	r3, [r7, #24]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000178 	.word	0x20000178
 8002970:	20000150 	.word	0x20000150
 8002974:	20000110 	.word	0x20000110
 8002978:	20000158 	.word	0x20000158
 800297c:	2000007c 	.word	0x2000007c
 8002980:	20000078 	.word	0x20000078
 8002984:	20000164 	.word	0x20000164
 8002988:	20000160 	.word	0x20000160
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <xTaskGetTickCount+0x1c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800299c:	687b      	ldr	r3, [r7, #4]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000154 	.word	0x20000154

080029b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029b6:	f000 fd69 	bl	800348c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029be:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <xTaskGetTickCountFromISR+0x20>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029c4:	683b      	ldr	r3, [r7, #0]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000154 	.word	0x20000154

080029d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029de:	4b80      	ldr	r3, [pc, #512]	@ (8002be0 <xTaskIncrementTick+0x20c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 80f1 	bne.w	8002bca <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029e8:	4b7e      	ldr	r3, [pc, #504]	@ (8002be4 <xTaskIncrementTick+0x210>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029f0:	4a7c      	ldr	r2, [pc, #496]	@ (8002be4 <xTaskIncrementTick+0x210>)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d121      	bne.n	8002a40 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80029fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002be8 <xTaskIncrementTick+0x214>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	607b      	str	r3, [r7, #4]
    }
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	e7fd      	b.n	8002a1a <xTaskIncrementTick+0x46>
 8002a1e:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <xTaskIncrementTick+0x214>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	4b71      	ldr	r3, [pc, #452]	@ (8002bec <xTaskIncrementTick+0x218>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6f      	ldr	r2, [pc, #444]	@ (8002be8 <xTaskIncrementTick+0x214>)
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4a6f      	ldr	r2, [pc, #444]	@ (8002bec <xTaskIncrementTick+0x218>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf0 <xTaskIncrementTick+0x21c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf0 <xTaskIncrementTick+0x21c>)
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	f000 f9e6 	bl	8002e0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a40:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf4 <xTaskIncrementTick+0x220>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f0c0 80aa 	bcc.w	8002ba0 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a4c:	4b66      	ldr	r3, [pc, #408]	@ (8002be8 <xTaskIncrementTick+0x214>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d104      	bne.n	8002a60 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a56:	4b67      	ldr	r3, [pc, #412]	@ (8002bf4 <xTaskIncrementTick+0x220>)
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	601a      	str	r2, [r3, #0]
                    break;
 8002a5e:	e09f      	b.n	8002ba0 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a60:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <xTaskIncrementTick+0x214>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d203      	bcs.n	8002a80 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a78:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf4 <xTaskIncrementTick+0x220>)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a7e:	e08f      	b.n	8002ba0 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d103      	bne.n	8002aae <xTaskIncrementTick+0xda>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01e      	beq.n	8002b04 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	6a12      	ldr	r2, [r2, #32]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	69d2      	ldr	r2, [r2, #28]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d103      	bne.n	8002af4 <xTaskIncrementTick+0x120>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2200      	movs	r2, #0
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 f8e6 	bl	8004cd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <xTaskIncrementTick+0x224>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <xTaskIncrementTick+0x224>)
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b22:	4936      	ldr	r1, [pc, #216]	@ (8002bfc <xTaskIncrementTick+0x228>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3304      	adds	r3, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	3204      	adds	r2, #4
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4a26      	ldr	r2, [pc, #152]	@ (8002bfc <xTaskIncrementTick+0x228>)
 8002b62:	441a      	add	r2, r3
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	4923      	ldr	r1, [pc, #140]	@ (8002bfc <xTaskIncrementTick+0x228>)
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c59      	adds	r1, r3, #1
 8002b7c:	481f      	ldr	r0, [pc, #124]	@ (8002bfc <xTaskIncrementTick+0x228>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4403      	add	r3, r0
 8002b88:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <xTaskIncrementTick+0x22c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f67f af59 	bls.w	8002a4c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b9e:	e755      	b.n	8002a4c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ba0:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <xTaskIncrementTick+0x22c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba6:	4915      	ldr	r1, [pc, #84]	@ (8002bfc <xTaskIncrementTick+0x228>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d901      	bls.n	8002bbc <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <xTaskIncrementTick+0x230>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc8:	e004      	b.n	8002bd4 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <xTaskIncrementTick+0x234>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c08 <xTaskIncrementTick+0x234>)
 8002bd2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3728      	adds	r7, #40	@ 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000178 	.word	0x20000178
 8002be4:	20000154 	.word	0x20000154
 8002be8:	20000108 	.word	0x20000108
 8002bec:	2000010c 	.word	0x2000010c
 8002bf0:	20000168 	.word	0x20000168
 8002bf4:	20000170 	.word	0x20000170
 8002bf8:	20000158 	.word	0x20000158
 8002bfc:	2000007c 	.word	0x2000007c
 8002c00:	20000078 	.word	0x20000078
 8002c04:	20000164 	.word	0x20000164
 8002c08:	20000160 	.word	0x20000160

08002c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c12:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <vTaskSwitchContext+0xbc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <vTaskSwitchContext+0xc0>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002c20:	e04e      	b.n	8002cc0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002c22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <vTaskSwitchContext+0xc0>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <vTaskSwitchContext+0xc4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	f1c3 031f 	rsb	r3, r3, #31
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	4925      	ldr	r1, [pc, #148]	@ (8002cd4 <vTaskSwitchContext+0xc8>)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	607b      	str	r3, [r7, #4]
    }
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	e7fd      	b.n	8002c66 <vTaskSwitchContext+0x5a>
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4a17      	ldr	r2, [pc, #92]	@ (8002cd4 <vTaskSwitchContext+0xc8>)
 8002c76:	4413      	add	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d104      	bne.n	8002c9a <vTaskSwitchContext+0x8e>
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd8 <vTaskSwitchContext+0xcc>)
 8002ca2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <vTaskSwitchContext+0xcc>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <vTaskSwitchContext+0xd0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d102      	bne.n	8002cb6 <vTaskSwitchContext+0xaa>
 8002cb0:	f001 ff72 	bl	8004b98 <SEGGER_SYSVIEW_OnIdle>
}
 8002cb4:	e004      	b.n	8002cc0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <vTaskSwitchContext+0xcc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 ffca 	bl	8004c54 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000178 	.word	0x20000178
 8002ccc:	20000164 	.word	0x20000164
 8002cd0:	20000158 	.word	0x20000158
 8002cd4:	2000007c 	.word	0x2000007c
 8002cd8:	20000078 	.word	0x20000078
 8002cdc:	20000174 	.word	0x20000174

08002ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ce8:	f000 f852 	bl	8002d90 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <prvIdleTask+0x28>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d9f9      	bls.n	8002ce8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <prvIdleTask+0x2c>)
 8002cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d04:	e7f0      	b.n	8002ce8 <prvIdleTask+0x8>
 8002d06:	bf00      	nop
 8002d08:	2000007c 	.word	0x2000007c
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	e00c      	b.n	8002d36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <prvInitialiseTaskLists+0x60>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fa28 	bl	8002180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d9ef      	bls.n	8002d1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d3c:	480d      	ldr	r0, [pc, #52]	@ (8002d74 <prvInitialiseTaskLists+0x64>)
 8002d3e:	f7ff fa1f 	bl	8002180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d42:	480d      	ldr	r0, [pc, #52]	@ (8002d78 <prvInitialiseTaskLists+0x68>)
 8002d44:	f7ff fa1c 	bl	8002180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d48:	480c      	ldr	r0, [pc, #48]	@ (8002d7c <prvInitialiseTaskLists+0x6c>)
 8002d4a:	f7ff fa19 	bl	8002180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002d4e:	480c      	ldr	r0, [pc, #48]	@ (8002d80 <prvInitialiseTaskLists+0x70>)
 8002d50:	f7ff fa16 	bl	8002180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002d54:	480b      	ldr	r0, [pc, #44]	@ (8002d84 <prvInitialiseTaskLists+0x74>)
 8002d56:	f7ff fa13 	bl	8002180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <prvInitialiseTaskLists+0x78>)
 8002d5c:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <prvInitialiseTaskLists+0x64>)
 8002d5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d60:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <prvInitialiseTaskLists+0x7c>)
 8002d62:	4a05      	ldr	r2, [pc, #20]	@ (8002d78 <prvInitialiseTaskLists+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2000007c 	.word	0x2000007c
 8002d74:	200000e0 	.word	0x200000e0
 8002d78:	200000f4 	.word	0x200000f4
 8002d7c:	20000110 	.word	0x20000110
 8002d80:	20000124 	.word	0x20000124
 8002d84:	2000013c 	.word	0x2000013c
 8002d88:	20000108 	.word	0x20000108
 8002d8c:	2000010c 	.word	0x2000010c

08002d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d96:	e019      	b.n	8002dcc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002d98:	f000 fa88 	bl	80032ac <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d9c:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <prvCheckTasksWaitingTermination+0x50>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa4f 	bl	800224c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <prvCheckTasksWaitingTermination+0x54>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	4a0b      	ldr	r2, [pc, #44]	@ (8002de4 <prvCheckTasksWaitingTermination+0x54>)
 8002db6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <prvCheckTasksWaitingTermination+0x58>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002de8 <prvCheckTasksWaitingTermination+0x58>)
 8002dc0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002dc2:	f000 faa5 	bl	8003310 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f810 	bl	8002dec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <prvCheckTasksWaitingTermination+0x58>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e1      	bne.n	8002d98 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000124 	.word	0x20000124
 8002de4:	20000150 	.word	0x20000150
 8002de8:	20000138 	.word	0x20000138

08002dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fc45 	bl	8003688 <vPortFree>
            vPortFree( pxTCB );
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fc42 	bl	8003688 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <prvResetNextTaskUnblockTime+0x30>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <prvResetNextTaskUnblockTime+0x34>)
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e22:	e005      	b.n	8002e30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <prvResetNextTaskUnblockTime+0x30>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <prvResetNextTaskUnblockTime+0x34>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000108 	.word	0x20000108
 8002e40:	20000170 	.word	0x20000170

08002e44 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e4e:	4b36      	ldr	r3, [pc, #216]	@ (8002f28 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e54:	4b35      	ldr	r3, [pc, #212]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f9f6 	bl	800224c <uxListRemove>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <prvAddCurrentTaskToDelayedList+0xec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f30 <prvAddCurrentTaskToDelayedList+0xec>)
 8002e7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d124      	bne.n	8002ed0 <prvAddCurrentTaskToDelayedList+0x8c>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d021      	beq.n	8002ed0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e8c:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	3204      	adds	r2, #4
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1d1a      	adds	r2, r3, #4
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002ec0:	615a      	str	r2, [r3, #20]
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f34 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ece:	e026      	b.n	8002f1e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d209      	bcs.n	8002efc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f7ff f970 	bl	80021da <vListInsert>
}
 8002efa:	e010      	b.n	8002f1e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002efc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7ff f966 	bl	80021da <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d202      	bcs.n	8002f1e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002f18:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6013      	str	r3, [r2, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000154 	.word	0x20000154
 8002f2c:	20000078 	.word	0x20000078
 8002f30:	20000158 	.word	0x20000158
 8002f34:	2000013c 	.word	0x2000013c
 8002f38:	2000010c 	.word	0x2000010c
 8002f3c:	20000108 	.word	0x20000108
 8002f40:	20000170 	.word	0x20000170

08002f44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b04      	subs	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3b04      	subs	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 0201 	bic.w	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3b04      	subs	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f74:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa8 <pxPortInitialiseStack+0x64>)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b14      	subs	r3, #20
 8002f7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3b04      	subs	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f06f 0202 	mvn.w	r2, #2
 8002f92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b20      	subs	r3, #32
 8002f98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	08002fad 	.word	0x08002fad

08002fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002fb6:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <prvTaskExitError+0x58>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d00b      	beq.n	8002fd8 <prvTaskExitError+0x2c>
        __asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	60fb      	str	r3, [r7, #12]
    }
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <prvTaskExitError+0x28>
        __asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	60bb      	str	r3, [r7, #8]
    }
 8002fea:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002fec:	bf00      	nop
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0fc      	beq.n	8002fee <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	2000000c 	.word	0x2000000c
	...

08003010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003010:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <pxCurrentTCBConst2>)
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	6808      	ldr	r0, [r1, #0]
 8003016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	f380 8809 	msr	PSP, r0
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f380 8811 	msr	BASEPRI, r0
 800302a:	4770      	bx	lr
 800302c:	f3af 8000 	nop.w

08003030 <pxCurrentTCBConst2>:
 8003030:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop

08003038 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003038:	4808      	ldr	r0, [pc, #32]	@ (800305c <prvPortStartFirstTask+0x24>)
 800303a:	6800      	ldr	r0, [r0, #0]
 800303c:	6800      	ldr	r0, [r0, #0]
 800303e:	f380 8808 	msr	MSP, r0
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f380 8814 	msr	CONTROL, r0
 800304a:	b662      	cpsie	i
 800304c:	b661      	cpsie	f
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	df00      	svc	0
 8003058:	bf00      	nop
 800305a:	0000      	.short	0x0000
 800305c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop

08003064 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800306a:	4b47      	ldr	r3, [pc, #284]	@ (8003188 <xPortStartScheduler+0x124>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a47      	ldr	r2, [pc, #284]	@ (800318c <xPortStartScheduler+0x128>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10b      	bne.n	800308c <xPortStartScheduler+0x28>
        __asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60fb      	str	r3, [r7, #12]
    }
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800308c:	4b3e      	ldr	r3, [pc, #248]	@ (8003188 <xPortStartScheduler+0x124>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3f      	ldr	r2, [pc, #252]	@ (8003190 <xPortStartScheduler+0x12c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10b      	bne.n	80030ae <xPortStartScheduler+0x4a>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	613b      	str	r3, [r7, #16]
    }
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ae:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <xPortStartScheduler+0x130>)
 80030b0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	22ff      	movs	r2, #255	@ 0xff
 80030be:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <xPortStartScheduler+0x134>)
 80030d4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030d6:	4b31      	ldr	r3, [pc, #196]	@ (800319c <xPortStartScheduler+0x138>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030dc:	e009      	b.n	80030f2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80030de:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <xPortStartScheduler+0x138>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	4a2d      	ldr	r2, [pc, #180]	@ (800319c <xPortStartScheduler+0x138>)
 80030e6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	2b80      	cmp	r3, #128	@ 0x80
 80030fc:	d0ef      	beq.n	80030de <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030fe:	4b27      	ldr	r3, [pc, #156]	@ (800319c <xPortStartScheduler+0x138>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1c3 0307 	rsb	r3, r3, #7
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00b      	beq.n	8003122 <xPortStartScheduler+0xbe>
        __asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60bb      	str	r3, [r7, #8]
    }
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <xPortStartScheduler+0x138>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <xPortStartScheduler+0x138>)
 800312a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <xPortStartScheduler+0x138>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003134:	4a19      	ldr	r2, [pc, #100]	@ (800319c <xPortStartScheduler+0x138>)
 8003136:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003140:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <xPortStartScheduler+0x13c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <xPortStartScheduler+0x13c>)
 8003146:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800314a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <xPortStartScheduler+0x13c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a13      	ldr	r2, [pc, #76]	@ (80031a0 <xPortStartScheduler+0x13c>)
 8003152:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003156:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003158:	f000 f968 	bl	800342c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <xPortStartScheduler+0x140>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003162:	f000 f987 	bl	8003474 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <xPortStartScheduler+0x144>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <xPortStartScheduler+0x144>)
 800316c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003170:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003172:	f7ff ff61 	bl	8003038 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003176:	f7ff fd49 	bl	8002c0c <vTaskSwitchContext>
    prvTaskExitError();
 800317a:	f7ff ff17 	bl	8002fac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	e000ed00 	.word	0xe000ed00
 800318c:	410fc271 	.word	0x410fc271
 8003190:	410fc270 	.word	0x410fc270
 8003194:	e000e400 	.word	0xe000e400
 8003198:	2000017c 	.word	0x2000017c
 800319c:	20000180 	.word	0x20000180
 80031a0:	e000ed20 	.word	0xe000ed20
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	e000ef34 	.word	0xe000ef34

080031ac <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031b2:	4b38      	ldr	r3, [pc, #224]	@ (8003294 <vInitPrioGroupValue+0xe8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a38      	ldr	r2, [pc, #224]	@ (8003298 <vInitPrioGroupValue+0xec>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	60fb      	str	r3, [r7, #12]
    }
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003294 <vInitPrioGroupValue+0xe8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a30      	ldr	r2, [pc, #192]	@ (800329c <vInitPrioGroupValue+0xf0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10b      	bne.n	80031f6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	613b      	str	r3, [r7, #16]
    }
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	e7fd      	b.n	80031f2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031f6:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <vInitPrioGroupValue+0xf4>)
 80031f8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	22ff      	movs	r2, #255	@ 0xff
 8003206:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b22      	ldr	r3, [pc, #136]	@ (80032a4 <vInitPrioGroupValue+0xf8>)
 800321c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800321e:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003224:	e009      	b.n	800323a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	4a1e      	ldr	r2, [pc, #120]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 800322e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003242:	2b80      	cmp	r3, #128	@ 0x80
 8003244:	d0ef      	beq.n	8003226 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003246:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	d00b      	beq.n	800326a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	60bb      	str	r3, [r7, #8]
    }
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800326a:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 8003272:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800327c:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <vInitPrioGroupValue+0xfc>)
 800327e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00
 8003298:	410fc271 	.word	0x410fc271
 800329c:	410fc270 	.word	0x410fc270
 80032a0:	e000e400 	.word	0xe000e400
 80032a4:	2000017c 	.word	0x2000017c
 80032a8:	20000180 	.word	0x20000180

080032ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	607b      	str	r3, [r7, #4]
    }
 80032c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <vPortEnterCritical+0x5c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003308 <vPortEnterCritical+0x5c>)
 80032ce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <vPortEnterCritical+0x5c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d110      	bne.n	80032fa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032d8:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <vPortEnterCritical+0x60>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <vPortEnterCritical+0x4e>
        __asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	603b      	str	r3, [r7, #0]
    }
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	e7fd      	b.n	80032f6 <vPortEnterCritical+0x4a>
    }
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003316:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <vPortExitCritical+0x50>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <vPortExitCritical+0x26>
        __asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
    }
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <vPortExitCritical+0x50>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <vPortExitCritical+0x50>)
 800333e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003340:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <vPortExitCritical+0x50>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <vPortExitCritical+0x44>
 8003348:	2300      	movs	r3, #0
 800334a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003352:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	2000000c 	.word	0x2000000c
	...

08003370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003370:	f3ef 8009 	mrs	r0, PSP
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	4b15      	ldr	r3, [pc, #84]	@ (80033d0 <pxCurrentTCBConst>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	f01e 0f10 	tst.w	lr, #16
 8003380:	bf08      	it	eq
 8003382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338a:	6010      	str	r0, [r2, #0]
 800338c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003394:	f380 8811 	msr	BASEPRI, r0
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f7ff fc34 	bl	8002c0c <vTaskSwitchContext>
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f380 8811 	msr	BASEPRI, r0
 80033ac:	bc09      	pop	{r0, r3}
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	6808      	ldr	r0, [r1, #0]
 80033b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b6:	f01e 0f10 	tst.w	lr, #16
 80033ba:	bf08      	it	eq
 80033bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033c0:	f380 8809 	msr	PSP, r0
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	f3af 8000 	nop.w

080033d0 <pxCurrentTCBConst>:
 80033d0:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
        __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	607b      	str	r3, [r7, #4]
    }
 80033f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80033f2:	f001 fb57 	bl	8004aa4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033f6:	f7ff faed 	bl	80029d4 <xTaskIncrementTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003400:	f001 fbae 	bl	8004b60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <SysTick_Handler+0x50>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e001      	b.n	8003412 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800340e:	f001 fb8b 	bl	8004b28 <SEGGER_SYSVIEW_RecordExitISR>
 8003412:	2300      	movs	r3, #0
 8003414:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f383 8811 	msr	BASEPRI, r3
    }
 800341c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <vPortSetupTimerInterrupt+0x34>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <vPortSetupTimerInterrupt+0x38>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <vPortSetupTimerInterrupt+0x3c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <vPortSetupTimerInterrupt+0x40>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	4a09      	ldr	r2, [pc, #36]	@ (8003470 <vPortSetupTimerInterrupt+0x44>)
 800344a:	3b01      	subs	r3, #1
 800344c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800344e:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <vPortSetupTimerInterrupt+0x34>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010
 8003464:	e000e018 	.word	0xe000e018
 8003468:	20000000 	.word	0x20000000
 800346c:	10624dd3 	.word	0x10624dd3
 8003470:	e000e014 	.word	0xe000e014

08003474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003484 <vPortEnableVFP+0x10>
 8003478:	6801      	ldr	r1, [r0, #0]
 800347a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800347e:	6001      	str	r1, [r0, #0]
 8003480:	4770      	bx	lr
 8003482:	0000      	.short	0x0000
 8003484:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop

0800348c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	d915      	bls.n	80034ca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800349e:	4a18      	ldr	r2, [pc, #96]	@ (8003500 <vPortValidateInterruptPriority+0x74>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034a8:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <vPortValidateInterruptPriority+0x78>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	7afa      	ldrb	r2, [r7, #11]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20b      	bcs.n	80034ca <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	607b      	str	r3, [r7, #4]
    }
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	e7fd      	b.n	80034c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <vPortValidateInterruptPriority+0x7c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <vPortValidateInterruptPriority+0x80>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90b      	bls.n	80034f2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	603b      	str	r3, [r7, #0]
    }
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <vPortValidateInterruptPriority+0x62>
    }
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e3f0 	.word	0xe000e3f0
 8003504:	2000017c 	.word	0x2000017c
 8003508:	e000ed0c 	.word	0xe000ed0c
 800350c:	20000180 	.word	0x20000180

08003510 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800351c:	f7ff f92a 	bl	8002774 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003520:	4b54      	ldr	r3, [pc, #336]	@ (8003674 <pvPortMalloc+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003528:	f000 f908 	bl	800373c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003532:	2208      	movs	r2, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	3308      	adds	r3, #8
 800353e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	43db      	mvns	r3, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d804      	bhi.n	8003554 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	e001      	b.n	8003558 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db71      	blt.n	8003642 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d06e      	beq.n	8003642 <pvPortMalloc+0x132>
 8003564:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <pvPortMalloc+0x168>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d869      	bhi.n	8003642 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800356e:	4b43      	ldr	r3, [pc, #268]	@ (800367c <pvPortMalloc+0x16c>)
 8003570:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003572:	4b42      	ldr	r3, [pc, #264]	@ (800367c <pvPortMalloc+0x16c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003578:	e004      	b.n	8003584 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d903      	bls.n	8003596 <pvPortMalloc+0x86>
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f1      	bne.n	800357a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003596:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <pvPortMalloc+0x164>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	429a      	cmp	r2, r3
 800359e:	d050      	beq.n	8003642 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	4413      	add	r3, r2
 80035a8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	2308      	movs	r3, #8
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	429a      	cmp	r2, r3
 80035c0:	d920      	bls.n	8003604 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <pvPortMalloc+0xdc>
        __asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	613b      	str	r3, [r7, #16]
    }
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	1ad2      	subs	r2, r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f000 f8f8 	bl	80037f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003604:	4b1c      	ldr	r3, [pc, #112]	@ (8003678 <pvPortMalloc+0x168>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	4a1a      	ldr	r2, [pc, #104]	@ (8003678 <pvPortMalloc+0x168>)
 8003610:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003612:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <pvPortMalloc+0x168>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <pvPortMalloc+0x170>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d203      	bcs.n	8003626 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800361e:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <pvPortMalloc+0x168>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <pvPortMalloc+0x170>)
 8003624:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003638:	4b12      	ldr	r3, [pc, #72]	@ (8003684 <pvPortMalloc+0x174>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a11      	ldr	r2, [pc, #68]	@ (8003684 <pvPortMalloc+0x174>)
 8003640:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003642:	f7ff f8a5 	bl	8002790 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <pvPortMalloc+0x158>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
    }
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <pvPortMalloc+0x154>
    return pvReturn;
 8003668:	69fb      	ldr	r3, [r7, #28]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3728      	adds	r7, #40	@ 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20012d8c 	.word	0x20012d8c
 8003678:	20012d90 	.word	0x20012d90
 800367c:	20012d84 	.word	0x20012d84
 8003680:	20012d94 	.word	0x20012d94
 8003684:	20012d98 	.word	0x20012d98

08003688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d047      	beq.n	800372a <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800369a:	2308      	movs	r3, #8
 800369c:	425b      	negs	r3, r3
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0b      	blt.n	80036c8 <vPortFree+0x40>
        __asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	60fb      	str	r3, [r7, #12]
    }
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <vPortFree+0x60>
        __asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	60bb      	str	r3, [r7, #8]
    }
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	e7fd      	b.n	80036e4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da1c      	bge.n	800372a <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d118      	bne.n	800372a <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003704:	f7ff f836 	bl	8002774 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <vPortFree+0xac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4413      	add	r3, r2
 8003712:	4a08      	ldr	r2, [pc, #32]	@ (8003734 <vPortFree+0xac>)
 8003714:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003716:	6938      	ldr	r0, [r7, #16]
 8003718:	f000 f86c 	bl	80037f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <vPortFree+0xb0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a05      	ldr	r2, [pc, #20]	@ (8003738 <vPortFree+0xb0>)
 8003724:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003726:	f7ff f833 	bl	8002790 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20012d90 	.word	0x20012d90
 8003738:	20012d9c 	.word	0x20012d9c

0800373c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003742:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003746:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003748:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <prvHeapInit+0xa4>)
 800374a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3307      	adds	r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <prvHeapInit+0xa4>)
 800376c:	4413      	add	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003774:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <prvHeapInit+0xa8>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800377a:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <prvHeapInit+0xa8>)
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003788:	2208      	movs	r2, #8
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0307 	bic.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <prvHeapInit+0xac>)
 800379c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <prvHeapInit+0xac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <prvHeapInit+0xac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	1ad2      	subs	r2, r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <prvHeapInit+0xac>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a08      	ldr	r2, [pc, #32]	@ (80037ec <prvHeapInit+0xb0>)
 80037ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <prvHeapInit+0xb4>)
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000184 	.word	0x20000184
 80037e4:	20012d84 	.word	0x20012d84
 80037e8:	20012d8c 	.word	0x20012d8c
 80037ec:	20012d94 	.word	0x20012d94
 80037f0:	20012d90 	.word	0x20012d90

080037f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037fc:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <prvInsertBlockIntoFreeList+0xac>)
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e002      	b.n	8003808 <prvInsertBlockIntoFreeList+0x14>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	d8f7      	bhi.n	8003802 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d108      	bne.n	8003836 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	441a      	add	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d118      	bne.n	800387c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b15      	ldr	r3, [pc, #84]	@ (80038a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d00d      	beq.n	8003872 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e008      	b.n	8003884 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003872:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e003      	b.n	8003884 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d002      	beq.n	8003892 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20012d84 	.word	0x20012d84
 80038a4:	20012d8c 	.word	0x20012d8c

080038a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80038ac:	4803      	ldr	r0, [pc, #12]	@ (80038bc <_cbSendSystemDesc+0x14>)
 80038ae:	f001 f8a3 	bl	80049f8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80038b2:	4803      	ldr	r0, [pc, #12]	@ (80038c0 <_cbSendSystemDesc+0x18>)
 80038b4:	f001 f8a0 	bl	80049f8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	080050ec 	.word	0x080050ec
 80038c0:	08005124 	.word	0x08005124

080038c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80038d2:	4a06      	ldr	r2, [pc, #24]	@ (80038ec <SEGGER_SYSVIEW_Conf+0x28>)
 80038d4:	f000 fd16 	bl	8004304 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80038d8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80038dc:	f000 fd56 	bl	800438c <SEGGER_SYSVIEW_SetRAMBase>
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000000 	.word	0x20000000
 80038e8:	080038a9 	.word	0x080038a9
 80038ec:	080051c8 	.word	0x080051c8

080038f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e033      	b.n	8003964 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038fc:	491e      	ldr	r1, [pc, #120]	@ (8003978 <_cbSendTaskList+0x88>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	491a      	ldr	r1, [pc, #104]	@ (8003978 <_cbSendTaskList+0x88>)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3304      	adds	r3, #4
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	4c16      	ldr	r4, [pc, #88]	@ (8003978 <_cbSendTaskList+0x88>)
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4423      	add	r3, r4
 800392c:	3308      	adds	r3, #8
 800392e:	681c      	ldr	r4, [r3, #0]
 8003930:	4d11      	ldr	r5, [pc, #68]	@ (8003978 <_cbSendTaskList+0x88>)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	442b      	add	r3, r5
 800393e:	330c      	adds	r3, #12
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	4e0d      	ldr	r6, [pc, #52]	@ (8003978 <_cbSendTaskList+0x88>)
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4433      	add	r3, r6
 8003950:	3310      	adds	r3, #16
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	462b      	mov	r3, r5
 8003958:	4622      	mov	r2, r4
 800395a:	f000 f8bd 	bl	8003ad8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3301      	adds	r3, #1
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <_cbSendTaskList+0x8c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3c6      	bcc.n	80038fc <_cbSendTaskList+0xc>
  }
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003978:	20012da0 	.word	0x20012da0
 800397c:	20012e40 	.word	0x20012e40

08003980 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003988:	f7ff f812 	bl	80029b0 <xTaskGetTickCountFromISR>
 800398c:	4603      	mov	r3, r0
 800398e:	2200      	movs	r2, #0
 8003990:	469a      	mov	sl, r3
 8003992:	4693      	mov	fp, r2
 8003994:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	f04f 0a00 	mov.w	sl, #0
 80039a4:	f04f 0b00 	mov.w	fp, #0
 80039a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80039ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80039b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80039b4:	4652      	mov	r2, sl
 80039b6:	465b      	mov	r3, fp
 80039b8:	1a14      	subs	r4, r2, r0
 80039ba:	eb63 0501 	sbc.w	r5, r3, r1
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	00ab      	lsls	r3, r5, #2
 80039c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80039cc:	00a2      	lsls	r2, r4, #2
 80039ce:	4614      	mov	r4, r2
 80039d0:	461d      	mov	r5, r3
 80039d2:	eb14 0800 	adds.w	r8, r4, r0
 80039d6:	eb45 0901 	adc.w	r9, r5, r1
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ee:	4690      	mov	r8, r2
 80039f0:	4699      	mov	r9, r3
 80039f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80039f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a16:	2205      	movs	r2, #5
 8003a18:	492b      	ldr	r1, [pc, #172]	@ (8003ac8 <SYSVIEW_AddTask+0xc0>)
 8003a1a:	68b8      	ldr	r0, [r7, #8]
 8003a1c:	f001 fad6 	bl	8004fcc <memcmp>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04b      	beq.n	8003abe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a26:	4b29      	ldr	r3, [pc, #164]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b07      	cmp	r3, #7
 8003a2c:	d903      	bls.n	8003a36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a2e:	4828      	ldr	r0, [pc, #160]	@ (8003ad0 <SYSVIEW_AddTask+0xc8>)
 8003a30:	f001 fa70 	bl	8004f14 <SEGGER_SYSVIEW_Warn>
    return;
 8003a34:	e044      	b.n	8003ac0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a36:	4b25      	ldr	r3, [pc, #148]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4926      	ldr	r1, [pc, #152]	@ (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4921      	ldr	r1, [pc, #132]	@ (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	491b      	ldr	r1, [pc, #108]	@ (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3308      	adds	r3, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a76:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4916      	ldr	r1, [pc, #88]	@ (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	330c      	adds	r3, #12
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4910      	ldr	r1, [pc, #64]	@ (8003ad4 <SYSVIEW_AddTask+0xcc>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3310      	adds	r3, #16
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	4a08      	ldr	r2, [pc, #32]	@ (8003acc <SYSVIEW_AddTask+0xc4>)
 8003aaa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f80e 	bl	8003ad8 <SYSVIEW_SendTaskInfo>
 8003abc:	e000      	b.n	8003ac0 <SYSVIEW_AddTask+0xb8>
    return;
 8003abe:	bf00      	nop

}
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08005134 	.word	0x08005134
 8003acc:	20012e40 	.word	0x20012e40
 8003ad0:	0800513c 	.word	0x0800513c
 8003ad4:	20012da0 	.word	0x20012da0

08003ad8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	@ 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	2214      	movs	r2, #20
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 fa7c 	bl	8004fec <memset>
  TaskInfo.TaskID     = TaskID;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fe7b 	bl	8004808 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	@ 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b22:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <_DoInit+0x98>)
 8003b24:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a20      	ldr	r2, [pc, #128]	@ (8003bb8 <_DoInit+0x9c>)
 8003b36:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a20      	ldr	r2, [pc, #128]	@ (8003bbc <_DoInit+0xa0>)
 8003b3c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b44:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	@ (8003bb8 <_DoInit+0x9c>)
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <_DoInit+0xa4>)
 8003b62:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2210      	movs	r2, #16
 8003b68:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	4a10      	ldr	r2, [pc, #64]	@ (8003bc4 <_DoInit+0xa8>)
 8003b82:	6810      	ldr	r0, [r2, #0]
 8003b84:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b86:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc8 <_DoInit+0xac>)
 8003b8e:	6810      	ldr	r0, [r2, #0]
 8003b90:	6018      	str	r0, [r3, #0]
 8003b92:	8891      	ldrh	r1, [r2, #4]
 8003b94:	7992      	ldrb	r2, [r2, #6]
 8003b96:	8099      	strh	r1, [r3, #4]
 8003b98:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b9a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ba4:	f3bf 8f5f 	dmb	sy
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	20012e44 	.word	0x20012e44
 8003bb8:	0800518c 	.word	0x0800518c
 8003bbc:	20012eec 	.word	0x20012eec
 8003bc0:	200132ec 	.word	0x200132ec
 8003bc4:	08005198 	.word	0x08005198
 8003bc8:	0800519c 	.word	0x0800519c

08003bcc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	@ 0x30
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <SEGGER_RTT_ReadNoLock+0x1e>
 8003be6:	f7ff ff99 	bl	8003b1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	3360      	adds	r3, #96	@ 0x60
 8003bf6:	4a37      	ldr	r2, [pc, #220]	@ (8003cd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d92b      	bls.n	8003c70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bf28      	it	cs
 8003c2a:	4613      	movcs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	4413      	add	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	6939      	ldr	r1, [r7, #16]
 8003c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c3e:	f001 fa01 	bl	8005044 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4413      	add	r3, r2
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d101      	bne.n	8003c70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bf28      	it	cs
 8003c80:	4613      	movcs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d019      	beq.n	8003cbe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	4413      	add	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	6939      	ldr	r1, [r7, #16]
 8003c98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c9a:	f001 f9d3 	bl	8005044 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4413      	add	r3, r2
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3730      	adds	r7, #48	@ 0x30
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20012e44 	.word	0x20012e44

08003cd8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003cf4:	f7ff ff12 	bl	8003b1c <_DoInit>
  SEGGER_RTT_LOCK();
 8003cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8003cfc:	f04f 0120 	mov.w	r1, #32
 8003d00:	f381 8811 	msr	BASEPRI, r1
 8003d04:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d06:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d08:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d0e:	6939      	ldr	r1, [r7, #16]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3304      	adds	r3, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	dbeb      	blt.n	8003d0e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d36:	e000      	b.n	8003d3a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d38:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	da3f      	bge.n	8003dc4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003d44:	6939      	ldr	r1, [r7, #16]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d58:	6939      	ldr	r1, [r7, #16]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	3304      	adds	r3, #4
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d6e:	6939      	ldr	r1, [r7, #16]
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3320      	adds	r3, #32
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	3328      	adds	r3, #40	@ 0x28
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	3324      	adds	r3, #36	@ 0x24
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003daa:	6939      	ldr	r1, [r7, #16]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	332c      	adds	r3, #44	@ 0x2c
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dbe:	f3bf 8f5f 	dmb	sy
 8003dc2:	e002      	b.n	8003dca <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20012e44 	.word	0x20012e44

08003de0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003dee:	4b33      	ldr	r3, [pc, #204]	@ (8003ebc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003dfc:	f7ff fe8e 	bl	8003b1c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e00:	4b2e      	ldr	r3, [pc, #184]	@ (8003ebc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e02:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d24d      	bcs.n	8003eac <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003e10:	f3ef 8311 	mrs	r3, BASEPRI
 8003e14:	f04f 0120 	mov.w	r1, #32
 8003e18:	f381 8811 	msr	BASEPRI, r1
 8003e1c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d031      	beq.n	8003e88 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	3360      	adds	r3, #96	@ 0x60
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e38:	6979      	ldr	r1, [r7, #20]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	3364      	adds	r3, #100	@ 0x64
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003e4c:	6979      	ldr	r1, [r7, #20]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3368      	adds	r3, #104	@ 0x68
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003e60:	6979      	ldr	r1, [r7, #20]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3370      	adds	r3, #112	@ 0x70
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003e74:	6979      	ldr	r1, [r7, #20]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	336c      	adds	r3, #108	@ 0x6c
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003e88:	6979      	ldr	r1, [r7, #20]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	440b      	add	r3, r1
 8003e96:	3374      	adds	r3, #116	@ 0x74
 8003e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e9a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e9c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e002      	b.n	8003eb2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20012e44 	.word	0x20012e44

08003ec0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ed0:	e002      	b.n	8003ed8 <_EncodeStr+0x18>
    Len++;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f6      	bne.n	8003ed2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d901      	bls.n	8003ef0 <_EncodeStr+0x30>
    Len = Limit;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2bfe      	cmp	r3, #254	@ 0xfe
 8003ef4:	d806      	bhi.n	8003f04 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e011      	b.n	8003f28 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	60fa      	str	r2, [r7, #12]
 8003f0a:	22ff      	movs	r2, #255	@ 0xff
 8003f0c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	60fa      	str	r2, [r7, #12]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	0a19      	lsrs	r1, r3, #8
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	60fa      	str	r2, [r7, #12]
 8003f24:	b2ca      	uxtb	r2, r1
 8003f26:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f2c:	e00a      	b.n	8003f44 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	1c53      	adds	r3, r2, #1
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1c59      	adds	r1, r3, #1
 8003f38:	60f9      	str	r1, [r7, #12]
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
    n++;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d3f0      	bcc.n	8003f2e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f7a:	4b35      	ldr	r3, [pc, #212]	@ (8004050 <_HandleIncomingPacket+0xdc>)
 8003f7c:	7e1b      	ldrb	r3, [r3, #24]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	1cfb      	adds	r3, r7, #3
 8003f82:	2201      	movs	r2, #1
 8003f84:	4619      	mov	r1, r3
 8003f86:	f7ff fe21 	bl	8003bcc <SEGGER_RTT_ReadNoLock>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dd59      	ble.n	8004048 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d032      	beq.n	8004000 <_HandleIncomingPacket+0x8c>
 8003f9a:	2b80      	cmp	r3, #128	@ 0x80
 8003f9c:	dc42      	bgt.n	8004024 <_HandleIncomingPacket+0xb0>
 8003f9e:	2b07      	cmp	r3, #7
 8003fa0:	dc16      	bgt.n	8003fd0 <_HandleIncomingPacket+0x5c>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	dd3e      	ble.n	8004024 <_HandleIncomingPacket+0xb0>
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	2b06      	cmp	r3, #6
 8003faa:	d83b      	bhi.n	8004024 <_HandleIncomingPacket+0xb0>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <_HandleIncomingPacket+0x40>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fd7 	.word	0x08003fd7
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe3 	.word	0x08003fe3
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fd2:	d034      	beq.n	800403e <_HandleIncomingPacket+0xca>
 8003fd4:	e026      	b.n	8004024 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003fd6:	f000 fa9d 	bl	8004514 <SEGGER_SYSVIEW_Start>
      break;
 8003fda:	e035      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003fdc:	f000 fb54 	bl	8004688 <SEGGER_SYSVIEW_Stop>
      break;
 8003fe0:	e032      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003fe2:	f000 fd2d 	bl	8004a40 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003fe6:	e02f      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003fe8:	f000 fcf2 	bl	80049d0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003fec:	e02c      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003fee:	f000 fb71 	bl	80046d4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ff2:	e029      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ff4:	f000 ff50 	bl	8004e98 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ff8:	e026      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ffa:	f000 ff2f 	bl	8004e5c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003ffe:	e023      	b.n	8004048 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004000:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <_HandleIncomingPacket+0xdc>)
 8004002:	7e1b      	ldrb	r3, [r3, #24]
 8004004:	4618      	mov	r0, r3
 8004006:	1cfb      	adds	r3, r7, #3
 8004008:	2201      	movs	r2, #1
 800400a:	4619      	mov	r1, r3
 800400c:	f7ff fdde 	bl	8003bcc <SEGGER_RTT_ReadNoLock>
 8004010:	4603      	mov	r3, r0
 8004012:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	dd13      	ble.n	8004042 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fe9d 	bl	8004d5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004022:	e00e      	b.n	8004042 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	b25b      	sxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	da0c      	bge.n	8004046 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800402c:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <_HandleIncomingPacket+0xdc>)
 800402e:	7e1b      	ldrb	r3, [r3, #24]
 8004030:	4618      	mov	r0, r3
 8004032:	1cfb      	adds	r3, r7, #3
 8004034:	2201      	movs	r2, #1
 8004036:	4619      	mov	r1, r3
 8004038:	f7ff fdc8 	bl	8003bcc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800403c:	e003      	b.n	8004046 <_HandleIncomingPacket+0xd2>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <_HandleIncomingPacket+0xd4>
      break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <_HandleIncomingPacket+0xd4>
      break;
 8004046:	bf00      	nop
    }
  }
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20014304 	.word	0x20014304

08004054 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b08c      	sub	sp, #48	@ 0x30
 8004058:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800405a:	2301      	movs	r3, #1
 800405c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	3301      	adds	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406e:	e00b      	b.n	8004088 <_TrySendOverflowPacket+0x34>
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	1c59      	adds	r1, r3, #1
 8004078:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800407a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	09db      	lsrs	r3, r3, #7
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	2b7f      	cmp	r3, #127	@ 0x7f
 800408c:	d8f0      	bhi.n	8004070 <_TrySendOverflowPacket+0x1c>
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800409e:	4b25      	ldr	r3, [pc, #148]	@ (8004134 <_TrySendOverflowPacket+0xe0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80040a4:	4b22      	ldr	r3, [pc, #136]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	e00b      	b.n	80040d0 <_TrySendOverflowPacket+0x7c>
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	1c59      	adds	r1, r3, #1
 80040c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80040c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	09db      	lsrs	r3, r3, #7
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80040d4:	d8f0      	bhi.n	80040b8 <_TrySendOverflowPacket+0x64>
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	627a      	str	r2, [r7, #36]	@ 0x24
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80040e6:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	4618      	mov	r0, r3
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	f7fc f86a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040fc:	4603      	mov	r3, r0
 80040fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004106:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800410c:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	3b01      	subs	r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e004      	b.n	8004124 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	3301      	adds	r3, #1
 8004120:	4a03      	ldr	r2, [pc, #12]	@ (8004130 <_TrySendOverflowPacket+0xdc>)
 8004122:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004124:	693b      	ldr	r3, [r7, #16]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3730      	adds	r7, #48	@ 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20014304 	.word	0x20014304
 8004134:	e0001004 	.word	0xe0001004

08004138 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004144:	4b6c      	ldr	r3, [pc, #432]	@ (80042f8 <_SendPacket+0x1c0>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d010      	beq.n	800416e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800414c:	4b6a      	ldr	r3, [pc, #424]	@ (80042f8 <_SendPacket+0x1c0>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a3 	beq.w	800429c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004156:	4b68      	ldr	r3, [pc, #416]	@ (80042f8 <_SendPacket+0x1c0>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d109      	bne.n	8004172 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800415e:	f7ff ff79 	bl	8004054 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004162:	4b65      	ldr	r3, [pc, #404]	@ (80042f8 <_SendPacket+0x1c0>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	f040 809a 	bne.w	80042a0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800416c:	e001      	b.n	8004172 <_SendPacket+0x3a>
    goto Send;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <_SendPacket+0x3c>
Send:
 8004172:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b1f      	cmp	r3, #31
 8004178:	d809      	bhi.n	800418e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800417a:	4b5f      	ldr	r3, [pc, #380]	@ (80042f8 <_SendPacket+0x1c0>)
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 808b 	bne.w	80042a4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b17      	cmp	r3, #23
 8004192:	d807      	bhi.n	80041a4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b01      	subs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	e03d      	b.n	8004220 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80041b0:	d912      	bls.n	80041d8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	09da      	lsrs	r2, r3, #7
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	3a01      	subs	r2, #1
 80041ca:	60fa      	str	r2, [r7, #12]
 80041cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e006      	b.n	80041e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3b01      	subs	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80041ea:	d912      	bls.n	8004212 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	09da      	lsrs	r2, r3, #7
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	3a01      	subs	r2, #1
 8004204:	60fa      	str	r2, [r7, #12]
 8004206:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e006      	b.n	8004220 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b01      	subs	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004220:	4b36      	ldr	r3, [pc, #216]	@ (80042fc <_SendPacket+0x1c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004226:	4b34      	ldr	r3, [pc, #208]	@ (80042f8 <_SendPacket+0x1c0>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	e00b      	b.n	8004252 <_SendPacket+0x11a>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	1c59      	adds	r1, r3, #1
 8004242:	6279      	str	r1, [r7, #36]	@ 0x24
 8004244:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	09db      	lsrs	r3, r3, #7
 8004250:	623b      	str	r3, [r7, #32]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2b7f      	cmp	r3, #127	@ 0x7f
 8004256:	d8f0      	bhi.n	800423a <_SendPacket+0x102>
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	627a      	str	r2, [r7, #36]	@ 0x24
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004268:	4b23      	ldr	r3, [pc, #140]	@ (80042f8 <_SendPacket+0x1c0>)
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	4618      	mov	r0, r3
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	461a      	mov	r2, r3
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	f7fb ffaa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800427c:	4603      	mov	r3, r0
 800427e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004286:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <_SendPacket+0x1c0>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	60d3      	str	r3, [r2, #12]
 800428c:	e00b      	b.n	80042a6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800428e:	4b1a      	ldr	r3, [pc, #104]	@ (80042f8 <_SendPacket+0x1c0>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <_SendPacket+0x1c0>)
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e004      	b.n	80042a6 <_SendPacket+0x16e>
    goto SendDone;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <_SendPacket+0x16e>
      goto SendDone;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <_SendPacket+0x16e>
      goto SendDone;
 80042a4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <_SendPacket+0x1c0>)
 80042a8:	7e1b      	ldrb	r3, [r3, #24]
 80042aa:	4619      	mov	r1, r3
 80042ac:	4a14      	ldr	r2, [pc, #80]	@ (8004300 <_SendPacket+0x1c8>)
 80042ae:	460b      	mov	r3, r1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	440b      	add	r3, r1
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	336c      	adds	r3, #108	@ 0x6c
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b0e      	ldr	r3, [pc, #56]	@ (80042f8 <_SendPacket+0x1c0>)
 80042be:	7e1b      	ldrb	r3, [r3, #24]
 80042c0:	4618      	mov	r0, r3
 80042c2:	490f      	ldr	r1, [pc, #60]	@ (8004300 <_SendPacket+0x1c8>)
 80042c4:	4603      	mov	r3, r0
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4403      	add	r3, r0
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	3370      	adds	r3, #112	@ 0x70
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d00b      	beq.n	80042ee <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80042d6:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <_SendPacket+0x1c0>)
 80042d8:	789b      	ldrb	r3, [r3, #2]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d107      	bne.n	80042ee <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80042de:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <_SendPacket+0x1c0>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80042e4:	f7ff fe46 	bl	8003f74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80042e8:	4b03      	ldr	r3, [pc, #12]	@ (80042f8 <_SendPacket+0x1c0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80042ee:	bf00      	nop
 80042f0:	3728      	adds	r7, #40	@ 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20014304 	.word	0x20014304
 80042fc:	e0001004 	.word	0xe0001004
 8004300:	20012e44 	.word	0x20012e44

08004304 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004312:	2300      	movs	r3, #0
 8004314:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004318:	4917      	ldr	r1, [pc, #92]	@ (8004378 <SEGGER_SYSVIEW_Init+0x74>)
 800431a:	4818      	ldr	r0, [pc, #96]	@ (800437c <SEGGER_SYSVIEW_Init+0x78>)
 800431c:	f7ff fcdc 	bl	8003cd8 <SEGGER_RTT_AllocUpBuffer>
 8004320:	4603      	mov	r3, r0
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b16      	ldr	r3, [pc, #88]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004326:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004328:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 800432a:	785a      	ldrb	r2, [r3, #1]
 800432c:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 800432e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004330:	4b13      	ldr	r3, [pc, #76]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004332:	7e1b      	ldrb	r3, [r3, #24]
 8004334:	4618      	mov	r0, r3
 8004336:	2300      	movs	r3, #0
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	2308      	movs	r3, #8
 800433c:	4a11      	ldr	r2, [pc, #68]	@ (8004384 <SEGGER_SYSVIEW_Init+0x80>)
 800433e:	490f      	ldr	r1, [pc, #60]	@ (800437c <SEGGER_SYSVIEW_Init+0x78>)
 8004340:	f7ff fd4e 	bl	8003de0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004344:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800434a:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <SEGGER_SYSVIEW_Init+0x84>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a0c      	ldr	r2, [pc, #48]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004350:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004352:	4a0b      	ldr	r2, [pc, #44]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004358:	4a09      	ldr	r2, [pc, #36]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800435e:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004364:	4a06      	ldr	r2, [pc, #24]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800436a:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <SEGGER_SYSVIEW_Init+0x7c>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200132fc 	.word	0x200132fc
 800437c:	080051a4 	.word	0x080051a4
 8004380:	20014304 	.word	0x20014304
 8004384:	200142fc 	.word	0x200142fc
 8004388:	e0001004 	.word	0xe0001004

0800438c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004394:	4a04      	ldr	r2, [pc, #16]	@ (80043a8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6113      	str	r3, [r2, #16]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20014304 	.word	0x20014304

080043ac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80043b4:	f3ef 8311 	mrs	r3, BASEPRI
 80043b8:	f04f 0120 	mov.w	r1, #32
 80043bc:	f381 8811 	msr	BASEPRI, r1
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4808      	ldr	r0, [pc, #32]	@ (80043e4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80043c4:	f7ff fdc9 	bl	8003f5a <_PreparePacket>
 80043c8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68b8      	ldr	r0, [r7, #8]
 80043d0:	f7ff feb2 	bl	8004138 <_SendPacket>
  RECORD_END();
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f383 8811 	msr	BASEPRI, r3
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20014334 	.word	0x20014334

080043e8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043f2:	f3ef 8311 	mrs	r3, BASEPRI
 80043f6:	f04f 0120 	mov.w	r1, #32
 80043fa:	f381 8811 	msr	BASEPRI, r1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	4816      	ldr	r0, [pc, #88]	@ (800445c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004402:	f7ff fdaa 	bl	8003f5a <_PreparePacket>
 8004406:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e00b      	b.n	800442e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	1c59      	adds	r1, r3, #1
 800441e:	61f9      	str	r1, [r7, #28]
 8004420:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	09db      	lsrs	r3, r3, #7
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b7f      	cmp	r3, #127	@ 0x7f
 8004432:	d8f0      	bhi.n	8004416 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	61fa      	str	r2, [r7, #28]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	6938      	ldr	r0, [r7, #16]
 800444a:	f7ff fe75 	bl	8004138 <_SendPacket>
  RECORD_END();
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f383 8811 	msr	BASEPRI, r3
}
 8004454:	bf00      	nop
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20014334 	.word	0x20014334

08004460 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	@ 0x30
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800446c:	f3ef 8311 	mrs	r3, BASEPRI
 8004470:	f04f 0120 	mov.w	r1, #32
 8004474:	f381 8811 	msr	BASEPRI, r1
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	4825      	ldr	r0, [pc, #148]	@ (8004510 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800447c:	f7ff fd6d 	bl	8003f5a <_PreparePacket>
 8004480:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800448e:	e00b      	b.n	80044a8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	b2da      	uxtb	r2, r3
 8004494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800449a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a4:	09db      	lsrs	r3, r3, #7
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80044ac:	d8f0      	bhi.n	8004490 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	e00b      	b.n	80044e0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	1c59      	adds	r1, r3, #1
 80044d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80044d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	09db      	lsrs	r3, r3, #7
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80044e4:	d8f0      	bhi.n	80044c8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	6979      	ldr	r1, [r7, #20]
 80044fa:	69b8      	ldr	r0, [r7, #24]
 80044fc:	f7ff fe1c 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f383 8811 	msr	BASEPRI, r3
}
 8004506:	bf00      	nop
 8004508:	3730      	adds	r7, #48	@ 0x30
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20014334 	.word	0x20014334

08004514 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b08c      	sub	sp, #48	@ 0x30
 8004518:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800451a:	4b58      	ldr	r3, [pc, #352]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004520:	f3ef 8311 	mrs	r3, BASEPRI
 8004524:	f04f 0120 	mov.w	r1, #32
 8004528:	f381 8811 	msr	BASEPRI, r1
 800452c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800452e:	4b53      	ldr	r3, [pc, #332]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	220a      	movs	r2, #10
 8004534:	4952      	ldr	r1, [pc, #328]	@ (8004680 <SEGGER_SYSVIEW_Start+0x16c>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7fb fe4a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004542:	200a      	movs	r0, #10
 8004544:	f7ff ff32 	bl	80043ac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004548:	f3ef 8311 	mrs	r3, BASEPRI
 800454c:	f04f 0120 	mov.w	r1, #32
 8004550:	f381 8811 	msr	BASEPRI, r1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	484b      	ldr	r0, [pc, #300]	@ (8004684 <SEGGER_SYSVIEW_Start+0x170>)
 8004558:	f7ff fcff 	bl	8003f5a <_PreparePacket>
 800455c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004566:	4b45      	ldr	r3, [pc, #276]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456c:	e00b      	b.n	8004586 <SEGGER_SYSVIEW_Start+0x72>
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	b2da      	uxtb	r2, r3
 8004572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004574:	1c59      	adds	r1, r3, #1
 8004576:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004578:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	09db      	lsrs	r3, r3, #7
 8004584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	2b7f      	cmp	r3, #127	@ 0x7f
 800458a:	d8f0      	bhi.n	800456e <SEGGER_SYSVIEW_Start+0x5a>
 800458c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004592:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a0:	4b36      	ldr	r3, [pc, #216]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	e00b      	b.n	80045c0 <SEGGER_SYSVIEW_Start+0xac>
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80045b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	09db      	lsrs	r3, r3, #7
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80045c4:	d8f0      	bhi.n	80045a8 <SEGGER_SYSVIEW_Start+0x94>
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	4b28      	ldr	r3, [pc, #160]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	e00b      	b.n	80045fa <SEGGER_SYSVIEW_Start+0xe6>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	61f9      	str	r1, [r7, #28]
 80045ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	09db      	lsrs	r3, r3, #7
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80045fe:	d8f0      	bhi.n	80045e2 <SEGGER_SYSVIEW_Start+0xce>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	61fa      	str	r2, [r7, #28]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	e00b      	b.n	8004632 <SEGGER_SYSVIEW_Start+0x11e>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	6179      	str	r1, [r7, #20]
 8004624:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b7f      	cmp	r3, #127	@ 0x7f
 8004636:	d8f0      	bhi.n	800461a <SEGGER_SYSVIEW_Start+0x106>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	617a      	str	r2, [r7, #20]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004648:	2218      	movs	r2, #24
 800464a:	6839      	ldr	r1, [r7, #0]
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fd73 	bl	8004138 <_SendPacket>
      RECORD_END();
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004658:	4b08      	ldr	r3, [pc, #32]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <SEGGER_SYSVIEW_Start+0x168>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004666:	f000 f9eb 	bl	8004a40 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800466a:	f000 f9b1 	bl	80049d0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800466e:	f000 fc13 	bl	8004e98 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004672:	bf00      	nop
 8004674:	3730      	adds	r7, #48	@ 0x30
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20014304 	.word	0x20014304
 8004680:	080051d0 	.word	0x080051d0
 8004684:	20014334 	.word	0x20014334

08004688 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800468e:	f3ef 8311 	mrs	r3, BASEPRI
 8004692:	f04f 0120 	mov.w	r1, #32
 8004696:	f381 8811 	msr	BASEPRI, r1
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	480b      	ldr	r0, [pc, #44]	@ (80046cc <SEGGER_SYSVIEW_Stop+0x44>)
 800469e:	f7ff fc5c 	bl	8003f5a <_PreparePacket>
 80046a2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80046a4:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80046ac:	220b      	movs	r2, #11
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f7ff fd41 	bl	8004138 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f383 8811 	msr	BASEPRI, r3
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20014334 	.word	0x20014334
 80046d0:	20014304 	.word	0x20014304

080046d4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	@ 0x30
 80046d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046da:	f3ef 8311 	mrs	r3, BASEPRI
 80046de:	f04f 0120 	mov.w	r1, #32
 80046e2:	f381 8811 	msr	BASEPRI, r1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	4845      	ldr	r0, [pc, #276]	@ (8004800 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80046ea:	f7ff fc36 	bl	8003f5a <_PreparePacket>
 80046ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f8:	4b42      	ldr	r3, [pc, #264]	@ (8004804 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fe:	e00b      	b.n	8004718 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	b2da      	uxtb	r2, r3
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800470a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	09db      	lsrs	r3, r3, #7
 8004716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471a:	2b7f      	cmp	r3, #127	@ 0x7f
 800471c:	d8f0      	bhi.n	8004700 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
 8004732:	4b34      	ldr	r3, [pc, #208]	@ (8004804 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	e00b      	b.n	8004752 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1c59      	adds	r1, r3, #1
 8004742:	6279      	str	r1, [r7, #36]	@ 0x24
 8004744:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	09db      	lsrs	r3, r3, #7
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b7f      	cmp	r3, #127	@ 0x7f
 8004756:	d8f0      	bhi.n	800473a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	627a      	str	r2, [r7, #36]	@ 0x24
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e00b      	b.n	800478c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	1c59      	adds	r1, r3, #1
 800477c:	61f9      	str	r1, [r7, #28]
 800477e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	09db      	lsrs	r3, r3, #7
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004790:	d8f0      	bhi.n	8004774 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	61fa      	str	r2, [r7, #28]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e00b      	b.n	80047c4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	6179      	str	r1, [r7, #20]
 80047b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	09db      	lsrs	r3, r3, #7
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80047c8:	d8f0      	bhi.n	80047ac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	617a      	str	r2, [r7, #20]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047da:	2218      	movs	r2, #24
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68b8      	ldr	r0, [r7, #8]
 80047e0:	f7ff fcaa 	bl	8004138 <_SendPacket>
  RECORD_END();
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80047f2:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	4798      	blx	r3
  }
}
 80047f8:	bf00      	nop
 80047fa:	3730      	adds	r7, #48	@ 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20014334 	.word	0x20014334
 8004804:	20014304 	.word	0x20014304

08004808 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b092      	sub	sp, #72	@ 0x48
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004810:	f3ef 8311 	mrs	r3, BASEPRI
 8004814:	f04f 0120 	mov.w	r1, #32
 8004818:	f381 8811 	msr	BASEPRI, r1
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	486a      	ldr	r0, [pc, #424]	@ (80049c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004820:	f7ff fb9b 	bl	8003f5a <_PreparePacket>
 8004824:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	647b      	str	r3, [r7, #68]	@ 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	643b      	str	r3, [r7, #64]	@ 0x40
 800483a:	e00b      	b.n	8004854 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800483c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483e:	b2da      	uxtb	r2, r3
 8004840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	6479      	str	r1, [r7, #68]	@ 0x44
 8004846:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	643b      	str	r3, [r7, #64]	@ 0x40
 8004854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004856:	2b7f      	cmp	r3, #127	@ 0x7f
 8004858:	d8f0      	bhi.n	800483c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800485a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004868:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004874:	e00b      	b.n	800488e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	b2da      	uxtb	r2, r3
 800487a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487c:	1c59      	adds	r1, r3, #1
 800487e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004880:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	09db      	lsrs	r3, r3, #7
 800488c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	2b7f      	cmp	r3, #127	@ 0x7f
 8004892:	d8f0      	bhi.n	8004876 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800489a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	4619      	mov	r1, r3
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fb07 	bl	8003ec0 <_EncodeStr>
 80048b2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80048b4:	2209      	movs	r2, #9
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	6938      	ldr	r0, [r7, #16]
 80048ba:	f7ff fc3d 	bl	8004138 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b40      	ldr	r3, [pc, #256]	@ (80049cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d2:	e00b      	b.n	80048ec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	6379      	str	r1, [r7, #52]	@ 0x34
 80048de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	09db      	lsrs	r3, r3, #7
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80048f0:	d8f0      	bhi.n	80048d4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80048f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80048f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004900:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490c:	e00b      	b.n	8004926 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	b2da      	uxtb	r2, r3
 8004912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004918:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	09db      	lsrs	r3, r3, #7
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	2b7f      	cmp	r3, #127	@ 0x7f
 800492a:	d8f0      	bhi.n	800490e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800492c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	623b      	str	r3, [r7, #32]
 8004946:	e00b      	b.n	8004960 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	6279      	str	r1, [r7, #36]	@ 0x24
 8004952:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	09db      	lsrs	r3, r3, #7
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2b7f      	cmp	r3, #127	@ 0x7f
 8004964:	d8f0      	bhi.n	8004948 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	627a      	str	r2, [r7, #36]	@ 0x24
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e00b      	b.n	8004998 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	61f9      	str	r1, [r7, #28]
 800498a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	09db      	lsrs	r3, r3, #7
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b7f      	cmp	r3, #127	@ 0x7f
 800499c:	d8f0      	bhi.n	8004980 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	61fa      	str	r2, [r7, #28]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80049ae:	2215      	movs	r2, #21
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	6938      	ldr	r0, [r7, #16]
 80049b4:	f7ff fbc0 	bl	8004138 <_SendPacket>
  RECORD_END();
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f383 8811 	msr	BASEPRI, r3
}
 80049be:	bf00      	nop
 80049c0:	3748      	adds	r7, #72	@ 0x48
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20014334 	.word	0x20014334
 80049cc:	20014304 	.word	0x20014304

080049d0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80049d4:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80049e6:	4b03      	ldr	r3, [pc, #12]	@ (80049f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4798      	blx	r3
  }
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20014304 	.word	0x20014304

080049f8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a00:	f3ef 8311 	mrs	r3, BASEPRI
 8004a04:	f04f 0120 	mov.w	r1, #32
 8004a08:	f381 8811 	msr	BASEPRI, r1
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	480b      	ldr	r0, [pc, #44]	@ (8004a3c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004a10:	f7ff faa3 	bl	8003f5a <_PreparePacket>
 8004a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a16:	2280      	movs	r2, #128	@ 0x80
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	6938      	ldr	r0, [r7, #16]
 8004a1c:	f7ff fa50 	bl	8003ec0 <_EncodeStr>
 8004a20:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004a22:	220e      	movs	r2, #14
 8004a24:	68f9      	ldr	r1, [r7, #12]
 8004a26:	6938      	ldr	r0, [r7, #16]
 8004a28:	f7ff fb86 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f383 8811 	msr	BASEPRI, r3
}
 8004a32:	bf00      	nop
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20014334 	.word	0x20014334

08004a40 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004a46:	4b15      	ldr	r3, [pc, #84]	@ (8004a9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01a      	beq.n	8004a84 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004a4e:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004a58:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4798      	blx	r3
 8004a60:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a64:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	000a      	movs	r2, r1
 8004a74:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a76:	4613      	mov	r3, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	200d      	movs	r0, #13
 8004a7e:	f7ff fcef 	bl	8004460 <SEGGER_SYSVIEW_RecordU32x2>
 8004a82:	e006      	b.n	8004a92 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	200c      	movs	r0, #12
 8004a8c:	f7ff fcac 	bl	80043e8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20014304 	.word	0x20014304
 8004aa0:	e0001004 	.word	0xe0001004

08004aa4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8004aae:	f04f 0120 	mov.w	r1, #32
 8004ab2:	f381 8811 	msr	BASEPRI, r1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	4819      	ldr	r0, [pc, #100]	@ (8004b20 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004aba:	f7ff fa4e 	bl	8003f5a <_PreparePacket>
 8004abe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ac4:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004acc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e00b      	b.n	8004af0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	6179      	str	r1, [r7, #20]
 8004ae2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004af4:	d8f0      	bhi.n	8004ad8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	617a      	str	r2, [r7, #20]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004b06:	2202      	movs	r2, #2
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	68b8      	ldr	r0, [r7, #8]
 8004b0c:	f7ff fb14 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f383 8811 	msr	BASEPRI, r3
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20014334 	.word	0x20014334
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b32:	f04f 0120 	mov.w	r1, #32
 8004b36:	f381 8811 	msr	BASEPRI, r1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	4807      	ldr	r0, [pc, #28]	@ (8004b5c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004b3e:	f7ff fa0c 	bl	8003f5a <_PreparePacket>
 8004b42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004b44:	2203      	movs	r2, #3
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	6838      	ldr	r0, [r7, #0]
 8004b4a:	f7ff faf5 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f383 8811 	msr	BASEPRI, r3
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20014334 	.word	0x20014334

08004b60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b66:	f3ef 8311 	mrs	r3, BASEPRI
 8004b6a:	f04f 0120 	mov.w	r1, #32
 8004b6e:	f381 8811 	msr	BASEPRI, r1
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	4807      	ldr	r0, [pc, #28]	@ (8004b94 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004b76:	f7ff f9f0 	bl	8003f5a <_PreparePacket>
 8004b7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004b7c:	2212      	movs	r2, #18
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6838      	ldr	r0, [r7, #0]
 8004b82:	f7ff fad9 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f383 8811 	msr	BASEPRI, r3
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20014334 	.word	0x20014334

08004b98 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba2:	f04f 0120 	mov.w	r1, #32
 8004ba6:	f381 8811 	msr	BASEPRI, r1
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	4807      	ldr	r0, [pc, #28]	@ (8004bcc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004bae:	f7ff f9d4 	bl	8003f5a <_PreparePacket>
 8004bb2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004bb4:	2211      	movs	r2, #17
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	6838      	ldr	r0, [r7, #0]
 8004bba:	f7ff fabd 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f383 8811 	msr	BASEPRI, r3
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20014334 	.word	0x20014334

08004bd0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bdc:	f04f 0120 	mov.w	r1, #32
 8004be0:	f381 8811 	msr	BASEPRI, r1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	4819      	ldr	r0, [pc, #100]	@ (8004c4c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004be8:	f7ff f9b7 	bl	8003f5a <_PreparePacket>
 8004bec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004bf2:	4b17      	ldr	r3, [pc, #92]	@ (8004c50 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	e00b      	b.n	8004c1e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	1c59      	adds	r1, r3, #1
 8004c0e:	61f9      	str	r1, [r7, #28]
 8004c10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	09db      	lsrs	r3, r3, #7
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c22:	d8f0      	bhi.n	8004c06 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	61fa      	str	r2, [r7, #28]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004c34:	2208      	movs	r2, #8
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	6938      	ldr	r0, [r7, #16]
 8004c3a:	f7ff fa7d 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f383 8811 	msr	BASEPRI, r3
}
 8004c44:	bf00      	nop
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20014334 	.word	0x20014334
 8004c50:	20014304 	.word	0x20014304

08004c54 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c60:	f04f 0120 	mov.w	r1, #32
 8004c64:	f381 8811 	msr	BASEPRI, r1
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	4819      	ldr	r0, [pc, #100]	@ (8004cd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004c6c:	f7ff f975 	bl	8003f5a <_PreparePacket>
 8004c70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c76:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e00b      	b.n	8004ca2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	1c59      	adds	r1, r3, #1
 8004c92:	61f9      	str	r1, [r7, #28]
 8004c94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	09db      	lsrs	r3, r3, #7
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ca6:	d8f0      	bhi.n	8004c8a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	61fa      	str	r2, [r7, #28]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004cb8:	2204      	movs	r2, #4
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	6938      	ldr	r0, [r7, #16]
 8004cbe:	f7ff fa3b 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f383 8811 	msr	BASEPRI, r3
}
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20014334 	.word	0x20014334
 8004cd4:	20014304 	.word	0x20014304

08004cd8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce4:	f04f 0120 	mov.w	r1, #32
 8004ce8:	f381 8811 	msr	BASEPRI, r1
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	4819      	ldr	r0, [pc, #100]	@ (8004d54 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004cf0:	f7ff f933 	bl	8003f5a <_PreparePacket>
 8004cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cfa:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e00b      	b.n	8004d26 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	61f9      	str	r1, [r7, #28]
 8004d18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	09db      	lsrs	r3, r3, #7
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d2a:	d8f0      	bhi.n	8004d0e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004d3c:	2206      	movs	r2, #6
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	6938      	ldr	r0, [r7, #16]
 8004d42:	f7ff f9f9 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f383 8811 	msr	BASEPRI, r3
}
 8004d4c:	bf00      	nop
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20014334 	.word	0x20014334
 8004d58:	20014304 	.word	0x20014304

08004d5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	@ 0x30
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004d66:	4b3b      	ldr	r3, [pc, #236]	@ (8004e54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d06d      	beq.n	8004e4a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004d6e:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d74:	2300      	movs	r3, #0
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d78:	e008      	b.n	8004d8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	3301      	adds	r3, #1
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3f2      	bcc.n	8004d7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004d94:	e000      	b.n	8004d98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004d96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d055      	beq.n	8004e4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004da2:	f04f 0120 	mov.w	r1, #32
 8004da6:	f381 8811 	msr	BASEPRI, r1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	482a      	ldr	r0, [pc, #168]	@ (8004e58 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004dae:	f7ff f8d4 	bl	8003f5a <_PreparePacket>
 8004db2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	e00b      	b.n	8004dda <SEGGER_SYSVIEW_SendModule+0x7e>
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dde:	d8f0      	bhi.n	8004dc2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e00b      	b.n	8004e14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	61f9      	str	r1, [r7, #28]
 8004e06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	09db      	lsrs	r3, r3, #7
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e18:	d8f0      	bhi.n	8004dfc <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	61fa      	str	r2, [r7, #28]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2280      	movs	r2, #128	@ 0x80
 8004e30:	4619      	mov	r1, r3
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7ff f844 	bl	8003ec0 <_EncodeStr>
 8004e38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e3a:	2216      	movs	r2, #22
 8004e3c:	68f9      	ldr	r1, [r7, #12]
 8004e3e:	6938      	ldr	r0, [r7, #16]
 8004e40:	f7ff f97a 	bl	8004138 <_SendPacket>
      RECORD_END();
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	3730      	adds	r7, #48	@ 0x30
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2001432c 	.word	0x2001432c
 8004e58:	20014334 	.word	0x20014334

08004e5c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004e62:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00f      	beq.n	8004e8a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f2      	bne.n	8004e70 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2001432c 	.word	0x2001432c

08004e98 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea2:	f04f 0120 	mov.w	r1, #32
 8004ea6:	f381 8811 	msr	BASEPRI, r1
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	4817      	ldr	r0, [pc, #92]	@ (8004f0c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004eae:	f7ff f854 	bl	8003f5a <_PreparePacket>
 8004eb2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	e00b      	b.n	8004edc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	6179      	str	r1, [r7, #20]
 8004ece:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	09db      	lsrs	r3, r3, #7
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ee0:	d8f0      	bhi.n	8004ec4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	617a      	str	r2, [r7, #20]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004ef2:	221b      	movs	r2, #27
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	68b8      	ldr	r0, [r7, #8]
 8004ef8:	f7ff f91e 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f383 8811 	msr	BASEPRI, r3
}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20014334 	.word	0x20014334
 8004f10:	20014330 	.word	0x20014330

08004f14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f20:	f04f 0120 	mov.w	r1, #32
 8004f24:	f381 8811 	msr	BASEPRI, r1
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	4827      	ldr	r0, [pc, #156]	@ (8004fc8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f2c:	f7ff f815 	bl	8003f5a <_PreparePacket>
 8004f30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f32:	2280      	movs	r2, #128	@ 0x80
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	6938      	ldr	r0, [r7, #16]
 8004f38:	f7fe ffc2 	bl	8003ec0 <_EncodeStr>
 8004f3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f42:	2301      	movs	r3, #1
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	e00b      	b.n	8004f60 <SEGGER_SYSVIEW_Warn+0x4c>
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	09db      	lsrs	r3, r3, #7
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f64:	d8f0      	bhi.n	8004f48 <SEGGER_SYSVIEW_Warn+0x34>
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f6c:	6a3a      	ldr	r2, [r7, #32]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e00b      	b.n	8004f98 <SEGGER_SYSVIEW_Warn+0x84>
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	61f9      	str	r1, [r7, #28]
 8004f8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	09db      	lsrs	r3, r3, #7
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f9c:	d8f0      	bhi.n	8004f80 <SEGGER_SYSVIEW_Warn+0x6c>
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	61fa      	str	r2, [r7, #28]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004fae:	221a      	movs	r2, #26
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	6938      	ldr	r0, [r7, #16]
 8004fb4:	f7ff f8c0 	bl	8004138 <_SendPacket>
  RECORD_END();
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f383 8811 	msr	BASEPRI, r3
}
 8004fbe:	bf00      	nop
 8004fc0:	3728      	adds	r7, #40	@ 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20014334 	.word	0x20014334

08004fcc <memcmp>:
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	3901      	subs	r1, #1
 8004fd0:	4402      	add	r2, r0
 8004fd2:	4290      	cmp	r0, r2
 8004fd4:	d101      	bne.n	8004fda <memcmp+0xe>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e005      	b.n	8004fe6 <memcmp+0x1a>
 8004fda:	7803      	ldrb	r3, [r0, #0]
 8004fdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d001      	beq.n	8004fe8 <memcmp+0x1c>
 8004fe4:	1b18      	subs	r0, r3, r4
 8004fe6:	bd10      	pop	{r4, pc}
 8004fe8:	3001      	adds	r0, #1
 8004fea:	e7f2      	b.n	8004fd2 <memcmp+0x6>

08004fec <memset>:
 8004fec:	4402      	add	r2, r0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <__libc_init_array>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8005034 <__libc_init_array+0x38>)
 8005000:	4c0d      	ldr	r4, [pc, #52]	@ (8005038 <__libc_init_array+0x3c>)
 8005002:	1b64      	subs	r4, r4, r5
 8005004:	10a4      	asrs	r4, r4, #2
 8005006:	2600      	movs	r6, #0
 8005008:	42a6      	cmp	r6, r4
 800500a:	d109      	bne.n	8005020 <__libc_init_array+0x24>
 800500c:	4d0b      	ldr	r5, [pc, #44]	@ (800503c <__libc_init_array+0x40>)
 800500e:	4c0c      	ldr	r4, [pc, #48]	@ (8005040 <__libc_init_array+0x44>)
 8005010:	f000 f826 	bl	8005060 <_init>
 8005014:	1b64      	subs	r4, r4, r5
 8005016:	10a4      	asrs	r4, r4, #2
 8005018:	2600      	movs	r6, #0
 800501a:	42a6      	cmp	r6, r4
 800501c:	d105      	bne.n	800502a <__libc_init_array+0x2e>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	f855 3b04 	ldr.w	r3, [r5], #4
 8005024:	4798      	blx	r3
 8005026:	3601      	adds	r6, #1
 8005028:	e7ee      	b.n	8005008 <__libc_init_array+0xc>
 800502a:	f855 3b04 	ldr.w	r3, [r5], #4
 800502e:	4798      	blx	r3
 8005030:	3601      	adds	r6, #1
 8005032:	e7f2      	b.n	800501a <__libc_init_array+0x1e>
 8005034:	080051e4 	.word	0x080051e4
 8005038:	080051e4 	.word	0x080051e4
 800503c:	080051e4 	.word	0x080051e4
 8005040:	080051e8 	.word	0x080051e8

08005044 <memcpy>:
 8005044:	440a      	add	r2, r1
 8005046:	4291      	cmp	r1, r2
 8005048:	f100 33ff 	add.w	r3, r0, #4294967295
 800504c:	d100      	bne.n	8005050 <memcpy+0xc>
 800504e:	4770      	bx	lr
 8005050:	b510      	push	{r4, lr}
 8005052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505a:	4291      	cmp	r1, r2
 800505c:	d1f9      	bne.n	8005052 <memcpy+0xe>
 800505e:	bd10      	pop	{r4, pc}

08005060 <_init>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr

0800506c <_fini>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr
