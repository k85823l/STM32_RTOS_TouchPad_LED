
006LED_Task_ISR_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005c20  08005c20  00006c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d9c  08005d9c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d9c  08005d9c  00006d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da4  08005da4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00006da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005da8  08005da8  00006da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005dac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00014430  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014440  20014440  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001143e  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002962  00000000  00000000  0001847e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  0001ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0d  00000000  00000000  0001bed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023133  00000000  00000000  0001cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d13  00000000  00000000  0003fd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c5e  00000000  00000000  00052a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129689  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046bc  00000000  00000000  001296cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  0012dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c08 	.word	0x08005c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005c08 	.word	0x08005c08

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e6c 	.word	0x20012e6c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fc97 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f89b 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f903 	bl	80007a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
#if (SEGGER_UART_REC == 1)
  SEGGER_UART_init(500000);
#endif
  /*Enable the CYCCNT*/
  DWT_CTRL|= (1<< 0);
 80005a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000698 <main+0x108>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a3c      	ldr	r2, [pc, #240]	@ (8000698 <main+0x108>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80005ae:	f003 fd51 	bl	8004054 <SEGGER_SYSVIEW_Conf>

#if (SEGGER_UART_REC == 0)
  SEGGER_SYSVIEW_Start();
 80005b2:	f004 fd73 	bl	800509c <SEGGER_SYSVIEW_Start>
#endif

  status = xTaskCreate(taskLED_Green_handler, "Task-LED", 200, "Green_LED_Task Activation", 3, &taskLED_Green_handle);
 80005b6:	4b39      	ldr	r3, [pc, #228]	@ (800069c <main+0x10c>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2303      	movs	r3, #3
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4b38      	ldr	r3, [pc, #224]	@ (80006a0 <main+0x110>)
 80005c0:	22c8      	movs	r2, #200	@ 0xc8
 80005c2:	4938      	ldr	r1, [pc, #224]	@ (80006a4 <main+0x114>)
 80005c4:	4838      	ldr	r0, [pc, #224]	@ (80006a8 <main+0x118>)
 80005c6:	f001 ffa3 	bl	8002510 <xTaskCreate>
 80005ca:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00b      	beq.n	80005ea <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d6:	f383 8811 	msr	BASEPRI, r3
 80005da:	f3bf 8f6f 	isb	sy
 80005de:	f3bf 8f4f 	dsb	sy
 80005e2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	e7fd      	b.n	80005e6 <main+0x56>
  next_handle = taskLED_Green_handle;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <main+0x10c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2f      	ldr	r2, [pc, #188]	@ (80006ac <main+0x11c>)
 80005f0:	6013      	str	r3, [r2, #0]
  status = xTaskCreate(taskLED_Blue_handler, "Task-LED", 200, "Blue_LED_Task Activation", 4, &taskLED_Blue_handle);
 80005f2:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <main+0x120>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2304      	movs	r3, #4
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <main+0x124>)
 80005fc:	22c8      	movs	r2, #200	@ 0xc8
 80005fe:	4929      	ldr	r1, [pc, #164]	@ (80006a4 <main+0x114>)
 8000600:	482d      	ldr	r0, [pc, #180]	@ (80006b8 <main+0x128>)
 8000602:	f001 ff85 	bl	8002510 <xTaskCreate>
 8000606:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00b      	beq.n	8000626 <main+0x96>
        __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	60fb      	str	r3, [r7, #12]
    }
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x92>

  status = xTaskCreate(taskLED_Red_handler, "Task-LED", 200, "Red_LED_Task Activation", 1, &taskLED_Red_handle);
 8000626:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <main+0x12c>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <main+0x130>)
 8000630:	22c8      	movs	r2, #200	@ 0xc8
 8000632:	491c      	ldr	r1, [pc, #112]	@ (80006a4 <main+0x114>)
 8000634:	4823      	ldr	r0, [pc, #140]	@ (80006c4 <main+0x134>)
 8000636:	f001 ff6b 	bl	8002510 <xTaskCreate>
 800063a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00b      	beq.n	800065a <main+0xca>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	60bb      	str	r3, [r7, #8]
    }
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0xc6>

  status = xTaskCreate(taskLED_Yellow_handler, "Task-LED", 200, "Yellow_LED_Task Activation", 2, &taskLED_Yellow_handle);
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <main+0x138>)
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <main+0x13c>)
 8000664:	22c8      	movs	r2, #200	@ 0xc8
 8000666:	490f      	ldr	r1, [pc, #60]	@ (80006a4 <main+0x114>)
 8000668:	4819      	ldr	r0, [pc, #100]	@ (80006d0 <main+0x140>)
 800066a:	f001 ff51 	bl	8002510 <xTaskCreate>
 800066e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d00b      	beq.n	800068e <main+0xfe>
        __asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	607b      	str	r3, [r7, #4]
    }
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <main+0xfa>

  /*Start the scheduler*/
  vTaskStartScheduler();
 800068e:	f002 f9f3 	bl	8002a78 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0x102>
 8000696:	bf00      	nop
 8000698:	e0001000 	.word	0xe0001000
 800069c:	2000002c 	.word	0x2000002c
 80006a0:	08005c20 	.word	0x08005c20
 80006a4:	08005c3c 	.word	0x08005c3c
 80006a8:	08000abd 	.word	0x08000abd
 80006ac:	2000003c 	.word	0x2000003c
 80006b0:	20000030 	.word	0x20000030
 80006b4:	08005c48 	.word	0x08005c48
 80006b8:	08000b35 	.word	0x08000b35
 80006bc:	20000034 	.word	0x20000034
 80006c0:	08005c64 	.word	0x08005c64
 80006c4:	08000ba9 	.word	0x08000ba9
 80006c8:	20000038 	.word	0x20000038
 80006cc:	08005c7c 	.word	0x08005c7c
 80006d0:	08000c21 	.word	0x08000c21

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fa56 	bl	8005b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000748:	2332      	movs	r3, #50	@ 0x32
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fecd 	bl	80014f8 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 faa2 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000770:	2380      	movs	r3, #128	@ 0x80
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f92e 	bl	80019e8 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 fa8b 	bl	8000cac <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	@ 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	@ 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	4ba6      	ldr	r3, [pc, #664]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4aa5      	ldr	r2, [pc, #660]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4ba3      	ldr	r3, [pc, #652]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	4b9f      	ldr	r3, [pc, #636]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a9e      	ldr	r2, [pc, #632]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b9c      	ldr	r3, [pc, #624]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b98      	ldr	r3, [pc, #608]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a97      	ldr	r2, [pc, #604]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b95      	ldr	r3, [pc, #596]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b91      	ldr	r3, [pc, #580]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a90      	ldr	r2, [pc, #576]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b8e      	ldr	r3, [pc, #568]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b8a      	ldr	r3, [pc, #552]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a89      	ldr	r2, [pc, #548]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b87      	ldr	r3, [pc, #540]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b83      	ldr	r3, [pc, #524]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a82      	ldr	r2, [pc, #520]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b80      	ldr	r3, [pc, #512]	@ (8000a5c <MX_GPIO_Init+0x2b4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	487d      	ldr	r0, [pc, #500]	@ (8000a60 <MX_GPIO_Init+0x2b8>)
 800086c:	f000 fdec 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2101      	movs	r1, #1
 8000874:	487b      	ldr	r0, [pc, #492]	@ (8000a64 <MX_GPIO_Init+0x2bc>)
 8000876:	f000 fde7 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087a:	2200      	movs	r2, #0
 800087c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000880:	4879      	ldr	r0, [pc, #484]	@ (8000a68 <MX_GPIO_Init+0x2c0>)
 8000882:	f000 fde1 	bl	8001448 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4870      	ldr	r0, [pc, #448]	@ (8000a60 <MX_GPIO_Init+0x2b8>)
 800089e:	f000 fc37 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	486a      	ldr	r0, [pc, #424]	@ (8000a64 <MX_GPIO_Init+0x2bc>)
 80008ba:	f000 fc29 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ce:	2305      	movs	r3, #5
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4862      	ldr	r0, [pc, #392]	@ (8000a64 <MX_GPIO_Init+0x2bc>)
 80008da:	f000 fc19 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	485e      	ldr	r0, [pc, #376]	@ (8000a6c <MX_GPIO_Init+0x2c4>)
 80008f4:	f000 fc0c 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008f8:	2310      	movs	r3, #16
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000908:	2306      	movs	r3, #6
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4856      	ldr	r0, [pc, #344]	@ (8000a6c <MX_GPIO_Init+0x2c4>)
 8000914:	f000 fbfc 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000918:	23e0      	movs	r3, #224	@ 0xe0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000928:	2305      	movs	r3, #5
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	484e      	ldr	r0, [pc, #312]	@ (8000a6c <MX_GPIO_Init+0x2c4>)
 8000934:	f000 fbec 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000938:	2304      	movs	r3, #4
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4849      	ldr	r0, [pc, #292]	@ (8000a70 <MX_GPIO_Init+0x2c8>)
 800094c:	f000 fbe0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4840      	ldr	r0, [pc, #256]	@ (8000a70 <MX_GPIO_Init+0x2c8>)
 800096e:	f000 fbcf 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000976:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4837      	ldr	r0, [pc, #220]	@ (8000a68 <MX_GPIO_Init+0x2c0>)
 800098c:	f000 fbc0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	482d      	ldr	r0, [pc, #180]	@ (8000a64 <MX_GPIO_Init+0x2bc>)
 80009ae:	f000 fbaf 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4829      	ldr	r0, [pc, #164]	@ (8000a6c <MX_GPIO_Init+0x2c4>)
 80009c8:	f000 fba2 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009de:	230a      	movs	r3, #10
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4820      	ldr	r0, [pc, #128]	@ (8000a6c <MX_GPIO_Init+0x2c4>)
 80009ea:	f000 fb91 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ee:	2320      	movs	r3, #32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4819      	ldr	r0, [pc, #100]	@ (8000a68 <MX_GPIO_Init+0x2c0>)
 8000a02:	f000 fb85 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0c:	2312      	movs	r3, #18
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4813      	ldr	r0, [pc, #76]	@ (8000a70 <MX_GPIO_Init+0x2c8>)
 8000a24:	f000 fb74 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <MX_GPIO_Init+0x2b8>)
 8000a3e:	f000 fb67 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2106      	movs	r1, #6
 8000a46:	2006      	movs	r0, #6
 8000a48:	f000 fb38 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 fb51 	bl	80010f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	@ 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400

08000a74 <btn_int_handler>:

/* USER CODE BEGIN 4 */

void btn_int_handler(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR(next_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);/*Notify the currently running task*/
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <btn_int_handler+0x40>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2300      	movs	r3, #0
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f002 fc30 	bl	80032f4 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <btn_int_handler+0x36>
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <btn_int_handler+0x44>)
 8000a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	f3bf 8f6f 	isb	sy
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000003c 	.word	0x2000003c
 8000ab8:	e000ed04 	.word	0xe000ed04

08000abc <taskLED_Green_handler>:

static void taskLED_Green_handler(void* parameters)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status = 0u;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
	eTaskState Task_Status = 0u;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000acc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad0:	4814      	ldr	r0, [pc, #80]	@ (8000b24 <taskLED_Green_handler+0x68>)
 8000ad2:	f000 fcd2 	bl	800147a <HAL_GPIO_TogglePin>

		Notify_Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f002 fb7c 	bl	80031e0 <xTaskGenericNotifyWait>
 8000ae8:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE){
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d1ed      	bne.n	8000acc <taskLED_Green_handler+0x10>
			portENTER_CRITICAL();
 8000af0:	f002 ffa4 	bl	8003a3c <vPortEnterCritical>
			Task_Status = eTaskGetState(taskLED_Green_handle);
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <taskLED_Green_handler+0x6c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 ff43 	bl	8002984 <eTaskGetState>
 8000afe:	4603      	mov	r3, r0
 8000b00:	72fb      	strb	r3, [r7, #11]
			next_handle = taskLED_Blue_handle;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <taskLED_Green_handler+0x70>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <taskLED_Green_handler+0x74>)
 8000b08:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <taskLED_Green_handler+0x68>)
 8000b12:	f000 fc99 	bl	8001448 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000b16:	f002 ffc3 	bl	8003aa0 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f001 fe82 	bl	8002824 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b20:	e7d4      	b.n	8000acc <taskLED_Green_handler+0x10>
 8000b22:	bf00      	nop
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	2000002c 	.word	0x2000002c
 8000b2c:	20000030 	.word	0x20000030
 8000b30:	2000003c 	.word	0x2000003c

08000b34 <taskLED_Blue_handler>:

	}
}

static void taskLED_Blue_handler(void* parameters)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status = 0u;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
	eTaskState Task_Status = 0u;
 8000b40:	2300      	movs	r3, #0
 8000b42:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b48:	4813      	ldr	r0, [pc, #76]	@ (8000b98 <taskLED_Blue_handler+0x64>)
 8000b4a:	f000 fc96 	bl	800147a <HAL_GPIO_TogglePin>

		Notify_Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(200));
 8000b4e:	23c8      	movs	r3, #200	@ 0xc8
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f002 fb41 	bl	80031e0 <xTaskGenericNotifyWait>
 8000b5e:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE){
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d1ee      	bne.n	8000b44 <taskLED_Blue_handler+0x10>
			portENTER_CRITICAL();
 8000b66:	f002 ff69 	bl	8003a3c <vPortEnterCritical>
			Task_Status = eTaskGetState(taskLED_Blue_handle);
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <taskLED_Blue_handler+0x68>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 ff08 	bl	8002984 <eTaskGetState>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72fb      	strb	r3, [r7, #11]
			next_handle = taskLED_Red_handle;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <taskLED_Blue_handler+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <taskLED_Blue_handler+0x70>)
 8000b7e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <taskLED_Blue_handler+0x64>)
 8000b88:	f000 fc5e 	bl	8001448 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000b8c:	f002 ff88 	bl	8003aa0 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f001 fe47 	bl	8002824 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b96:	e7d5      	b.n	8000b44 <taskLED_Blue_handler+0x10>
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	20000030 	.word	0x20000030
 8000ba0:	20000034 	.word	0x20000034
 8000ba4:	2000003c 	.word	0x2000003c

08000ba8 <taskLED_Red_handler>:

	}
}

static void taskLED_Red_handler(void* parameters)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status = 0u;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
	eTaskState Task_Status = 0u;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000bb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bbc:	4814      	ldr	r0, [pc, #80]	@ (8000c10 <taskLED_Red_handler+0x68>)
 8000bbe:	f000 fc5c 	bl	800147a <HAL_GPIO_TogglePin>

		Notify_Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000bc2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f002 fb06 	bl	80031e0 <xTaskGenericNotifyWait>
 8000bd4:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE){
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d1ed      	bne.n	8000bb8 <taskLED_Red_handler+0x10>
			portENTER_CRITICAL();
 8000bdc:	f002 ff2e 	bl	8003a3c <vPortEnterCritical>
			Task_Status = eTaskGetState(taskLED_Red_handle);
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <taskLED_Red_handler+0x6c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fecd 	bl	8002984 <eTaskGetState>
 8000bea:	4603      	mov	r3, r0
 8000bec:	72fb      	strb	r3, [r7, #11]
			next_handle = taskLED_Yellow_handle;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <taskLED_Red_handler+0x70>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <taskLED_Red_handler+0x74>)
 8000bf4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <taskLED_Red_handler+0x68>)
 8000bfe:	f000 fc23 	bl	8001448 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000c02:	f002 ff4d 	bl	8003aa0 <vPortExitCritical>
			vTaskDelete(NULL);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f001 fe0c 	bl	8002824 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c0c:	e7d4      	b.n	8000bb8 <taskLED_Red_handler+0x10>
 8000c0e:	bf00      	nop
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	20000034 	.word	0x20000034
 8000c18:	20000038 	.word	0x20000038
 8000c1c:	2000003c 	.word	0x2000003c

08000c20 <taskLED_Yellow_handler>:
		}
	}
}

static void taskLED_Yellow_handler(void* parameters)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status = 0u;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
	eTaskState Task_Status = 0u;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000c30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c34:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <taskLED_Yellow_handler+0x60>)
 8000c36:	f000 fc20 	bl	800147a <HAL_GPIO_TogglePin>

		Notify_Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000c3a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2300      	movs	r3, #0
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2000      	movs	r0, #0
 8000c48:	f002 faca 	bl	80031e0 <xTaskGenericNotifyWait>
 8000c4c:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE){
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d1ed      	bne.n	8000c30 <taskLED_Yellow_handler+0x10>
			portENTER_CRITICAL();
 8000c54:	f002 fef2 	bl	8003a3c <vPortEnterCritical>
			Task_Status = eTaskGetState(taskLED_Yellow_handle);
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <taskLED_Yellow_handler+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fe91 	bl	8002984 <eTaskGetState>
 8000c62:	4603      	mov	r3, r0
 8000c64:	72fb      	strb	r3, [r7, #11]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <taskLED_Yellow_handler+0x60>)
 8000c6e:	f000 fbeb 	bl	8001448 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000c72:	f002 ff15 	bl	8003aa0 <vPortExitCritical>
			vTaskDelete(NULL);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 fdd4 	bl	8002824 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000c7c:	e7d8      	b.n	8000c30 <taskLED_Yellow_handler+0x10>
 8000c7e:	bf00      	nop
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	20000038 	.word	0x20000038

08000c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c9a:	f000 f937 	bl	8000f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40001000 	.word	0x40001000

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cf6:	f002 fe21 	bl	800393c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a32      	ldr	r2, [pc, #200]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d34:	f107 0210 	add.w	r2, r7, #16
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 f85e 	bl	8001e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4e:	f001 f843 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8000d52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d56:	f001 f83f 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_InitTick+0xf0>)
 8000d72:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d96:	f001 f865 	bl	8001e64 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000da0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <HAL_InitTick+0xec>)
 8000daa:	f001 f8b5 	bl	8001f18 <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dbc:	2036      	movs	r0, #54	@ 0x36
 8000dbe:	f000 f999 	bl	80010f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d808      	bhi.n	8000dda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	2036      	movs	r0, #54	@ 0x36
 8000dce:	f000 f975 	bl	80010bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_InitTick+0xf4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e002      	b.n	8000de0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3738      	adds	r7, #56	@ 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20000040 	.word	0x20000040
 8000df8:	40001000 	.word	0x40001000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  btn_int_handler();/*Calling the handler*/
 8000e2c:	f7ff fe22 	bl	8000a74 <btn_int_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);/*Cleaning the interrupt*/
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 fb3d 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <TIM6_DAC_IRQHandler+0x10>)
 8000e42:	f001 f8d9 	bl	8001ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000040 	.word	0x20000040

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e78:	f7ff ffea 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	@ (8000eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f004 fe7f 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb73 	bl	8000590 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000eb8:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 8000ebc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ec0:	20014440 	.word	0x20014440

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8d8 	bl	80010a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f7ff ff06 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fedc 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000088 	.word	0x20000088

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000088 	.word	0x20000088

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff4c 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff61 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb1 	bl	8001040 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff80 	bl	8000fec <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff54 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e16b      	b.n	8001404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 815a 	bne.w	80013fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80b4 	beq.w	80013fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b60      	ldr	r3, [pc, #384]	@ (800141c <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a5f      	ldr	r2, [pc, #380]	@ (800141c <HAL_GPIO_Init+0x30c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b5d      	ldr	r3, [pc, #372]	@ (800141c <HAL_GPIO_Init+0x30c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001420 <HAL_GPIO_Init+0x310>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a51      	ldr	r2, [pc, #324]	@ (8001428 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a50      	ldr	r2, [pc, #320]	@ (800142c <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001430 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x21a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <HAL_GPIO_Init+0x324>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x216>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4d      	ldr	r2, [pc, #308]	@ (8001438 <HAL_GPIO_Init+0x328>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x212>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <HAL_GPIO_Init+0x32c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	@ (8001440 <HAL_GPIO_Init+0x330>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x20a>
 8001316:	2307      	movs	r3, #7
 8001318:	e00e      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131a:	2308      	movs	r3, #8
 800131c:	e00c      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131e:	2306      	movs	r3, #6
 8001320:	e00a      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	@ (8001420 <HAL_GPIO_Init+0x310>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <HAL_GPIO_Init+0x334>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <HAL_GPIO_Init+0x334>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <HAL_GPIO_Init+0x334>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a27      	ldr	r2, [pc, #156]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f ae90 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40021c00 	.word	0x40021c00
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43d9      	mvns	r1, r3
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	400b      	ands	r3, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f806 	bl	80014e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e267      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001516:	4b88      	ldr	r3, [pc, #544]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d00c      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b85      	ldr	r3, [pc, #532]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800152a:	2b08      	cmp	r3, #8
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b82      	ldr	r3, [pc, #520]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b7e      	ldr	r3, [pc, #504]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e242      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b76      	ldr	r3, [pc, #472]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a75      	ldr	r2, [pc, #468]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6f      	ldr	r2, [pc, #444]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6d      	ldr	r3, [pc, #436]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6c      	ldr	r2, [pc, #432]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b69      	ldr	r3, [pc, #420]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a68      	ldr	r2, [pc, #416]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b66      	ldr	r3, [pc, #408]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a65      	ldr	r2, [pc, #404]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fcc0 	bl	8000f34 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fcbc 	bl	8000f34 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e207      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fcac 	bl	8000f34 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fca8 	bl	8000f34 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1f3      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b51      	ldr	r3, [pc, #324]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800160e:	4b4a      	ldr	r3, [pc, #296]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b44      	ldr	r3, [pc, #272]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c7      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4937      	ldr	r1, [pc, #220]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_RCC_OscConfig+0x244>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fc61 	bl	8000f34 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fc5d 	bl	8000f34 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1a8      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4925      	ldr	r1, [pc, #148]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_RCC_OscConfig+0x244>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc40 	bl	8000f34 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc3c 	bl	8000f34 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e187      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d036      	beq.n	8001750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_RCC_OscConfig+0x248>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fc20 	bl	8000f34 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fc1c 	bl	8000f34 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e167      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_RCC_OscConfig+0x240>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
 8001716:	e01b      	b.n	8001750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_RCC_OscConfig+0x248>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fc09 	bl	8000f34 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e00e      	b.n	8001744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fc05 	bl	8000f34 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d907      	bls.n	8001744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e150      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	42470000 	.word	0x42470000
 8001740:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ea      	bne.n	8001726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8097 	beq.w	800188c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b81      	ldr	r3, [pc, #516]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b7d      	ldr	r3, [pc, #500]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a7c      	ldr	r2, [pc, #496]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b7a      	ldr	r3, [pc, #488]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b77      	ldr	r3, [pc, #476]	@ (800196c <HAL_RCC_OscConfig+0x474>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4b74      	ldr	r3, [pc, #464]	@ (800196c <HAL_RCC_OscConfig+0x474>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a73      	ldr	r2, [pc, #460]	@ (800196c <HAL_RCC_OscConfig+0x474>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fbc5 	bl	8000f34 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff fbc1 	bl	8000f34 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e10c      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <HAL_RCC_OscConfig+0x474>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2ea>
 80017d4:	4b64      	ldr	r3, [pc, #400]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d8:	4a63      	ldr	r2, [pc, #396]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x324>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x30c>
 80017ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6713      	str	r3, [r2, #112]	@ 0x70
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0x324>
 8001804:	4b58      	ldr	r3, [pc, #352]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	4a57      	ldr	r2, [pc, #348]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001810:	4b55      	ldr	r3, [pc, #340]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001814:	4a54      	ldr	r2, [pc, #336]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 0304 	bic.w	r3, r3, #4
 800181a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d015      	beq.n	8001850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fb86 	bl	8000f34 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fb82 	bl	8000f34 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0cb      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001842:	4b49      	ldr	r3, [pc, #292]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ee      	beq.n	800182c <HAL_RCC_OscConfig+0x334>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fb70 	bl	8000f34 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fb6c 	bl	8000f34 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0b5      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	4b3e      	ldr	r3, [pc, #248]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ee      	bne.n	8001858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	4a38      	ldr	r2, [pc, #224]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a1 	beq.w	80019d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001896:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d05c      	beq.n	800195c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d141      	bne.n	800192e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb40 	bl	8000f34 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fb3c 	bl	8000f34 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e087      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	491b      	ldr	r1, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x478>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb15 	bl	8000f34 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fb11 	bl	8000f34 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e05c      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x416>
 800192c:	e054      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_RCC_OscConfig+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fafe 	bl	8000f34 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fafa 	bl	8000f34 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e045      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_OscConfig+0x470>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x444>
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e038      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000
 8001970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_RCC_OscConfig+0x4ec>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d028      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d121      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d11a      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b68      	ldr	r3, [pc, #416]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d90c      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b65      	ldr	r3, [pc, #404]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a58      	ldr	r2, [pc, #352]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a52      	ldr	r2, [pc, #328]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d044      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e067      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4934      	ldr	r1, [pc, #208]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fa2c 	bl	8000f34 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff fa28 	bl	8000f34 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b25      	ldr	r3, [pc, #148]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20c      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490a      	ldr	r1, [pc, #40]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f8ba 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08005d6c 	.word	0x08005d6c
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb8:	b094      	sub	sp, #80	@ 0x50
 8001bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bcc:	4b79      	ldr	r3, [pc, #484]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	f200 80e1 	bhi.w	8001da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x34>
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x3a>
 8001be6:	e0db      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b73      	ldr	r3, [pc, #460]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bec:	e0db      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bee:	4b73      	ldr	r3, [pc, #460]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bf2:	e0d8      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c26:	4622      	mov	r2, r4
 8001c28:	462b      	mov	r3, r5
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0159      	lsls	r1, r3, #5
 8001c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c38:	0150      	lsls	r0, r2, #5
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4621      	mov	r1, r4
 8001c40:	1a51      	subs	r1, r2, r1
 8001c42:	6139      	str	r1, [r7, #16]
 8001c44:	4629      	mov	r1, r5
 8001c46:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c58:	4659      	mov	r1, fp
 8001c5a:	018b      	lsls	r3, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c62:	4651      	mov	r1, sl
 8001c64:	018a      	lsls	r2, r1, #6
 8001c66:	4651      	mov	r1, sl
 8001c68:	ebb2 0801 	subs.w	r8, r2, r1
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	eb18 0303 	adds.w	r3, r8, r3
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	462b      	mov	r3, r5
 8001c94:	eb49 0303 	adc.w	r3, r9, r3
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	024b      	lsls	r3, r1, #9
 8001caa:	4621      	mov	r1, r4
 8001cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	024a      	lsls	r2, r1, #9
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cc4:	f7fe face 	bl	8000264 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cd0:	e058      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4611      	mov	r1, r2
 8001cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cec:	4642      	mov	r2, r8
 8001cee:	464b      	mov	r3, r9
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0159      	lsls	r1, r3, #5
 8001cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfe:	0150      	lsls	r0, r2, #5
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4641      	mov	r1, r8
 8001d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d24:	ebb2 040a 	subs.w	r4, r2, sl
 8001d28:	eb63 050b 	sbc.w	r5, r3, fp
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	00eb      	lsls	r3, r5, #3
 8001d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d3a:	00e2      	lsls	r2, r4, #3
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	18e3      	adds	r3, r4, r3
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	464b      	mov	r3, r9
 8001d48:	eb45 0303 	adc.w	r3, r5, r3
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	028b      	lsls	r3, r1, #10
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d64:	4621      	mov	r1, r4
 8001d66:	028a      	lsls	r2, r1, #10
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	61fa      	str	r2, [r7, #28]
 8001d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d78:	f7fe fa74 	bl	8000264 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d9e:	e002      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3750      	adds	r7, #80	@ 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0a9b      	lsrs	r3, r3, #10
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08005d7c 	.word	0x08005d7c

08001e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <HAL_RCC_GetClockConfig+0x60>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0207 	and.w	r2, r3, #7
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e041      	b.n	8001efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f839 	bl	8001f02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f000 f9c0 	bl	8002228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e04e      	b.n	8001fce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5a:	d01d      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <HAL_TIM_Base_Start_IT+0xd4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a18      	ldr	r2, [pc, #96]	@ (8001ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d010      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	e007      	b.n	8001fcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40001800 	.word	0x40001800

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d020      	beq.n	800205c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01b      	beq.n	800205c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8d2 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c4 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f8d5 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d020      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0204 	mvn.w	r2, #4
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8ac 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f89e 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f8af 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d020      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0208 	mvn.w	r2, #8
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2204      	movs	r2, #4
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f886 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f878 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f889 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d020      	beq.n	8002140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0210 	mvn.w	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2208      	movs	r2, #8
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f860 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f852 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f863 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0201 	mvn.w	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fd92 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f906 	bl	8002394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f834 	bl	8002214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0220 	mvn.w	r2, #32
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8d8 	bl	8002380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a46      	ldr	r2, [pc, #280]	@ (8002354 <TIM_Base_SetConfig+0x12c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002246:	d00f      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a43      	ldr	r2, [pc, #268]	@ (8002358 <TIM_Base_SetConfig+0x130>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00b      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a42      	ldr	r2, [pc, #264]	@ (800235c <TIM_Base_SetConfig+0x134>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a41      	ldr	r2, [pc, #260]	@ (8002360 <TIM_Base_SetConfig+0x138>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d003      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a40      	ldr	r2, [pc, #256]	@ (8002364 <TIM_Base_SetConfig+0x13c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800226e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a35      	ldr	r2, [pc, #212]	@ (8002354 <TIM_Base_SetConfig+0x12c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02b      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002288:	d027      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a32      	ldr	r2, [pc, #200]	@ (8002358 <TIM_Base_SetConfig+0x130>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d023      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a31      	ldr	r2, [pc, #196]	@ (800235c <TIM_Base_SetConfig+0x134>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a30      	ldr	r2, [pc, #192]	@ (8002360 <TIM_Base_SetConfig+0x138>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01b      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002364 <TIM_Base_SetConfig+0x13c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d017      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002368 <TIM_Base_SetConfig+0x140>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	@ (800236c <TIM_Base_SetConfig+0x144>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00f      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002370 <TIM_Base_SetConfig+0x148>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00b      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002374 <TIM_Base_SetConfig+0x14c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002378 <TIM_Base_SetConfig+0x150>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a29      	ldr	r2, [pc, #164]	@ (800237c <TIM_Base_SetConfig+0x154>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <TIM_Base_SetConfig+0x12c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0xf8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <TIM_Base_SetConfig+0x13c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d103      	bne.n	8002328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
  }
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800
 8002360:	40000c00 	.word	0x40000c00
 8002364:	40010400 	.word	0x40010400
 8002368:	40014000 	.word	0x40014000
 800236c:	40014400 	.word	0x40014400
 8002370:	40014800 	.word	0x40014800
 8002374:	40001800 	.word	0x40001800
 8002378:	40001c00 	.word	0x40001c00
 800237c:	40002000 	.word	0x40002000

08002380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0208 	add.w	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0208 	add.w	r2, r3, #8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f103 0208 	add.w	r2, r3, #8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d103      	bne.n	800246a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e00c      	b.n	8002484 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3308      	adds	r3, #8
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e002      	b.n	8002478 <vListInsert+0x2e>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	d2f6      	bcs.n	8002472 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6892      	ldr	r2, [r2, #8]
 80024d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6852      	ldr	r2, [r2, #4]
 80024dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d103      	bne.n	80024f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1e5a      	subs	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af04      	add	r7, sp, #16
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4618      	mov	r0, r3
 8002526:	f001 fbbb 	bl	8003ca0 <pvPortMalloc>
 800252a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d013      	beq.n	800255a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002532:	2058      	movs	r0, #88	@ 0x58
 8002534:	f001 fbb4 	bl	8003ca0 <pvPortMalloc>
 8002538:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002540:	2258      	movs	r2, #88	@ 0x58
 8002542:	2100      	movs	r1, #0
 8002544:	69f8      	ldr	r0, [r7, #28]
 8002546:	f003 fb25 	bl	8005b94 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002550:	e005      	b.n	800255e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f001 fc60 	bl	8003e18 <vPortFree>
 8002558:	e001      	b.n	800255e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	2300      	movs	r3, #0
 8002568:	9303      	str	r3, [sp, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	9302      	str	r3, [sp, #8]
 800256e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f80e 	bl	800259c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002580:	69f8      	ldr	r0, [r7, #28]
 8002582:	f000 f89b 	bl	80026bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002586:	2301      	movs	r3, #1
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e002      	b.n	8002592 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002592:	69bb      	ldr	r3, [r7, #24]
    }
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	461a      	mov	r2, r3
 80025b4:	21a5      	movs	r1, #165	@ 0xa5
 80025b6:	f003 faed 	bl	8005b94 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025c4:	3b01      	subs	r3, #1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	617b      	str	r3, [r7, #20]
    }
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	e7fd      	b.n	80025f2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01e      	beq.n	800263a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	e012      	b.n	8002628 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	7819      	ldrb	r1, [r3, #0]
 800260a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	3334      	adds	r3, #52	@ 0x34
 8002612:	460a      	mov	r2, r1
 8002614:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b09      	cmp	r3, #9
 800262c:	d9e9      	bls.n	8002602 <prvInitialiseNewTask+0x66>
 800262e:	e000      	b.n	8002632 <prvInitialiseNewTask+0x96>
            {
                break;
 8002630:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	2b05      	cmp	r3, #5
 800263e:	d90b      	bls.n	8002658 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
    }
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	2b05      	cmp	r3, #5
 800265c:	d901      	bls.n	8002662 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800265e:	2305      	movs	r3, #5
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800266c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	3304      	adds	r3, #4
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff feb8 	bl	80023e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267a:	3318      	adds	r3, #24
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff feb3 	bl	80023e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002686:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	f1c3 0206 	rsb	r2, r3, #6
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	69b8      	ldr	r0, [r7, #24]
 800269e:	f001 f81b 	bl	80036d8 <pxPortInitialiseStack>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026b4:	bf00      	nop
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026c4:	f001 f9ba 	bl	8003a3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002808 <prvAddNewTaskToReadyList+0x14c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002808 <prvAddNewTaskToReadyList+0x14c>)
 80026d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80026d2:	4b4e      	ldr	r3, [pc, #312]	@ (800280c <prvAddNewTaskToReadyList+0x150>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80026da:	4a4c      	ldr	r2, [pc, #304]	@ (800280c <prvAddNewTaskToReadyList+0x150>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026e0:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <prvAddNewTaskToReadyList+0x14c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d110      	bne.n	800270a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80026e8:	f000 fce0 	bl	80030ac <prvInitialiseTaskLists>
 80026ec:	e00d      	b.n	800270a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80026ee:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <prvAddNewTaskToReadyList+0x154>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026f6:	4b45      	ldr	r3, [pc, #276]	@ (800280c <prvAddNewTaskToReadyList+0x150>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	429a      	cmp	r2, r3
 8002702:	d802      	bhi.n	800270a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002704:	4a41      	ldr	r2, [pc, #260]	@ (800280c <prvAddNewTaskToReadyList+0x150>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800270a:	4b42      	ldr	r3, [pc, #264]	@ (8002814 <prvAddNewTaskToReadyList+0x158>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a40      	ldr	r2, [pc, #256]	@ (8002814 <prvAddNewTaskToReadyList+0x158>)
 8002712:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002714:	4b3f      	ldr	r3, [pc, #252]	@ (8002814 <prvAddNewTaskToReadyList+0x158>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <prvAddNewTaskToReadyList+0x94>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f003 f817 	bl	8005758 <SEGGER_SYSVIEW_OnTaskCreate>
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	461d      	mov	r5, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461c      	mov	r4, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	1ae3      	subs	r3, r4, r3
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	462b      	mov	r3, r5
 800274c:	f001 fd24 	bl	8004198 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4618      	mov	r0, r3
 8002754:	f003 f884 	bl	8005860 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <prvAddNewTaskToReadyList+0x15c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	4a2c      	ldr	r2, [pc, #176]	@ (8002818 <prvAddNewTaskToReadyList+0x15c>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276e:	492b      	ldr	r1, [pc, #172]	@ (800281c <prvAddNewTaskToReadyList+0x160>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3304      	adds	r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	3204      	adds	r2, #4
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1d1a      	adds	r2, r3, #4
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <prvAddNewTaskToReadyList+0x160>)
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	615a      	str	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	4918      	ldr	r1, [pc, #96]	@ (800281c <prvAddNewTaskToReadyList+0x160>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	4814      	ldr	r0, [pc, #80]	@ (800281c <prvAddNewTaskToReadyList+0x160>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027d6:	f001 f963 	bl	8003aa0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027da:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <prvAddNewTaskToReadyList+0x154>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <prvAddNewTaskToReadyList+0x150>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <prvAddNewTaskToReadyList+0x164>)
 80027f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bdb0      	pop	{r4, r5, r7, pc}
 8002808:	20000178 	.word	0x20000178
 800280c:	2000008c 	.word	0x2000008c
 8002810:	20000184 	.word	0x20000184
 8002814:	20000194 	.word	0x20000194
 8002818:	20000180 	.word	0x20000180
 800281c:	20000090 	.word	0x20000090
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800282c:	f001 f906 	bl	8003a3c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <vTaskDelete+0x18>
 8002836:	4b49      	ldr	r3, [pc, #292]	@ (800295c <vTaskDelete+0x138>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e000      	b.n	800283e <vTaskDelete+0x1a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3304      	adds	r3, #4
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fe39 	bl	80024bc <uxListRemove>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002854:	4942      	ldr	r1, [pc, #264]	@ (8002960 <vTaskDelete+0x13c>)
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <vTaskDelete+0x58>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	2201      	movs	r2, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43da      	mvns	r2, r3
 8002872:	4b3c      	ldr	r3, [pc, #240]	@ (8002964 <vTaskDelete+0x140>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4013      	ands	r3, r2
 8002878:	4a3a      	ldr	r2, [pc, #232]	@ (8002964 <vTaskDelete+0x140>)
 800287a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3318      	adds	r3, #24
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fe17 	bl	80024bc <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <vTaskDelete+0x144>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	4a34      	ldr	r2, [pc, #208]	@ (8002968 <vTaskDelete+0x144>)
 8002896:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002898:	4b30      	ldr	r3, [pc, #192]	@ (800295c <vTaskDelete+0x138>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d118      	bne.n	80028d4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3304      	adds	r3, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	4830      	ldr	r0, [pc, #192]	@ (800296c <vTaskDelete+0x148>)
 80028aa:	f7ff fdaa 	bl	8002402 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80028ae:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <vTaskDelete+0x14c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002970 <vTaskDelete+0x14c>)
 80028b6:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 f812 	bl	80058e4 <SEGGER_SYSVIEW_ShrinkId>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4619      	mov	r1, r3
 80028c4:	2022      	movs	r0, #34	@ 0x22
 80028c6:	f002 fa13 	bl	8004cf0 <SEGGER_SYSVIEW_RecordU32>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fccb 	bl	8004268 <SYSVIEW_DeleteTask>
 80028d2:	e013      	b.n	80028fc <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <vTaskDelete+0x150>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	4a26      	ldr	r2, [pc, #152]	@ (8002974 <vTaskDelete+0x150>)
 80028dc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 ffff 	bl	80058e4 <SEGGER_SYSVIEW_ShrinkId>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4619      	mov	r1, r3
 80028ea:	2022      	movs	r0, #34	@ 0x22
 80028ec:	f002 fa00 	bl	8004cf0 <SEGGER_SYSVIEW_RecordU32>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fcb8 	bl	8004268 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80028f8:	f000 fc56 	bl	80031a8 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80028fc:	f001 f8d0 	bl	8003aa0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002900:	4b16      	ldr	r3, [pc, #88]	@ (800295c <vTaskDelete+0x138>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	429a      	cmp	r2, r3
 8002908:	d002      	beq.n	8002910 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fc3c 	bl	8003188 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <vTaskDelete+0x154>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01c      	beq.n	8002952 <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <vTaskDelete+0x138>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	429a      	cmp	r2, r3
 8002920:	d117      	bne.n	8002952 <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002922:	4b16      	ldr	r3, [pc, #88]	@ (800297c <vTaskDelete+0x158>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <vTaskDelete+0x11e>
        __asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	60bb      	str	r3, [r7, #8]
    }
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	e7fd      	b.n	800293e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <vTaskDelete+0x15c>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000008c 	.word	0x2000008c
 8002960:	20000090 	.word	0x20000090
 8002964:	20000180 	.word	0x20000180
 8002968:	20000194 	.word	0x20000194
 800296c:	2000014c 	.word	0x2000014c
 8002970:	20000160 	.word	0x20000160
 8002974:	20000178 	.word	0x20000178
 8002978:	20000184 	.word	0x20000184
 800297c:	200001a0 	.word	0x200001a0
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <eTaskGetState+0x2a>
        __asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	60fb      	str	r3, [r7, #12]
    }
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	e7fd      	b.n	80029aa <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 80029ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <eTaskGetState+0xe0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d103      	bne.n	80029c0 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029be:	e04b      	b.n	8002a58 <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
 80029c0:	f001 f83c 	bl	8003a3c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 80029ca:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <eTaskGetState+0xe4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80029d0:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <eTaskGetState+0xe8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 80029d6:	f001 f863 	bl	8003aa0 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d003      	beq.n	80029ea <eTaskGetState+0x66>
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d103      	bne.n	80029f2 <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 80029ea:	2302      	movs	r3, #2
 80029ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029f0:	e032      	b.n	8002a58 <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a70 <eTaskGetState+0xec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d120      	bne.n	8002a3c <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <eTaskGetState+0xb0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	e00e      	b.n	8002a2c <eTaskGetState+0xa8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	4413      	add	r3, r2
 8002a14:	3354      	adds	r3, #84	@ 0x54
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d103      	bne.n	8002a26 <eTaskGetState+0xa2>
                                {
                                    eReturn = eBlocked;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 8002a24:	e018      	b.n	8002a58 <eTaskGetState+0xd4>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	dded      	ble.n	8002a0e <eTaskGetState+0x8a>
 8002a32:	e011      	b.n	8002a58 <eTaskGetState+0xd4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a3a:	e00d      	b.n	8002a58 <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <eTaskGetState+0xf0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d002      	beq.n	8002a4a <eTaskGetState+0xc6>
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a50:	e002      	b.n	8002a58 <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
 8002a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	@ 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000008c 	.word	0x2000008c
 8002a68:	20000130 	.word	0x20000130
 8002a6c:	20000134 	.word	0x20000134
 8002a70:	20000164 	.word	0x20000164
 8002a74:	2000014c 	.word	0x2000014c

08002a78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <vTaskStartScheduler+0x98>)
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2300      	movs	r3, #0
 8002a88:	2282      	movs	r2, #130	@ 0x82
 8002a8a:	4922      	ldr	r1, [pc, #136]	@ (8002b14 <vTaskStartScheduler+0x9c>)
 8002a8c:	4822      	ldr	r0, [pc, #136]	@ (8002b18 <vTaskStartScheduler+0xa0>)
 8002a8e:	f7ff fd3f 	bl	8002510 <xTaskCreate>
 8002a92:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d124      	bne.n	8002ae4 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	60bb      	str	r3, [r7, #8]
    }
 8002aac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <vTaskStartScheduler+0xa4>)
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <vTaskStartScheduler+0xa8>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <vTaskStartScheduler+0xac>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <vTaskStartScheduler+0xb0>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <vTaskStartScheduler+0x98>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d102      	bne.n	8002ad4 <vTaskStartScheduler+0x5c>
 8002ace:	f002 fe27 	bl	8005720 <SEGGER_SYSVIEW_OnIdle>
 8002ad2:	e004      	b.n	8002ade <vTaskStartScheduler+0x66>
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <vTaskStartScheduler+0xb0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fe7f 	bl	80057dc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002ade:	f000 fe89 	bl	80037f4 <xPortStartScheduler>
 8002ae2:	e00f      	b.n	8002b04 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d10b      	bne.n	8002b04 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	607b      	str	r3, [r7, #4]
    }
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <vTaskStartScheduler+0xb4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2000019c 	.word	0x2000019c
 8002b14:	08005ca4 	.word	0x08005ca4
 8002b18:	0800307d 	.word	0x0800307d
 8002b1c:	20000198 	.word	0x20000198
 8002b20:	20000184 	.word	0x20000184
 8002b24:	2000017c 	.word	0x2000017c
 8002b28:	2000008c 	.word	0x2000008c
 8002b2c:	08005d84 	.word	0x08005d84

08002b30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <vTaskSuspendAll+0x18>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a03      	ldr	r2, [pc, #12]	@ (8002b48 <vTaskSuspendAll+0x18>)
 8002b3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	200001a0 	.word	0x200001a0

08002b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b5a:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <xTaskResumeAll+0x1dc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10b      	bne.n	8002b7a <xTaskResumeAll+0x2e>
        __asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	607b      	str	r3, [r7, #4]
    }
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	e7fd      	b.n	8002b76 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b7a:	f000 ff5f 	bl	8003a3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d28 <xTaskResumeAll+0x1dc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	4a68      	ldr	r2, [pc, #416]	@ (8002d28 <xTaskResumeAll+0x1dc>)
 8002b86:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b88:	4b67      	ldr	r3, [pc, #412]	@ (8002d28 <xTaskResumeAll+0x1dc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 80c4 	bne.w	8002d1a <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b92:	4b66      	ldr	r3, [pc, #408]	@ (8002d2c <xTaskResumeAll+0x1e0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80bf 	beq.w	8002d1a <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b9c:	e08e      	b.n	8002cbc <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b9e:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <xTaskResumeAll+0x1e4>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	6a12      	ldr	r2, [r2, #32]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	69d2      	ldr	r2, [r2, #28]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d103      	bne.n	8002bd4 <xTaskResumeAll+0x88>
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	68d2      	ldr	r2, [r2, #12]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	6892      	ldr	r2, [r2, #8]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d103      	bne.n	8002c12 <xTaskResumeAll+0xc6>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fe1b 	bl	8005860 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	2201      	movs	r2, #1
 8002c30:	409a      	lsls	r2, r3
 8002c32:	4b40      	ldr	r3, [pc, #256]	@ (8002d34 <xTaskResumeAll+0x1e8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	4a3e      	ldr	r2, [pc, #248]	@ (8002d34 <xTaskResumeAll+0x1e8>)
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c40:	493d      	ldr	r1, [pc, #244]	@ (8002d38 <xTaskResumeAll+0x1ec>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	60da      	str	r2, [r3, #12]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	3204      	adds	r2, #4
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	1d1a      	adds	r2, r3, #4
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d38 <xTaskResumeAll+0x1ec>)
 8002c80:	441a      	add	r2, r3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8a:	492b      	ldr	r1, [pc, #172]	@ (8002d38 <xTaskResumeAll+0x1ec>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	4827      	ldr	r0, [pc, #156]	@ (8002d38 <xTaskResumeAll+0x1ec>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4403      	add	r3, r0
 8002ca6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cac:	4b23      	ldr	r3, [pc, #140]	@ (8002d3c <xTaskResumeAll+0x1f0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d302      	bcc.n	8002cbc <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <xTaskResumeAll+0x1f4>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <xTaskResumeAll+0x1e4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af6c 	bne.w	8002b9e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ccc:	f000 fa6c 	bl	80031a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <xTaskResumeAll+0x1f8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cdc:	f000 f848 	bl	8002d70 <xTaskIncrementTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <xTaskResumeAll+0x1f4>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f1      	bne.n	8002cdc <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <xTaskResumeAll+0x1f8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <xTaskResumeAll+0x1f4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d48 <xTaskResumeAll+0x1fc>)
 8002d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d1a:	f000 fec1 	bl	8003aa0 <vPortExitCritical>

    return xAlreadyYielded;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200001a0 	.word	0x200001a0
 8002d2c:	20000178 	.word	0x20000178
 8002d30:	20000138 	.word	0x20000138
 8002d34:	20000180 	.word	0x20000180
 8002d38:	20000090 	.word	0x20000090
 8002d3c:	2000008c 	.word	0x2000008c
 8002d40:	2000018c 	.word	0x2000018c
 8002d44:	20000188 	.word	0x20000188
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d52:	f000 ff63 	bl	8003c1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d5a:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <xTaskGetTickCountFromISR+0x20>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d60:	683b      	ldr	r3, [r7, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000017c 	.word	0x2000017c

08002d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	@ 0x28
 8002d74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7a:	4b80      	ldr	r3, [pc, #512]	@ (8002f7c <xTaskIncrementTick+0x20c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80f1 	bne.w	8002f66 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d84:	4b7e      	ldr	r3, [pc, #504]	@ (8002f80 <xTaskIncrementTick+0x210>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f80 <xTaskIncrementTick+0x210>)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d121      	bne.n	8002ddc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d98:	4b7a      	ldr	r3, [pc, #488]	@ (8002f84 <xTaskIncrementTick+0x214>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <xTaskIncrementTick+0x4a>
        __asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	607b      	str	r3, [r7, #4]
    }
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <xTaskIncrementTick+0x46>
 8002dba:	4b72      	ldr	r3, [pc, #456]	@ (8002f84 <xTaskIncrementTick+0x214>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	4b71      	ldr	r3, [pc, #452]	@ (8002f88 <xTaskIncrementTick+0x218>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6f      	ldr	r2, [pc, #444]	@ (8002f84 <xTaskIncrementTick+0x214>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4a6f      	ldr	r2, [pc, #444]	@ (8002f88 <xTaskIncrementTick+0x218>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6f      	ldr	r3, [pc, #444]	@ (8002f8c <xTaskIncrementTick+0x21c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8002f8c <xTaskIncrementTick+0x21c>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	f000 f9e6 	bl	80031a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8002f90 <xTaskIncrementTick+0x220>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	f0c0 80aa 	bcc.w	8002f3c <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de8:	4b66      	ldr	r3, [pc, #408]	@ (8002f84 <xTaskIncrementTick+0x214>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df2:	4b67      	ldr	r3, [pc, #412]	@ (8002f90 <xTaskIncrementTick+0x220>)
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	601a      	str	r2, [r3, #0]
                    break;
 8002dfa:	e09f      	b.n	8002f3c <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dfc:	4b61      	ldr	r3, [pc, #388]	@ (8002f84 <xTaskIncrementTick+0x214>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d203      	bcs.n	8002e1c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e14:	4a5e      	ldr	r2, [pc, #376]	@ (8002f90 <xTaskIncrementTick+0x220>)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e1a:	e08f      	b.n	8002f3c <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d103      	bne.n	8002e4a <xTaskIncrementTick+0xda>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1e5a      	subs	r2, r3, #1
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01e      	beq.n	8002ea0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	6a12      	ldr	r2, [r2, #32]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	69d2      	ldr	r2, [r2, #28]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	3318      	adds	r3, #24
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d103      	bne.n	8002e90 <xTaskIncrementTick+0x120>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2200      	movs	r2, #0
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1e5a      	subs	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fcdc 	bl	8005860 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <xTaskIncrementTick+0x224>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	4a37      	ldr	r2, [pc, #220]	@ (8002f94 <xTaskIncrementTick+0x224>)
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ebe:	4936      	ldr	r1, [pc, #216]	@ (8002f98 <xTaskIncrementTick+0x228>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3304      	adds	r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	3204      	adds	r2, #4
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a26      	ldr	r2, [pc, #152]	@ (8002f98 <xTaskIncrementTick+0x228>)
 8002efe:	441a      	add	r2, r3
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f08:	4923      	ldr	r1, [pc, #140]	@ (8002f98 <xTaskIncrementTick+0x228>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	481f      	ldr	r0, [pc, #124]	@ (8002f98 <xTaskIncrementTick+0x228>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4403      	add	r3, r0
 8002f24:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <xTaskIncrementTick+0x22c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f67f af59 	bls.w	8002de8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3a:	e755      	b.n	8002de8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f3c:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <xTaskIncrementTick+0x22c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f42:	4915      	ldr	r1, [pc, #84]	@ (8002f98 <xTaskIncrementTick+0x228>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d901      	bls.n	8002f58 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <xTaskIncrementTick+0x230>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f64:	e004      	b.n	8002f70 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f66:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <xTaskIncrementTick+0x234>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa4 <xTaskIncrementTick+0x234>)
 8002f6e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3728      	adds	r7, #40	@ 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200001a0 	.word	0x200001a0
 8002f80:	2000017c 	.word	0x2000017c
 8002f84:	20000130 	.word	0x20000130
 8002f88:	20000134 	.word	0x20000134
 8002f8c:	20000190 	.word	0x20000190
 8002f90:	20000198 	.word	0x20000198
 8002f94:	20000180 	.word	0x20000180
 8002f98:	20000090 	.word	0x20000090
 8002f9c:	2000008c 	.word	0x2000008c
 8002fa0:	2000018c 	.word	0x2000018c
 8002fa4:	20000188 	.word	0x20000188

08002fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fae:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <vTaskSwitchContext+0xbc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <vTaskSwitchContext+0xc0>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002fbc:	e04e      	b.n	800305c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003068 <vTaskSwitchContext+0xc0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc4:	4b29      	ldr	r3, [pc, #164]	@ (800306c <vTaskSwitchContext+0xc4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f1c3 031f 	rsb	r3, r3, #31
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4925      	ldr	r1, [pc, #148]	@ (8003070 <vTaskSwitchContext+0xc8>)
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	607b      	str	r3, [r7, #4]
    }
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	e7fd      	b.n	8003002 <vTaskSwitchContext+0x5a>
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <vTaskSwitchContext+0xc8>)
 8003012:	4413      	add	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3308      	adds	r3, #8
 8003028:	429a      	cmp	r2, r3
 800302a:	d104      	bne.n	8003036 <vTaskSwitchContext+0x8e>
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <vTaskSwitchContext+0xcc>)
 800303e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <vTaskSwitchContext+0xcc>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <vTaskSwitchContext+0xd0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d102      	bne.n	8003052 <vTaskSwitchContext+0xaa>
 800304c:	f002 fb68 	bl	8005720 <SEGGER_SYSVIEW_OnIdle>
}
 8003050:	e004      	b.n	800305c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003052:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <vTaskSwitchContext+0xcc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f002 fbc0 	bl	80057dc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800305c:	bf00      	nop
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200001a0 	.word	0x200001a0
 8003068:	2000018c 	.word	0x2000018c
 800306c:	20000180 	.word	0x20000180
 8003070:	20000090 	.word	0x20000090
 8003074:	2000008c 	.word	0x2000008c
 8003078:	2000019c 	.word	0x2000019c

0800307c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003084:	f000 f852 	bl	800312c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <prvIdleTask+0x28>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d9f9      	bls.n	8003084 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <prvIdleTask+0x2c>)
 8003092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80030a0:	e7f0      	b.n	8003084 <prvIdleTask+0x8>
 80030a2:	bf00      	nop
 80030a4:	20000090 	.word	0x20000090
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	e00c      	b.n	80030d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4a12      	ldr	r2, [pc, #72]	@ (800310c <prvInitialiseTaskLists+0x60>)
 80030c4:	4413      	add	r3, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f96e 	bl	80023a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d9ef      	bls.n	80030b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030d8:	480d      	ldr	r0, [pc, #52]	@ (8003110 <prvInitialiseTaskLists+0x64>)
 80030da:	f7ff f965 	bl	80023a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030de:	480d      	ldr	r0, [pc, #52]	@ (8003114 <prvInitialiseTaskLists+0x68>)
 80030e0:	f7ff f962 	bl	80023a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030e4:	480c      	ldr	r0, [pc, #48]	@ (8003118 <prvInitialiseTaskLists+0x6c>)
 80030e6:	f7ff f95f 	bl	80023a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80030ea:	480c      	ldr	r0, [pc, #48]	@ (800311c <prvInitialiseTaskLists+0x70>)
 80030ec:	f7ff f95c 	bl	80023a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80030f0:	480b      	ldr	r0, [pc, #44]	@ (8003120 <prvInitialiseTaskLists+0x74>)
 80030f2:	f7ff f959 	bl	80023a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <prvInitialiseTaskLists+0x78>)
 80030f8:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <prvInitialiseTaskLists+0x64>)
 80030fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <prvInitialiseTaskLists+0x7c>)
 80030fe:	4a05      	ldr	r2, [pc, #20]	@ (8003114 <prvInitialiseTaskLists+0x68>)
 8003100:	601a      	str	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000090 	.word	0x20000090
 8003110:	20000108 	.word	0x20000108
 8003114:	2000011c 	.word	0x2000011c
 8003118:	20000138 	.word	0x20000138
 800311c:	2000014c 	.word	0x2000014c
 8003120:	20000164 	.word	0x20000164
 8003124:	20000130 	.word	0x20000130
 8003128:	20000134 	.word	0x20000134

0800312c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003132:	e019      	b.n	8003168 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003134:	f000 fc82 	bl	8003a3c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003138:	4b10      	ldr	r3, [pc, #64]	@ (800317c <prvCheckTasksWaitingTermination+0x50>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f9b9 	bl	80024bc <uxListRemove>
                --uxCurrentNumberOfTasks;
 800314a:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <prvCheckTasksWaitingTermination+0x54>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3b01      	subs	r3, #1
 8003150:	4a0b      	ldr	r2, [pc, #44]	@ (8003180 <prvCheckTasksWaitingTermination+0x54>)
 8003152:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <prvCheckTasksWaitingTermination+0x58>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3b01      	subs	r3, #1
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <prvCheckTasksWaitingTermination+0x58>)
 800315c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800315e:	f000 fc9f 	bl	8003aa0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f810 	bl	8003188 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <prvCheckTasksWaitingTermination+0x58>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e1      	bne.n	8003134 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000014c 	.word	0x2000014c
 8003180:	20000178 	.word	0x20000178
 8003184:	20000160 	.word	0x20000160

08003188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fe3f 	bl	8003e18 <vPortFree>
            vPortFree( pxTCB );
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fe3c 	bl	8003e18 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <prvResetNextTaskUnblockTime+0x30>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <prvResetNextTaskUnblockTime+0x34>)
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031be:	e005      	b.n	80031cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <prvResetNextTaskUnblockTime+0x30>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a04      	ldr	r2, [pc, #16]	@ (80031dc <prvResetNextTaskUnblockTime+0x34>)
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000130 	.word	0x20000130
 80031dc:	20000198 	.word	0x20000198

080031e0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	613b      	str	r3, [r7, #16]
    }
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800320c:	f000 fc16 	bl	8003a3c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003210:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	3354      	adds	r3, #84	@ 0x54
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d022      	beq.n	8003268 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003222:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	3214      	adds	r2, #20
 800322a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	43d2      	mvns	r2, r2
 8003232:	4011      	ands	r1, r2
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	3214      	adds	r2, #20
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	3354      	adds	r3, #84	@ 0x54
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003250:	2101      	movs	r1, #1
 8003252:	6a38      	ldr	r0, [r7, #32]
 8003254:	f000 f9c0 	bl	80035d8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003258:	4b25      	ldr	r3, [pc, #148]	@ (80032f0 <xTaskGenericNotifyWait+0x110>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003268:	f000 fc1a 	bl	8003aa0 <vPortExitCritical>

        taskENTER_CRITICAL();
 800326c:	f000 fbe6 	bl	8003a3c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	2040      	movs	r0, #64	@ 0x40
 800327e:	f001 fdcd 	bl	8004e1c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003288:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	3214      	adds	r2, #20
 8003290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	3354      	adds	r3, #84	@ 0x54
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d002      	beq.n	80032b0 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e00e      	b.n	80032ce <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	3214      	adds	r2, #20
 80032b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	43d2      	mvns	r2, r2
 80032c0:	4011      	ands	r1, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	3214      	adds	r2, #20
 80032c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80032ce:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <xTaskGenericNotifyWait+0x10c>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	3354      	adds	r3, #84	@ 0x54
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80032dc:	f000 fbe0 	bl	8003aa0 <vPortExitCritical>

        return xReturn;
 80032e0:	697b      	ldr	r3, [r7, #20]
    }
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000008c 	.word	0x2000008c
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b094      	sub	sp, #80	@ 0x50
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003302:	2301      	movs	r3, #1
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	e7fd      	b.n	800333e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003342:	f000 fc6b 	bl	8003c1c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	643b      	str	r3, [r7, #64]	@ 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800334a:	f3ef 8211 	mrs	r2, BASEPRI
 800334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	623a      	str	r2, [r7, #32]
 8003360:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003362:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003368:	2b00      	cmp	r3, #0
 800336a:	d006      	beq.n	800337a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800336c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	3214      	adds	r2, #20
 8003372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003378:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800337a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4413      	add	r3, r2
 8003380:	3354      	adds	r3, #84	@ 0x54
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4413      	add	r3, r2
 800338e:	3354      	adds	r3, #84	@ 0x54
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d83b      	bhi.n	8003412 <xTaskGenericNotifyFromISR+0x11e>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <xTaskGenericNotifyFromISR+0xac>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	08003433 	.word	0x08003433
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033e9 	.word	0x080033e9
 80033b0:	080033f7 	.word	0x080033f7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80033b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	3214      	adds	r2, #20
 80033ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	3214      	adds	r2, #20
 80033ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033ce:	e033      	b.n	8003438 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80033d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	3214      	adds	r2, #20
 80033d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	3214      	adds	r2, #20
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033e6:	e027      	b.n	8003438 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	3214      	adds	r2, #20
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033f4:	e020      	b.n	8003438 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80033f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d006      	beq.n	800340c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	3214      	adds	r2, #20
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800340a:	e015      	b.n	8003438 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800340c:	2300      	movs	r3, #0
 800340e:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003410:	e012      	b.n	8003438 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003412:	4b6a      	ldr	r3, [pc, #424]	@ (80035bc <xTaskGenericNotifyFromISR+0x2c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	61bb      	str	r3, [r7, #24]
    }
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	e7fd      	b.n	800342e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003436:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800343a:	4618      	mov	r0, r3
 800343c:	f002 fa52 	bl	80058e4 <SEGGER_SYSVIEW_ShrinkId>
 8003440:	78f9      	ldrb	r1, [r7, #3]
 8003442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003444:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003446:	9201      	str	r2, [sp, #4]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	460b      	mov	r3, r1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4601      	mov	r1, r0
 8003450:	203f      	movs	r0, #63	@ 0x3f
 8003452:	f001 fd75 	bl	8004f40 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003456:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800345a:	2b01      	cmp	r3, #1
 800345c:	f040 80a3 	bne.w	80035a6 <xTaskGenericNotifyFromISR+0x2b2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <xTaskGenericNotifyFromISR+0x18c>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	617b      	str	r3, [r7, #20]
    }
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xTaskGenericNotifyFromISR+0x188>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003480:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <xTaskGenericNotifyFromISR+0x2cc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d162      	bne.n	800354e <xTaskGenericNotifyFromISR+0x25a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
 800348e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003494:	68d2      	ldr	r2, [r2, #12]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a8:	3304      	adds	r3, #4
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d103      	bne.n	80034b6 <xTaskGenericNotifyFromISR+0x1c2>
 80034ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
 80034bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1e5a      	subs	r2, r3, #1
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80034c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 f9c9 	bl	8005860 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	2201      	movs	r2, #1
 80034d4:	409a      	lsls	r2, r3
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <xTaskGenericNotifyFromISR+0x2d0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	4a39      	ldr	r2, [pc, #228]	@ (80035c4 <xTaskGenericNotifyFromISR+0x2d0>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e4:	4938      	ldr	r1, [pc, #224]	@ (80035c8 <xTaskGenericNotifyFromISR+0x2d4>)
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	3304      	adds	r3, #4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800350a:	3204      	adds	r2, #4
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a29      	ldr	r2, [pc, #164]	@ (80035c8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003524:	441a      	add	r2, r3
 8003526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003528:	615a      	str	r2, [r3, #20]
 800352a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352e:	4926      	ldr	r1, [pc, #152]	@ (80035c8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1c59      	adds	r1, r3, #1
 800353e:	4822      	ldr	r0, [pc, #136]	@ (80035c8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4403      	add	r3, r0
 800354a:	6019      	str	r1, [r3, #0]
 800354c:	e01b      	b.n	8003586 <xTaskGenericNotifyFromISR+0x292>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800354e:	4b1f      	ldr	r3, [pc, #124]	@ (80035cc <xTaskGenericNotifyFromISR+0x2d8>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003558:	61da      	str	r2, [r3, #28]
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003560:	621a      	str	r2, [r3, #32]
 8003562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003568:	3218      	adds	r2, #24
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800356e:	f103 0218 	add.w	r2, r3, #24
 8003572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003578:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <xTaskGenericNotifyFromISR+0x2d8>)
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
 800357c:	4b13      	ldr	r3, [pc, #76]	@ (80035cc <xTaskGenericNotifyFromISR+0x2d8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <xTaskGenericNotifyFromISR+0x2d8>)
 8003584:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358a:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <xTaskGenericNotifyFromISR+0x2dc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	429a      	cmp	r2, r3
 8003592:	d908      	bls.n	80035a6 <xTaskGenericNotifyFromISR+0x2b2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <xTaskGenericNotifyFromISR+0x2ac>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800359a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <xTaskGenericNotifyFromISR+0x2e0>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035b0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80035b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80035b4:	4618      	mov	r0, r3
 80035b6:	3748      	adds	r7, #72	@ 0x48
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2000017c 	.word	0x2000017c
 80035c0:	200001a0 	.word	0x200001a0
 80035c4:	20000180 	.word	0x20000180
 80035c8:	20000090 	.word	0x20000090
 80035cc:	20000138 	.word	0x20000138
 80035d0:	2000008c 	.word	0x2000008c
 80035d4:	2000018c 	.word	0x2000018c

080035d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035e2:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e8:	4b35      	ldr	r3, [pc, #212]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe ff64 	bl	80024bc <uxListRemove>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035fa:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	2201      	movs	r2, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4013      	ands	r3, r2
 800360e:	4a2d      	ldr	r2, [pc, #180]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003610:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d124      	bne.n	8003664 <prvAddCurrentTaskToDelayedList+0x8c>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d021      	beq.n	8003664 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003620:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	60da      	str	r2, [r3, #12]
 8003638:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	3204      	adds	r2, #4
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	@ (80036c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003654:	615a      	str	r2, [r3, #20]
 8003656:	4b1c      	ldr	r3, [pc, #112]	@ (80036c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003662:	e026      	b.n	80036b2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800366c:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	d209      	bcs.n	8003690 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800367c:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7fe fede 	bl	800244a <vListInsert>
}
 800368e:	e010      	b.n	80036b2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7fe fed4 	bl	800244a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80036a2:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d202      	bcs.n	80036b2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80036ac:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6013      	str	r3, [r2, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000017c 	.word	0x2000017c
 80036c0:	2000008c 	.word	0x2000008c
 80036c4:	20000180 	.word	0x20000180
 80036c8:	20000164 	.word	0x20000164
 80036cc:	20000134 	.word	0x20000134
 80036d0:	20000130 	.word	0x20000130
 80036d4:	20000198 	.word	0x20000198

080036d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3b04      	subs	r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b04      	subs	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0201 	bic.w	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3b04      	subs	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003708:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <pxPortInitialiseStack+0x64>)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3b14      	subs	r3, #20
 8003712:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3b04      	subs	r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f06f 0202 	mvn.w	r2, #2
 8003726:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b20      	subs	r3, #32
 800372c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	08003741 	.word	0x08003741

08003740 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800374a:	4b13      	ldr	r3, [pc, #76]	@ (8003798 <prvTaskExitError+0x58>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d00b      	beq.n	800376c <prvTaskExitError+0x2c>
        __asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	60fb      	str	r3, [r7, #12]
    }
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <prvTaskExitError+0x28>
        __asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	60bb      	str	r3, [r7, #8]
    }
 800377e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003780:	bf00      	nop
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0fc      	beq.n	8003782 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	2000000c 	.word	0x2000000c
 800379c:	00000000 	.word	0x00000000

080037a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80037a0:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <pxCurrentTCBConst2>)
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	6808      	ldr	r0, [r1, #0]
 80037a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037aa:	f380 8809 	msr	PSP, r0
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8811 	msr	BASEPRI, r0
 80037ba:	4770      	bx	lr
 80037bc:	f3af 8000 	nop.w

080037c0 <pxCurrentTCBConst2>:
 80037c0:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop

080037c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80037c8:	4808      	ldr	r0, [pc, #32]	@ (80037ec <prvPortStartFirstTask+0x24>)
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	6800      	ldr	r0, [r0, #0]
 80037ce:	f380 8808 	msr	MSP, r0
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8814 	msr	CONTROL, r0
 80037da:	b662      	cpsie	i
 80037dc:	b661      	cpsie	f
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	df00      	svc	0
 80037e8:	bf00      	nop
 80037ea:	0000      	.short	0x0000
 80037ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop

080037f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037fa:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <xPortStartScheduler+0x124>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a47      	ldr	r2, [pc, #284]	@ (800391c <xPortStartScheduler+0x128>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10b      	bne.n	800381c <xPortStartScheduler+0x28>
        __asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	60fb      	str	r3, [r7, #12]
    }
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800381c:	4b3e      	ldr	r3, [pc, #248]	@ (8003918 <xPortStartScheduler+0x124>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3f      	ldr	r2, [pc, #252]	@ (8003920 <xPortStartScheduler+0x12c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10b      	bne.n	800383e <xPortStartScheduler+0x4a>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	613b      	str	r3, [r7, #16]
    }
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	e7fd      	b.n	800383a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800383e:	4b39      	ldr	r3, [pc, #228]	@ (8003924 <xPortStartScheduler+0x130>)
 8003840:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	22ff      	movs	r2, #255	@ 0xff
 800384e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b31      	ldr	r3, [pc, #196]	@ (8003928 <xPortStartScheduler+0x134>)
 8003864:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <xPortStartScheduler+0x138>)
 8003868:	2207      	movs	r2, #7
 800386a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800386c:	e009      	b.n	8003882 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800386e:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <xPortStartScheduler+0x138>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	4a2d      	ldr	r2, [pc, #180]	@ (800392c <xPortStartScheduler+0x138>)
 8003876:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388a:	2b80      	cmp	r3, #128	@ 0x80
 800388c:	d0ef      	beq.n	800386e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800388e:	4b27      	ldr	r3, [pc, #156]	@ (800392c <xPortStartScheduler+0x138>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f1c3 0307 	rsb	r3, r3, #7
 8003896:	2b04      	cmp	r3, #4
 8003898:	d00b      	beq.n	80038b2 <xPortStartScheduler+0xbe>
        __asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	60bb      	str	r3, [r7, #8]
    }
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <xPortStartScheduler+0x138>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	4a1c      	ldr	r2, [pc, #112]	@ (800392c <xPortStartScheduler+0x138>)
 80038ba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <xPortStartScheduler+0x138>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038c4:	4a19      	ldr	r2, [pc, #100]	@ (800392c <xPortStartScheduler+0x138>)
 80038c6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80038d0:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <xPortStartScheduler+0x13c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a16      	ldr	r2, [pc, #88]	@ (8003930 <xPortStartScheduler+0x13c>)
 80038d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <xPortStartScheduler+0x13c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a13      	ldr	r2, [pc, #76]	@ (8003930 <xPortStartScheduler+0x13c>)
 80038e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80038e6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80038e8:	f000 f968 	bl	8003bbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <xPortStartScheduler+0x140>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80038f2:	f000 f987 	bl	8003c04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038f6:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <xPortStartScheduler+0x144>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003938 <xPortStartScheduler+0x144>)
 80038fc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003900:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003902:	f7ff ff61 	bl	80037c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003906:	f7ff fb4f 	bl	8002fa8 <vTaskSwitchContext>
    prvTaskExitError();
 800390a:	f7ff ff19 	bl	8003740 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	e000ed00 	.word	0xe000ed00
 800391c:	410fc271 	.word	0x410fc271
 8003920:	410fc270 	.word	0x410fc270
 8003924:	e000e400 	.word	0xe000e400
 8003928:	200001a4 	.word	0x200001a4
 800392c:	200001a8 	.word	0x200001a8
 8003930:	e000ed20 	.word	0xe000ed20
 8003934:	2000000c 	.word	0x2000000c
 8003938:	e000ef34 	.word	0xe000ef34

0800393c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003942:	4b38      	ldr	r3, [pc, #224]	@ (8003a24 <vInitPrioGroupValue+0xe8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a38      	ldr	r2, [pc, #224]	@ (8003a28 <vInitPrioGroupValue+0xec>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10b      	bne.n	8003964 <vInitPrioGroupValue+0x28>
        __asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60fb      	str	r3, [r7, #12]
    }
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003964:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <vInitPrioGroupValue+0xe8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	@ (8003a2c <vInitPrioGroupValue+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10b      	bne.n	8003986 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	613b      	str	r3, [r7, #16]
    }
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	e7fd      	b.n	8003982 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003986:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <vInitPrioGroupValue+0xf4>)
 8003988:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	22ff      	movs	r2, #255	@ 0xff
 8003996:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4b22      	ldr	r3, [pc, #136]	@ (8003a34 <vInitPrioGroupValue+0xf8>)
 80039ac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039ae:	4b22      	ldr	r3, [pc, #136]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039b4:	e009      	b.n	80039ca <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 80039be:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b80      	cmp	r3, #128	@ 0x80
 80039d4:	d0ef      	beq.n	80039b6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039d6:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00b      	beq.n	80039fa <vInitPrioGroupValue+0xbe>
        __asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60bb      	str	r3, [r7, #8]
    }
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	e7fd      	b.n	80039f6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 8003a02:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <vInitPrioGroupValue+0xfc>)
 8003a0e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00
 8003a28:	410fc271 	.word	0x410fc271
 8003a2c:	410fc270 	.word	0x410fc270
 8003a30:	e000e400 	.word	0xe000e400
 8003a34:	200001a4 	.word	0x200001a4
 8003a38:	200001a8 	.word	0x200001a8

08003a3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
        __asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
    }
 8003a54:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003a56:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <vPortEnterCritical+0x5c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a98 <vPortEnterCritical+0x5c>)
 8003a5e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003a60:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <vPortEnterCritical+0x5c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <vPortEnterCritical+0x60>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <vPortEnterCritical+0x4e>
        __asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	603b      	str	r3, [r7, #0]
    }
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	e7fd      	b.n	8003a86 <vPortEnterCritical+0x4a>
    }
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <vPortExitCritical+0x50>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <vPortExitCritical+0x26>
        __asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	607b      	str	r3, [r7, #4]
    }
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	e7fd      	b.n	8003ac2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <vPortExitCritical+0x50>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	4a08      	ldr	r2, [pc, #32]	@ (8003af0 <vPortExitCritical+0x50>)
 8003ace:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <vPortExitCritical+0x50>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <vPortExitCritical+0x44>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f383 8811 	msr	BASEPRI, r3
    }
 8003ae2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	2000000c 	.word	0x2000000c
	...

08003b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b00:	f3ef 8009 	mrs	r0, PSP
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <pxCurrentTCBConst>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f01e 0f10 	tst.w	lr, #16
 8003b10:	bf08      	it	eq
 8003b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1a:	6010      	str	r0, [r2, #0]
 8003b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b24:	f380 8811 	msr	BASEPRI, r0
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f7ff fa3a 	bl	8002fa8 <vTaskSwitchContext>
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f380 8811 	msr	BASEPRI, r0
 8003b3c:	bc09      	pop	{r0, r3}
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b46:	f01e 0f10 	tst.w	lr, #16
 8003b4a:	bf08      	it	eq
 8003b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b50:	f380 8809 	msr	PSP, r0
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst>:
 8003b60:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
    }
 8003b80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003b82:	f001 fd53 	bl	800562c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003b86:	f7ff f8f3 	bl	8002d70 <xTaskIncrementTick>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003b90:	f001 fdaa 	bl	80056e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b94:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <SysTick_Handler+0x50>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e001      	b.n	8003ba2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003b9e:	f001 fd87 	bl	80056b0 <SEGGER_SYSVIEW_RecordExitISR>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f383 8811 	msr	BASEPRI, r3
    }
 8003bac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <vPortSetupTimerInterrupt+0x34>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <vPortSetupTimerInterrupt+0x38>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <vPortSetupTimerInterrupt+0x3c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <vPortSetupTimerInterrupt+0x40>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	4a09      	ldr	r2, [pc, #36]	@ (8003c00 <vPortSetupTimerInterrupt+0x44>)
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bde:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <vPortSetupTimerInterrupt+0x34>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010
 8003bf4:	e000e018 	.word	0xe000e018
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	10624dd3 	.word	0x10624dd3
 8003c00:	e000e014 	.word	0xe000e014

08003c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c14 <vPortEnableVFP+0x10>
 8003c08:	6801      	ldr	r1, [r0, #0]
 8003c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c0e:	6001      	str	r1, [r0, #0]
 8003c10:	4770      	bx	lr
 8003c12:	0000      	.short	0x0000
 8003c14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop

08003c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003c22:	f3ef 8305 	mrs	r3, IPSR
 8003c26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	d915      	bls.n	8003c5a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c2e:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <vPortValidateInterruptPriority+0x74>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c38:	4b16      	ldr	r3, [pc, #88]	@ (8003c94 <vPortValidateInterruptPriority+0x78>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	7afa      	ldrb	r2, [r7, #11]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d20b      	bcs.n	8003c5a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	607b      	str	r3, [r7, #4]
    }
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <vPortValidateInterruptPriority+0x7c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c62:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <vPortValidateInterruptPriority+0x80>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d90b      	bls.n	8003c82 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	603b      	str	r3, [r7, #0]
    }
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <vPortValidateInterruptPriority+0x62>
    }
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000e3f0 	.word	0xe000e3f0
 8003c94:	200001a4 	.word	0x200001a4
 8003c98:	e000ed0c 	.word	0xe000ed0c
 8003c9c:	200001a8 	.word	0x200001a8

08003ca0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	@ 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003cac:	f7fe ff40 	bl	8002b30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003cb0:	4b54      	ldr	r3, [pc, #336]	@ (8003e04 <pvPortMalloc+0x164>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003cb8:	f000 f908 	bl	8003ecc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d012      	beq.n	8003ce8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	3308      	adds	r3, #8
 8003cce:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d804      	bhi.n	8003ce4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	e001      	b.n	8003ce8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	db71      	blt.n	8003dd2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d06e      	beq.n	8003dd2 <pvPortMalloc+0x132>
 8003cf4:	4b44      	ldr	r3, [pc, #272]	@ (8003e08 <pvPortMalloc+0x168>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d869      	bhi.n	8003dd2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003cfe:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <pvPortMalloc+0x16c>)
 8003d00:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003d02:	4b42      	ldr	r3, [pc, #264]	@ (8003e0c <pvPortMalloc+0x16c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d08:	e004      	b.n	8003d14 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d903      	bls.n	8003d26 <pvPortMalloc+0x86>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f1      	bne.n	8003d0a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d26:	4b37      	ldr	r3, [pc, #220]	@ (8003e04 <pvPortMalloc+0x164>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d050      	beq.n	8003dd2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2208      	movs	r2, #8
 8003d36:	4413      	add	r3, r2
 8003d38:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	1ad2      	subs	r2, r2, r3
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d920      	bls.n	8003d94 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <pvPortMalloc+0xdc>
        __asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	613b      	str	r3, [r7, #16]
    }
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad2      	subs	r2, r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f000 f8f8 	bl	8003f84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d94:	4b1c      	ldr	r3, [pc, #112]	@ (8003e08 <pvPortMalloc+0x168>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e08 <pvPortMalloc+0x168>)
 8003da0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003da2:	4b19      	ldr	r3, [pc, #100]	@ (8003e08 <pvPortMalloc+0x168>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <pvPortMalloc+0x170>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d203      	bcs.n	8003db6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dae:	4b16      	ldr	r3, [pc, #88]	@ (8003e08 <pvPortMalloc+0x168>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <pvPortMalloc+0x170>)
 8003db4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <pvPortMalloc+0x174>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4a11      	ldr	r2, [pc, #68]	@ (8003e14 <pvPortMalloc+0x174>)
 8003dd0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003dd2:	f7fe febb 	bl	8002b4c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <pvPortMalloc+0x158>
        __asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	60fb      	str	r3, [r7, #12]
    }
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <pvPortMalloc+0x154>
    return pvReturn;
 8003df8:	69fb      	ldr	r3, [r7, #28]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	@ 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20012db4 	.word	0x20012db4
 8003e08:	20012db8 	.word	0x20012db8
 8003e0c:	20012dac 	.word	0x20012dac
 8003e10:	20012dbc 	.word	0x20012dbc
 8003e14:	20012dc0 	.word	0x20012dc0

08003e18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d047      	beq.n	8003eba <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	425b      	negs	r3, r3
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4413      	add	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db0b      	blt.n	8003e58 <vPortFree+0x40>
        __asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
    }
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <vPortFree+0x60>
        __asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60bb      	str	r3, [r7, #8]
    }
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	da1c      	bge.n	8003eba <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d118      	bne.n	8003eba <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003e94:	f7fe fe4c 	bl	8002b30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <vPortFree+0xac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <vPortFree+0xac>)
 8003ea4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ea6:	6938      	ldr	r0, [r7, #16]
 8003ea8:	f000 f86c 	bl	8003f84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003eac:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <vPortFree+0xb0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <vPortFree+0xb0>)
 8003eb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003eb6:	f7fe fe49 	bl	8002b4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20012db8 	.word	0x20012db8
 8003ec8:	20012dc4 	.word	0x20012dc4

08003ecc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ed2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <prvHeapInit+0xa4>)
 8003eda:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3307      	adds	r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0307 	bic.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <prvHeapInit+0xa4>)
 8003efc:	4413      	add	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f04:	4a1b      	ldr	r2, [pc, #108]	@ (8003f74 <prvHeapInit+0xa8>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <prvHeapInit+0xa8>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4413      	add	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f18:	2208      	movs	r2, #8
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0307 	bic.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <prvHeapInit+0xac>)
 8003f2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <prvHeapInit+0xac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <prvHeapInit+0xac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <prvHeapInit+0xac>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a08      	ldr	r2, [pc, #32]	@ (8003f7c <prvHeapInit+0xb0>)
 8003f5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a07      	ldr	r2, [pc, #28]	@ (8003f80 <prvHeapInit+0xb4>)
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	200001ac 	.word	0x200001ac
 8003f74:	20012dac 	.word	0x20012dac
 8003f78:	20012db4 	.word	0x20012db4
 8003f7c:	20012dbc 	.word	0x20012dbc
 8003f80:	20012db8 	.word	0x20012db8

08003f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f8c:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <prvInsertBlockIntoFreeList+0xac>)
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e002      	b.n	8003f98 <prvInsertBlockIntoFreeList+0x14>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d8f7      	bhi.n	8003f92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d108      	bne.n	8003fc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d118      	bne.n	800400c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <prvInsertBlockIntoFreeList+0xb0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d00d      	beq.n	8004002 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e008      	b.n	8004014 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004002:	4b0c      	ldr	r3, [pc, #48]	@ (8004034 <prvInsertBlockIntoFreeList+0xb0>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e003      	b.n	8004014 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d002      	beq.n	8004022 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20012dac 	.word	0x20012dac
 8004034:	20012db4 	.word	0x20012db4

08004038 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800403c:	4803      	ldr	r0, [pc, #12]	@ (800404c <_cbSendSystemDesc+0x14>)
 800403e:	f001 fa9f 	bl	8005580 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004042:	4803      	ldr	r0, [pc, #12]	@ (8004050 <_cbSendSystemDesc+0x18>)
 8004044:	f001 fa9c 	bl	8005580 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004048:	bf00      	nop
 800404a:	bd80      	pop	{r7, pc}
 800404c:	08005cac 	.word	0x08005cac
 8004050:	08005ce4 	.word	0x08005ce4

08004054 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <SEGGER_SYSVIEW_Conf+0x20>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <SEGGER_SYSVIEW_Conf+0x20>)
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <SEGGER_SYSVIEW_Conf+0x24>)
 8004062:	4a06      	ldr	r2, [pc, #24]	@ (800407c <SEGGER_SYSVIEW_Conf+0x28>)
 8004064:	f000 fdd2 	bl	8004c0c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004068:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800406c:	f000 fe12 	bl	8004c94 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000000 	.word	0x20000000
 8004078:	08004039 	.word	0x08004039
 800407c:	08005d88 	.word	0x08005d88

08004080 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004082:	b085      	sub	sp, #20
 8004084:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	e033      	b.n	80040f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800408c:	491e      	ldr	r1, [pc, #120]	@ (8004108 <_cbSendTaskList+0x88>)
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	491a      	ldr	r1, [pc, #104]	@ (8004108 <_cbSendTaskList+0x88>)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3304      	adds	r3, #4
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	4c16      	ldr	r4, [pc, #88]	@ (8004108 <_cbSendTaskList+0x88>)
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4423      	add	r3, r4
 80040bc:	3308      	adds	r3, #8
 80040be:	681c      	ldr	r4, [r3, #0]
 80040c0:	4d11      	ldr	r5, [pc, #68]	@ (8004108 <_cbSendTaskList+0x88>)
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	442b      	add	r3, r5
 80040ce:	330c      	adds	r3, #12
 80040d0:	681d      	ldr	r5, [r3, #0]
 80040d2:	4e0d      	ldr	r6, [pc, #52]	@ (8004108 <_cbSendTaskList+0x88>)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4433      	add	r3, r6
 80040e0:	3310      	adds	r3, #16
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	462b      	mov	r3, r5
 80040e8:	4622      	mov	r2, r4
 80040ea:	f000 f979 	bl	80043e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3301      	adds	r3, #1
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <_cbSendTaskList+0x8c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3c6      	bcc.n	800408c <_cbSendTaskList+0xc>
  }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	20012dc8 	.word	0x20012dc8
 800410c:	20012e68 	.word	0x20012e68

08004110 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004118:	f7fe fe18 	bl	8002d4c <xTaskGetTickCountFromISR>
 800411c:	4603      	mov	r3, r0
 800411e:	2200      	movs	r2, #0
 8004120:	469a      	mov	sl, r3
 8004122:	4693      	mov	fp, r2
 8004124:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	f04f 0a00 	mov.w	sl, #0
 8004134:	f04f 0b00 	mov.w	fp, #0
 8004138:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800413c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004140:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004144:	4652      	mov	r2, sl
 8004146:	465b      	mov	r3, fp
 8004148:	1a14      	subs	r4, r2, r0
 800414a:	eb63 0501 	sbc.w	r5, r3, r1
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	00ab      	lsls	r3, r5, #2
 8004158:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800415c:	00a2      	lsls	r2, r4, #2
 800415e:	4614      	mov	r4, r2
 8004160:	461d      	mov	r5, r3
 8004162:	eb14 0800 	adds.w	r8, r4, r0
 8004166:	eb45 0901 	adc.w	r9, r5, r1
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800417a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417e:	4690      	mov	r8, r2
 8004180:	4699      	mov	r9, r3
 8004182:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004186:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004198 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80041a6:	2205      	movs	r2, #5
 80041a8:	492b      	ldr	r1, [pc, #172]	@ (8004258 <SYSVIEW_AddTask+0xc0>)
 80041aa:	68b8      	ldr	r0, [r7, #8]
 80041ac:	f001 fce2 	bl	8005b74 <memcmp>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d04b      	beq.n	800424e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80041b6:	4b29      	ldr	r3, [pc, #164]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b07      	cmp	r3, #7
 80041bc:	d903      	bls.n	80041c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80041be:	4828      	ldr	r0, [pc, #160]	@ (8004260 <SYSVIEW_AddTask+0xc8>)
 80041c0:	f001 fc7c 	bl	8005abc <SEGGER_SYSVIEW_Warn>
    return;
 80041c4:	e044      	b.n	8004250 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80041c6:	4b25      	ldr	r3, [pc, #148]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4926      	ldr	r1, [pc, #152]	@ (8004264 <SYSVIEW_AddTask+0xcc>)
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4921      	ldr	r1, [pc, #132]	@ (8004264 <SYSVIEW_AddTask+0xcc>)
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3304      	adds	r3, #4
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	491b      	ldr	r1, [pc, #108]	@ (8004264 <SYSVIEW_AddTask+0xcc>)
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3308      	adds	r3, #8
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4916      	ldr	r1, [pc, #88]	@ (8004264 <SYSVIEW_AddTask+0xcc>)
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	330c      	adds	r3, #12
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800421c:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4910      	ldr	r1, [pc, #64]	@ (8004264 <SYSVIEW_AddTask+0xcc>)
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3310      	adds	r3, #16
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	4a08      	ldr	r2, [pc, #32]	@ (800425c <SYSVIEW_AddTask+0xc4>)
 800423a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f8ca 	bl	80043e0 <SYSVIEW_SendTaskInfo>
 800424c:	e000      	b.n	8004250 <SYSVIEW_AddTask+0xb8>
    return;
 800424e:	bf00      	nop

}
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	08005cf4 	.word	0x08005cf4
 800425c:	20012e68 	.word	0x20012e68
 8004260:	08005cfc 	.word	0x08005cfc
 8004264:	20012dc8 	.word	0x20012dc8

08004268 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004270:	4b59      	ldr	r3, [pc, #356]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80ab 	beq.w	80043d0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e00d      	b.n	800429c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004280:	4956      	ldr	r1, [pc, #344]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d008      	beq.n	80042a8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	4b4e      	ldr	r3, [pc, #312]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d3ec      	bcc.n	8004280 <SYSVIEW_DeleteTask+0x18>
 80042a6:	e000      	b.n	80042aa <SYSVIEW_DeleteTask+0x42>
      break;
 80042a8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80042aa:	4b4b      	ldr	r3, [pc, #300]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d111      	bne.n	80042da <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4a46      	ldr	r2, [pc, #280]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 80042c2:	4413      	add	r3, r2
 80042c4:	2214      	movs	r2, #20
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fc63 	bl	8005b94 <memset>
    _NumTasks--;
 80042ce:	4b42      	ldr	r3, [pc, #264]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	4a40      	ldr	r2, [pc, #256]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e07b      	b.n	80043d2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80042da:	4b3f      	ldr	r3, [pc, #252]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d276      	bcs.n	80043d2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80042e4:	4b3c      	ldr	r3, [pc, #240]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	493c      	ldr	r1, [pc, #240]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	6819      	ldr	r1, [r3, #0]
 80042f8:	4838      	ldr	r0, [pc, #224]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4403      	add	r3, r0
 8004306:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004308:	4b33      	ldr	r3, [pc, #204]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1e5a      	subs	r2, r3, #1
 800430e:	4933      	ldr	r1, [pc, #204]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3304      	adds	r3, #4
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	482f      	ldr	r0, [pc, #188]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4403      	add	r3, r0
 800432c:	3304      	adds	r3, #4
 800432e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004330:	4b29      	ldr	r3, [pc, #164]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	4929      	ldr	r1, [pc, #164]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3308      	adds	r3, #8
 8004344:	6819      	ldr	r1, [r3, #0]
 8004346:	4825      	ldr	r0, [pc, #148]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4403      	add	r3, r0
 8004354:	3308      	adds	r3, #8
 8004356:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004358:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	491f      	ldr	r1, [pc, #124]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	330c      	adds	r3, #12
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	481b      	ldr	r0, [pc, #108]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4403      	add	r3, r0
 800437c:	330c      	adds	r3, #12
 800437e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004380:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	4915      	ldr	r1, [pc, #84]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3310      	adds	r3, #16
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	4811      	ldr	r0, [pc, #68]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4403      	add	r3, r0
 80043a4:	3310      	adds	r3, #16
 80043a6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80043a8:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <SYSVIEW_DeleteTask+0x174>)
 80043b8:	4413      	add	r3, r2
 80043ba:	2214      	movs	r2, #20
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 fbe8 	bl	8005b94 <memset>
    _NumTasks--;
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	4a03      	ldr	r2, [pc, #12]	@ (80043d8 <SYSVIEW_DeleteTask+0x170>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e000      	b.n	80043d2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80043d0:	bf00      	nop
  }
}
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20012e68 	.word	0x20012e68
 80043dc:	20012dc8 	.word	0x20012dc8

080043e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	2214      	movs	r2, #20
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fbcc 	bl	8005b94 <memset>
  TaskInfo.TaskID     = TaskID;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	4618      	mov	r0, r3
 8004416:	f000 ffbb 	bl	8005390 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800441a:	bf00      	nop
 800441c:	3728      	adds	r7, #40	@ 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800442a:	4b24      	ldr	r3, [pc, #144]	@ (80044bc <_DoInit+0x98>)
 800442c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2203      	movs	r2, #3
 8004432:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2203      	movs	r2, #3
 8004438:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <_DoInit+0x9c>)
 800443e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a20      	ldr	r2, [pc, #128]	@ (80044c4 <_DoInit+0xa0>)
 8004444:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800444c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a17      	ldr	r2, [pc, #92]	@ (80044c0 <_DoInit+0x9c>)
 8004464:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <_DoInit+0xa4>)
 800446a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2210      	movs	r2, #16
 8004470:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3307      	adds	r3, #7
 8004488:	4a10      	ldr	r2, [pc, #64]	@ (80044cc <_DoInit+0xa8>)
 800448a:	6810      	ldr	r0, [r2, #0]
 800448c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800448e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a0e      	ldr	r2, [pc, #56]	@ (80044d0 <_DoInit+0xac>)
 8004496:	6810      	ldr	r0, [r2, #0]
 8004498:	6018      	str	r0, [r3, #0]
 800449a:	8891      	ldrh	r1, [r2, #4]
 800449c:	7992      	ldrb	r2, [r2, #6]
 800449e:	8099      	strh	r1, [r3, #4]
 80044a0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044a2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044ac:	f3bf 8f5f 	dmb	sy
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20012e6c 	.word	0x20012e6c
 80044c0:	08005d4c 	.word	0x08005d4c
 80044c4:	20012f14 	.word	0x20012f14
 80044c8:	20013314 	.word	0x20013314
 80044cc:	08005d58 	.word	0x08005d58
 80044d0:	08005d5c 	.word	0x08005d5c

080044d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80044e0:	4b3e      	ldr	r3, [pc, #248]	@ (80045dc <SEGGER_RTT_ReadNoLock+0x108>)
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80044ee:	f7ff ff99 	bl	8004424 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	3360      	adds	r3, #96	@ 0x60
 80044fe:	4a37      	ldr	r2, [pc, #220]	@ (80045dc <SEGGER_RTT_ReadNoLock+0x108>)
 8004500:	4413      	add	r3, r2
 8004502:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004514:	2300      	movs	r3, #0
 8004516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d92b      	bls.n	8004578 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4293      	cmp	r3, r2
 8004530:	bf28      	it	cs
 8004532:	4613      	movcs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	4413      	add	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004546:	f001 fb51 	bl	8005bec <memcpy>
    NumBytesRead += NumBytesRem;
 800454a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4413      	add	r3, r2
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004570:	429a      	cmp	r2, r3
 8004572:	d101      	bne.n	8004578 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4293      	cmp	r3, r2
 8004586:	bf28      	it	cs
 8004588:	4613      	movcs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d019      	beq.n	80045c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	4413      	add	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045a2:	f001 fb23 	bl	8005bec <memcpy>
    NumBytesRead += NumBytesRem;
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80045d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3730      	adds	r7, #48	@ 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20012e6c 	.word	0x20012e6c

080045e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <SEGGER_RTT_AllocUpBuffer+0x20>
 80045fc:	f7ff ff12 	bl	8004424 <_DoInit>
  SEGGER_RTT_LOCK();
 8004600:	f3ef 8311 	mrs	r3, BASEPRI
 8004604:	f04f 0120 	mov.w	r1, #32
 8004608:	f381 8811 	msr	BASEPRI, r1
 800460c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800460e:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004610:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	3304      	adds	r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	429a      	cmp	r2, r3
 800463c:	dbeb      	blt.n	8004616 <SEGGER_RTT_AllocUpBuffer+0x36>
 800463e:	e000      	b.n	8004642 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004640:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	da3f      	bge.n	80046cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	3304      	adds	r3, #4
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	3320      	adds	r3, #32
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800468a:	6939      	ldr	r1, [r7, #16]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	3328      	adds	r3, #40	@ 0x28
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	3324      	adds	r3, #36	@ 0x24
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80046b2:	6939      	ldr	r1, [r7, #16]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	332c      	adds	r3, #44	@ 0x2c
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046c6:	f3bf 8f5f 	dmb	sy
 80046ca:	e002      	b.n	80046d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80046d8:	69fb      	ldr	r3, [r7, #28]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20012e6c 	.word	0x20012e6c

080046e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80046f6:	4b33      	ldr	r3, [pc, #204]	@ (80047c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004704:	f7ff fe8e 	bl	8004424 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004708:	4b2e      	ldr	r3, [pc, #184]	@ (80047c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800470a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	461a      	mov	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4293      	cmp	r3, r2
 8004716:	d24d      	bcs.n	80047b4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004718:	f3ef 8311 	mrs	r3, BASEPRI
 800471c:	f04f 0120 	mov.w	r1, #32
 8004720:	f381 8811 	msr	BASEPRI, r1
 8004724:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d031      	beq.n	8004790 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3360      	adds	r3, #96	@ 0x60
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	440b      	add	r3, r1
 800474e:	3364      	adds	r3, #100	@ 0x64
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004754:	6979      	ldr	r1, [r7, #20]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	440b      	add	r3, r1
 8004762:	3368      	adds	r3, #104	@ 0x68
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004768:	6979      	ldr	r1, [r7, #20]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	3370      	adds	r3, #112	@ 0x70
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800477c:	6979      	ldr	r1, [r7, #20]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	440b      	add	r3, r1
 800478a:	336c      	adds	r3, #108	@ 0x6c
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	440b      	add	r3, r1
 800479e:	3374      	adds	r3, #116	@ 0x74
 80047a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e002      	b.n	80047ba <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20012e6c 	.word	0x20012e6c

080047c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047d8:	e002      	b.n	80047e0 <_EncodeStr+0x18>
    Len++;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3301      	adds	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4413      	add	r3, r2
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f6      	bne.n	80047da <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d901      	bls.n	80047f8 <_EncodeStr+0x30>
    Len = Limit;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80047fc:	d806      	bhi.n	800480c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	60fa      	str	r2, [r7, #12]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e011      	b.n	8004830 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	60fa      	str	r2, [r7, #12]
 8004812:	22ff      	movs	r2, #255	@ 0xff
 8004814:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	60fa      	str	r2, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	0a19      	lsrs	r1, r3, #8
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	60fa      	str	r2, [r7, #12]
 800482c:	b2ca      	uxtb	r2, r1
 800482e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004834:	e00a      	b.n	800484c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	1c53      	adds	r3, r2, #1
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	60f9      	str	r1, [r7, #12]
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	701a      	strb	r2, [r3, #0]
    n++;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3301      	adds	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3f0      	bcc.n	8004836 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	4618      	mov	r0, r3
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004882:	4b35      	ldr	r3, [pc, #212]	@ (8004958 <_HandleIncomingPacket+0xdc>)
 8004884:	7e1b      	ldrb	r3, [r3, #24]
 8004886:	4618      	mov	r0, r3
 8004888:	1cfb      	adds	r3, r7, #3
 800488a:	2201      	movs	r2, #1
 800488c:	4619      	mov	r1, r3
 800488e:	f7ff fe21 	bl	80044d4 <SEGGER_RTT_ReadNoLock>
 8004892:	4603      	mov	r3, r0
 8004894:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dd59      	ble.n	8004950 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b80      	cmp	r3, #128	@ 0x80
 80048a0:	d032      	beq.n	8004908 <_HandleIncomingPacket+0x8c>
 80048a2:	2b80      	cmp	r3, #128	@ 0x80
 80048a4:	dc42      	bgt.n	800492c <_HandleIncomingPacket+0xb0>
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	dc16      	bgt.n	80048d8 <_HandleIncomingPacket+0x5c>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dd3e      	ble.n	800492c <_HandleIncomingPacket+0xb0>
 80048ae:	3b01      	subs	r3, #1
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	d83b      	bhi.n	800492c <_HandleIncomingPacket+0xb0>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <_HandleIncomingPacket+0x40>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048df 	.word	0x080048df
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048eb 	.word	0x080048eb
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f7 	.word	0x080048f7
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004903 	.word	0x08004903
 80048d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048da:	d034      	beq.n	8004946 <_HandleIncomingPacket+0xca>
 80048dc:	e026      	b.n	800492c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80048de:	f000 fbdd 	bl	800509c <SEGGER_SYSVIEW_Start>
      break;
 80048e2:	e035      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80048e4:	f000 fc94 	bl	8005210 <SEGGER_SYSVIEW_Stop>
      break;
 80048e8:	e032      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80048ea:	f000 fe6d 	bl	80055c8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80048ee:	e02f      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80048f0:	f000 fe32 	bl	8005558 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80048f4:	e02c      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80048f6:	f000 fcb1 	bl	800525c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80048fa:	e029      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80048fc:	f001 f8a0 	bl	8005a40 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004900:	e026      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004902:	f001 f87f 	bl	8005a04 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004906:	e023      	b.n	8004950 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <_HandleIncomingPacket+0xdc>)
 800490a:	7e1b      	ldrb	r3, [r3, #24]
 800490c:	4618      	mov	r0, r3
 800490e:	1cfb      	adds	r3, r7, #3
 8004910:	2201      	movs	r2, #1
 8004912:	4619      	mov	r1, r3
 8004914:	f7ff fdde 	bl	80044d4 <SEGGER_RTT_ReadNoLock>
 8004918:	4603      	mov	r3, r0
 800491a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	dd13      	ble.n	800494a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 ffed 	bl	8005904 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800492a:	e00e      	b.n	800494a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	b25b      	sxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	da0c      	bge.n	800494e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004934:	4b08      	ldr	r3, [pc, #32]	@ (8004958 <_HandleIncomingPacket+0xdc>)
 8004936:	7e1b      	ldrb	r3, [r3, #24]
 8004938:	4618      	mov	r0, r3
 800493a:	1cfb      	adds	r3, r7, #3
 800493c:	2201      	movs	r2, #1
 800493e:	4619      	mov	r1, r3
 8004940:	f7ff fdc8 	bl	80044d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004944:	e003      	b.n	800494e <_HandleIncomingPacket+0xd2>
      break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <_HandleIncomingPacket+0xd4>
      break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <_HandleIncomingPacket+0xd4>
      break;
 800494e:	bf00      	nop
    }
  }
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	2001432c 	.word	0x2001432c

0800495c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	@ 0x30
 8004960:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004962:	2301      	movs	r3, #1
 8004964:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004966:	1d3b      	adds	r3, r7, #4
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004970:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004976:	e00b      	b.n	8004990 <_TrySendOverflowPacket+0x34>
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	b2da      	uxtb	r2, r3
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004982:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	09db      	lsrs	r3, r3, #7
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	2b7f      	cmp	r3, #127	@ 0x7f
 8004994:	d8f0      	bhi.n	8004978 <_TrySendOverflowPacket+0x1c>
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800499c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049a6:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <_TrySendOverflowPacket+0xe0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049ac:	4b22      	ldr	r3, [pc, #136]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	e00b      	b.n	80049d8 <_TrySendOverflowPacket+0x7c>
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	1c59      	adds	r1, r3, #1
 80049c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80049ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	09db      	lsrs	r3, r3, #7
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2b7f      	cmp	r3, #127	@ 0x7f
 80049dc:	d8f0      	bhi.n	80049c0 <_TrySendOverflowPacket+0x64>
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80049ee:	4b12      	ldr	r3, [pc, #72]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	4618      	mov	r0, r3
 80049f4:	1d3b      	adds	r3, r7, #4
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7fb fbe6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a04:	4603      	mov	r3, r0
 8004a06:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a14:	4b08      	ldr	r3, [pc, #32]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e004      	b.n	8004a2c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004a22:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	3301      	adds	r3, #1
 8004a28:	4a03      	ldr	r2, [pc, #12]	@ (8004a38 <_TrySendOverflowPacket+0xdc>)
 8004a2a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004a2c:	693b      	ldr	r3, [r7, #16]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3730      	adds	r7, #48	@ 0x30
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	2001432c 	.word	0x2001432c
 8004a3c:	e0001004 	.word	0xe0001004

08004a40 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	@ 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004c00 <_SendPacket+0x1c0>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d010      	beq.n	8004a76 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004a54:	4b6a      	ldr	r3, [pc, #424]	@ (8004c00 <_SendPacket+0x1c0>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a3 	beq.w	8004ba4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004a5e:	4b68      	ldr	r3, [pc, #416]	@ (8004c00 <_SendPacket+0x1c0>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d109      	bne.n	8004a7a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004a66:	f7ff ff79 	bl	800495c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004a6a:	4b65      	ldr	r3, [pc, #404]	@ (8004c00 <_SendPacket+0x1c0>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	f040 809a 	bne.w	8004ba8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004a74:	e001      	b.n	8004a7a <_SendPacket+0x3a>
    goto Send;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <_SendPacket+0x3c>
Send:
 8004a7a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b1f      	cmp	r3, #31
 8004a80:	d809      	bhi.n	8004a96 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a82:	4b5f      	ldr	r3, [pc, #380]	@ (8004c00 <_SendPacket+0x1c0>)
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f040 808b 	bne.w	8004bac <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b17      	cmp	r3, #23
 8004a9a:	d807      	bhi.n	8004aac <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	e03d      	b.n	8004b28 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ab8:	d912      	bls.n	8004ae0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	09da      	lsrs	r2, r3, #7
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	60fa      	str	r2, [r7, #12]
 8004ad4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e006      	b.n	8004aee <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004af2:	d912      	bls.n	8004b1a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	09da      	lsrs	r2, r3, #7
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	60fa      	str	r2, [r7, #12]
 8004b0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e006      	b.n	8004b28 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b28:	4b36      	ldr	r3, [pc, #216]	@ (8004c04 <_SendPacket+0x1c4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b2e:	4b34      	ldr	r3, [pc, #208]	@ (8004c00 <_SendPacket+0x1c0>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	e00b      	b.n	8004b5a <_SendPacket+0x11a>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5e:	d8f0      	bhi.n	8004b42 <_SendPacket+0x102>
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004b70:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <_SendPacket+0x1c0>)
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	4618      	mov	r0, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	f7fb fb26 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b84:	4603      	mov	r3, r0
 8004b86:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c00 <_SendPacket+0x1c0>)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	60d3      	str	r3, [r2, #12]
 8004b94:	e00b      	b.n	8004bae <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b96:	4b1a      	ldr	r3, [pc, #104]	@ (8004c00 <_SendPacket+0x1c0>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4b18      	ldr	r3, [pc, #96]	@ (8004c00 <_SendPacket+0x1c0>)
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e004      	b.n	8004bae <_SendPacket+0x16e>
    goto SendDone;
 8004ba4:	bf00      	nop
 8004ba6:	e002      	b.n	8004bae <_SendPacket+0x16e>
      goto SendDone;
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <_SendPacket+0x16e>
      goto SendDone;
 8004bac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004bae:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <_SendPacket+0x1c0>)
 8004bb0:	7e1b      	ldrb	r3, [r3, #24]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4a14      	ldr	r2, [pc, #80]	@ (8004c08 <_SendPacket+0x1c8>)
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	440b      	add	r3, r1
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	336c      	adds	r3, #108	@ 0x6c
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c00 <_SendPacket+0x1c0>)
 8004bc6:	7e1b      	ldrb	r3, [r3, #24]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	490f      	ldr	r1, [pc, #60]	@ (8004c08 <_SendPacket+0x1c8>)
 8004bcc:	4603      	mov	r3, r0
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4403      	add	r3, r0
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3370      	adds	r3, #112	@ 0x70
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d00b      	beq.n	8004bf6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004bde:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <_SendPacket+0x1c0>)
 8004be0:	789b      	ldrb	r3, [r3, #2]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <_SendPacket+0x1c0>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bec:	f7ff fe46 	bl	800487c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	@ (8004c00 <_SendPacket+0x1c0>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bf6:	bf00      	nop
 8004bf8:	3728      	adds	r7, #40	@ 0x28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2001432c 	.word	0x2001432c
 8004c04:	e0001004 	.word	0xe0001004
 8004c08:	20012e6c 	.word	0x20012e6c

08004c0c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c20:	4917      	ldr	r1, [pc, #92]	@ (8004c80 <SEGGER_SYSVIEW_Init+0x74>)
 8004c22:	4818      	ldr	r0, [pc, #96]	@ (8004c84 <SEGGER_SYSVIEW_Init+0x78>)
 8004c24:	f7ff fcdc 	bl	80045e0 <SEGGER_RTT_AllocUpBuffer>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c30:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c32:	785a      	ldrb	r2, [r3, #1]
 8004c34:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c36:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c38:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3a:	7e1b      	ldrb	r3, [r3, #24]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2308      	movs	r3, #8
 8004c44:	4a11      	ldr	r2, [pc, #68]	@ (8004c8c <SEGGER_SYSVIEW_Init+0x80>)
 8004c46:	490f      	ldr	r1, [pc, #60]	@ (8004c84 <SEGGER_SYSVIEW_Init+0x78>)
 8004c48:	f7ff fd4e 	bl	80046e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c52:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x84>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a0c      	ldr	r2, [pc, #48]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c58:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c60:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c66:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c6c:	4a06      	ldr	r2, [pc, #24]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c72:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20013324 	.word	0x20013324
 8004c84:	08005d64 	.word	0x08005d64
 8004c88:	2001432c 	.word	0x2001432c
 8004c8c:	20014324 	.word	0x20014324
 8004c90:	e0001004 	.word	0xe0001004

08004c94 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c9c:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6113      	str	r3, [r2, #16]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2001432c 	.word	0x2001432c

08004cb4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc0:	f04f 0120 	mov.w	r1, #32
 8004cc4:	f381 8811 	msr	BASEPRI, r1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	4808      	ldr	r0, [pc, #32]	@ (8004cec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ccc:	f7ff fdc9 	bl	8004862 <_PreparePacket>
 8004cd0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	68b8      	ldr	r0, [r7, #8]
 8004cd8:	f7ff feb2 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f383 8811 	msr	BASEPRI, r3
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2001435c 	.word	0x2001435c

08004cf0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cfe:	f04f 0120 	mov.w	r1, #32
 8004d02:	f381 8811 	msr	BASEPRI, r1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	4816      	ldr	r0, [pc, #88]	@ (8004d64 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d0a:	f7ff fdaa 	bl	8004862 <_PreparePacket>
 8004d0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e00b      	b.n	8004d36 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	61f9      	str	r1, [r7, #28]
 8004d28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	09db      	lsrs	r3, r3, #7
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d3a:	d8f0      	bhi.n	8004d1e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	61fa      	str	r2, [r7, #28]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	6938      	ldr	r0, [r7, #16]
 8004d52:	f7ff fe75 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f383 8811 	msr	BASEPRI, r3
}
 8004d5c:	bf00      	nop
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2001435c 	.word	0x2001435c

08004d68 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	@ 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d74:	f3ef 8311 	mrs	r3, BASEPRI
 8004d78:	f04f 0120 	mov.w	r1, #32
 8004d7c:	f381 8811 	msr	BASEPRI, r1
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	4825      	ldr	r0, [pc, #148]	@ (8004e18 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d84:	f7ff fd6d 	bl	8004862 <_PreparePacket>
 8004d88:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d96:	e00b      	b.n	8004db0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004da2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	09db      	lsrs	r3, r3, #7
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db4:	d8f0      	bhi.n	8004d98 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	623b      	str	r3, [r7, #32]
 8004dce:	e00b      	b.n	8004de8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	1c59      	adds	r1, r3, #1
 8004dd8:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	09db      	lsrs	r3, r3, #7
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dec:	d8f0      	bhi.n	8004dd0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6979      	ldr	r1, [r7, #20]
 8004e02:	69b8      	ldr	r0, [r7, #24]
 8004e04:	f7ff fe1c 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
 8004e10:	3730      	adds	r7, #48	@ 0x30
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2001435c 	.word	0x2001435c

08004e1c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b090      	sub	sp, #64	@ 0x40
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2e:	f04f 0120 	mov.w	r1, #32
 8004e32:	f381 8811 	msr	BASEPRI, r1
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	4840      	ldr	r0, [pc, #256]	@ (8004f3c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004e3a:	f7ff fd12 	bl	8004862 <_PreparePacket>
 8004e3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e4c:	e00b      	b.n	8004e66 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e54:	1c59      	adds	r1, r3, #1
 8004e56:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004e58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e6a:	d8f0      	bhi.n	8004e4e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e84:	e00b      	b.n	8004e9e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	1c59      	adds	r1, r3, #1
 8004e8e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	09db      	lsrs	r3, r3, #7
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ea2:	d8f0      	bhi.n	8004e86 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	637a      	str	r2, [r7, #52]	@ 0x34
 8004eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ebc:	e00b      	b.n	8004ed6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec4:	1c59      	adds	r1, r3, #1
 8004ec6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ec8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	09db      	lsrs	r3, r3, #7
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eda:	d8f0      	bhi.n	8004ebe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	e00b      	b.n	8004f0e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	09db      	lsrs	r3, r3, #7
 8004f0c:	623b      	str	r3, [r7, #32]
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f12:	d8f0      	bhi.n	8004ef6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	69b8      	ldr	r0, [r7, #24]
 8004f2a:	f7ff fd89 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f383 8811 	msr	BASEPRI, r3
}
 8004f34:	bf00      	nop
 8004f36:	3740      	adds	r7, #64	@ 0x40
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	2001435c 	.word	0x2001435c

08004f40 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b092      	sub	sp, #72	@ 0x48
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f52:	f04f 0120 	mov.w	r1, #32
 8004f56:	f381 8811 	msr	BASEPRI, r1
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	484e      	ldr	r0, [pc, #312]	@ (8005098 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004f5e:	f7ff fc80 	bl	8004862 <_PreparePacket>
 8004f62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f70:	e00b      	b.n	8004f8a <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8004f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	6479      	str	r1, [r7, #68]	@ 0x44
 8004f7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f86:	09db      	lsrs	r3, r3, #7
 8004f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f8e:	d8f0      	bhi.n	8004f72 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fa8:	e00b      	b.n	8004fc2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb0:	1c59      	adds	r1, r3, #1
 8004fb2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	09db      	lsrs	r3, r3, #7
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fc6:	d8f0      	bhi.n	8004faa <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe0:	e00b      	b.n	8004ffa <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe8:	1c59      	adds	r1, r3, #1
 8004fea:	6379      	str	r1, [r7, #52]	@ 0x34
 8004fec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	09db      	lsrs	r3, r3, #7
 8004ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ffe:	d8f0      	bhi.n	8004fe2 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	637a      	str	r2, [r7, #52]	@ 0x34
 8005006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005018:	e00b      	b.n	8005032 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	b2da      	uxtb	r2, r3
 800501e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005024:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	2b7f      	cmp	r3, #127	@ 0x7f
 8005036:	d8f0      	bhi.n	800501a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800503e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
 800504c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	e00b      	b.n	800506a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	6279      	str	r1, [r7, #36]	@ 0x24
 800505c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	09db      	lsrs	r3, r3, #7
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2b7f      	cmp	r3, #127	@ 0x7f
 800506e:	d8f0      	bhi.n	8005052 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	627a      	str	r2, [r7, #36]	@ 0x24
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	69b8      	ldr	r0, [r7, #24]
 8005086:	f7ff fcdb 	bl	8004a40 <_SendPacket>
  RECORD_END();
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f383 8811 	msr	BASEPRI, r3
}
 8005090:	bf00      	nop
 8005092:	3748      	adds	r7, #72	@ 0x48
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	2001435c 	.word	0x2001435c

0800509c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	@ 0x30
 80050a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80050a2:	4b58      	ldr	r3, [pc, #352]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80050a8:	f3ef 8311 	mrs	r3, BASEPRI
 80050ac:	f04f 0120 	mov.w	r1, #32
 80050b0:	f381 8811 	msr	BASEPRI, r1
 80050b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80050b6:	4b53      	ldr	r3, [pc, #332]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	220a      	movs	r2, #10
 80050bc:	4952      	ldr	r1, [pc, #328]	@ (8005208 <SEGGER_SYSVIEW_Start+0x16c>)
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb f886 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80050ca:	200a      	movs	r0, #10
 80050cc:	f7ff fdf2 	bl	8004cb4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050d0:	f3ef 8311 	mrs	r3, BASEPRI
 80050d4:	f04f 0120 	mov.w	r1, #32
 80050d8:	f381 8811 	msr	BASEPRI, r1
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	484b      	ldr	r0, [pc, #300]	@ (800520c <SEGGER_SYSVIEW_Start+0x170>)
 80050e0:	f7ff fbbf 	bl	8004862 <_PreparePacket>
 80050e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ee:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050f4:	e00b      	b.n	800510e <SEGGER_SYSVIEW_Start+0x72>
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005100:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	2b7f      	cmp	r3, #127	@ 0x7f
 8005112:	d8f0      	bhi.n	80050f6 <SEGGER_SYSVIEW_Start+0x5a>
 8005114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800511a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
 8005128:	4b36      	ldr	r3, [pc, #216]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	e00b      	b.n	8005148 <SEGGER_SYSVIEW_Start+0xac>
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	6279      	str	r1, [r7, #36]	@ 0x24
 800513a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b7f      	cmp	r3, #127	@ 0x7f
 800514c:	d8f0      	bhi.n	8005130 <SEGGER_SYSVIEW_Start+0x94>
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	627a      	str	r2, [r7, #36]	@ 0x24
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	4b28      	ldr	r3, [pc, #160]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e00b      	b.n	8005182 <SEGGER_SYSVIEW_Start+0xe6>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1c59      	adds	r1, r3, #1
 8005172:	61f9      	str	r1, [r7, #28]
 8005174:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	09db      	lsrs	r3, r3, #7
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b7f      	cmp	r3, #127	@ 0x7f
 8005186:	d8f0      	bhi.n	800516a <SEGGER_SYSVIEW_Start+0xce>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	61fa      	str	r2, [r7, #28]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e00b      	b.n	80051ba <SEGGER_SYSVIEW_Start+0x11e>
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	1c59      	adds	r1, r3, #1
 80051aa:	6179      	str	r1, [r7, #20]
 80051ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	09db      	lsrs	r3, r3, #7
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80051be:	d8f0      	bhi.n	80051a2 <SEGGER_SYSVIEW_Start+0x106>
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	617a      	str	r2, [r7, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051d0:	2218      	movs	r2, #24
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fc33 	bl	8004a40 <_SendPacket>
      RECORD_END();
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80051e0:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80051e8:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <SEGGER_SYSVIEW_Start+0x168>)
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80051ee:	f000 f9eb 	bl	80055c8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80051f2:	f000 f9b1 	bl	8005558 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80051f6:	f000 fc23 	bl	8005a40 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80051fa:	bf00      	nop
 80051fc:	3730      	adds	r7, #48	@ 0x30
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	2001432c 	.word	0x2001432c
 8005208:	08005d90 	.word	0x08005d90
 800520c:	2001435c 	.word	0x2001435c

08005210 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005216:	f3ef 8311 	mrs	r3, BASEPRI
 800521a:	f04f 0120 	mov.w	r1, #32
 800521e:	f381 8811 	msr	BASEPRI, r1
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	480b      	ldr	r0, [pc, #44]	@ (8005254 <SEGGER_SYSVIEW_Stop+0x44>)
 8005226:	f7ff fb1c 	bl	8004862 <_PreparePacket>
 800522a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <SEGGER_SYSVIEW_Stop+0x48>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005234:	220b      	movs	r2, #11
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6838      	ldr	r0, [r7, #0]
 800523a:	f7ff fc01 	bl	8004a40 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800523e:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <SEGGER_SYSVIEW_Stop+0x48>)
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f383 8811 	msr	BASEPRI, r3
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2001435c 	.word	0x2001435c
 8005258:	2001432c 	.word	0x2001432c

0800525c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	@ 0x30
 8005260:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005262:	f3ef 8311 	mrs	r3, BASEPRI
 8005266:	f04f 0120 	mov.w	r1, #32
 800526a:	f381 8811 	msr	BASEPRI, r1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	4845      	ldr	r0, [pc, #276]	@ (8005388 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005272:	f7ff faf6 	bl	8004862 <_PreparePacket>
 8005276:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005280:	4b42      	ldr	r3, [pc, #264]	@ (800538c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005286:	e00b      	b.n	80052a0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005292:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	09db      	lsrs	r3, r3, #7
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052a4:	d8f0      	bhi.n	8005288 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ba:	4b34      	ldr	r3, [pc, #208]	@ (800538c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	e00b      	b.n	80052da <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80052cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	09db      	lsrs	r3, r3, #7
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80052de:	d8f0      	bhi.n	80052c2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	4b25      	ldr	r3, [pc, #148]	@ (800538c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e00b      	b.n	8005314 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	61f9      	str	r1, [r7, #28]
 8005306:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	09db      	lsrs	r3, r3, #7
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b7f      	cmp	r3, #127	@ 0x7f
 8005318:	d8f0      	bhi.n	80052fc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	61fa      	str	r2, [r7, #28]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e00b      	b.n	800534c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	6179      	str	r1, [r7, #20]
 800533e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	09db      	lsrs	r3, r3, #7
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005350:	d8f0      	bhi.n	8005334 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	617a      	str	r2, [r7, #20]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005362:	2218      	movs	r2, #24
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	68b8      	ldr	r0, [r7, #8]
 8005368:	f7ff fb6a 	bl	8004a40 <_SendPacket>
  RECORD_END();
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005372:	4b06      	ldr	r3, [pc, #24]	@ (800538c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800537a:	4b04      	ldr	r3, [pc, #16]	@ (800538c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	4798      	blx	r3
  }
}
 8005380:	bf00      	nop
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	2001435c 	.word	0x2001435c
 800538c:	2001432c 	.word	0x2001432c

08005390 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b092      	sub	sp, #72	@ 0x48
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005398:	f3ef 8311 	mrs	r3, BASEPRI
 800539c:	f04f 0120 	mov.w	r1, #32
 80053a0:	f381 8811 	msr	BASEPRI, r1
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	486a      	ldr	r0, [pc, #424]	@ (8005550 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80053a8:	f7ff fa5b 	bl	8004862 <_PreparePacket>
 80053ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b66      	ldr	r3, [pc, #408]	@ (8005554 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053c2:	e00b      	b.n	80053dc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80053c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	6479      	str	r1, [r7, #68]	@ 0x44
 80053ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	643b      	str	r3, [r7, #64]	@ 0x40
 80053dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053de:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e0:	d8f0      	bhi.n	80053c4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80053e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80053e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053fc:	e00b      	b.n	8005416 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005418:	2b7f      	cmp	r3, #127	@ 0x7f
 800541a:	d8f0      	bhi.n	80053fe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	4619      	mov	r1, r3
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff f9c7 	bl	80047c8 <_EncodeStr>
 800543a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800543c:	2209      	movs	r2, #9
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	6938      	ldr	r0, [r7, #16]
 8005442:	f7ff fafd 	bl	8004a40 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	637b      	str	r3, [r7, #52]	@ 0x34
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b40      	ldr	r3, [pc, #256]	@ (8005554 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	633b      	str	r3, [r7, #48]	@ 0x30
 800545a:	e00b      	b.n	8005474 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	b2da      	uxtb	r2, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005462:	1c59      	adds	r1, r3, #1
 8005464:	6379      	str	r1, [r7, #52]	@ 0x34
 8005466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	09db      	lsrs	r3, r3, #7
 8005472:	633b      	str	r3, [r7, #48]	@ 0x30
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	2b7f      	cmp	r3, #127	@ 0x7f
 8005478:	d8f0      	bhi.n	800545c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800547a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005488:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005494:	e00b      	b.n	80054ae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	b2da      	uxtb	r2, r3
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	1c59      	adds	r1, r3, #1
 800549e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80054a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	09db      	lsrs	r3, r3, #7
 80054ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054b2:	d8f0      	bhi.n	8005496 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80054b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	623b      	str	r3, [r7, #32]
 80054ce:	e00b      	b.n	80054e8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	1c59      	adds	r1, r3, #1
 80054d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80054da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	09db      	lsrs	r3, r3, #7
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80054ec:	d8f0      	bhi.n	80054d0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	e00b      	b.n	8005520 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	61f9      	str	r1, [r7, #28]
 8005512:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	09db      	lsrs	r3, r3, #7
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b7f      	cmp	r3, #127	@ 0x7f
 8005524:	d8f0      	bhi.n	8005508 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	61fa      	str	r2, [r7, #28]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005536:	2215      	movs	r2, #21
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	6938      	ldr	r0, [r7, #16]
 800553c:	f7ff fa80 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f383 8811 	msr	BASEPRI, r3
}
 8005546:	bf00      	nop
 8005548:	3748      	adds	r7, #72	@ 0x48
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2001435c 	.word	0x2001435c
 8005554:	2001432c 	.word	0x2001432c

08005558 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800555c:	4b07      	ldr	r3, [pc, #28]	@ (800557c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800556e:	4b03      	ldr	r3, [pc, #12]	@ (800557c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4798      	blx	r3
  }
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	2001432c 	.word	0x2001432c

08005580 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005588:	f3ef 8311 	mrs	r3, BASEPRI
 800558c:	f04f 0120 	mov.w	r1, #32
 8005590:	f381 8811 	msr	BASEPRI, r1
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	480b      	ldr	r0, [pc, #44]	@ (80055c4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005598:	f7ff f963 	bl	8004862 <_PreparePacket>
 800559c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800559e:	2280      	movs	r2, #128	@ 0x80
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f7ff f910 	bl	80047c8 <_EncodeStr>
 80055a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80055aa:	220e      	movs	r2, #14
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	6938      	ldr	r0, [r7, #16]
 80055b0:	f7ff fa46 	bl	8004a40 <_SendPacket>
  RECORD_END();
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f383 8811 	msr	BASEPRI, r3
}
 80055ba:	bf00      	nop
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	2001435c 	.word	0x2001435c

080055c8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80055ce:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01a      	beq.n	800560c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80055d6:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80055e0:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4798      	blx	r3
 80055e8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055ec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80055ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	000a      	movs	r2, r1
 80055fc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055fe:	4613      	mov	r3, r2
 8005600:	461a      	mov	r2, r3
 8005602:	4621      	mov	r1, r4
 8005604:	200d      	movs	r0, #13
 8005606:	f7ff fbaf 	bl	8004d68 <SEGGER_SYSVIEW_RecordU32x2>
 800560a:	e006      	b.n	800561a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4619      	mov	r1, r3
 8005612:	200c      	movs	r0, #12
 8005614:	f7ff fb6c 	bl	8004cf0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	bf00      	nop
 8005624:	2001432c 	.word	0x2001432c
 8005628:	e0001004 	.word	0xe0001004

0800562c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005632:	f3ef 8311 	mrs	r3, BASEPRI
 8005636:	f04f 0120 	mov.w	r1, #32
 800563a:	f381 8811 	msr	BASEPRI, r1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	4819      	ldr	r0, [pc, #100]	@ (80056a8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005642:	f7ff f90e 	bl	8004862 <_PreparePacket>
 8005646:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800564c:	4b17      	ldr	r3, [pc, #92]	@ (80056ac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	e00b      	b.n	8005678 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	6179      	str	r1, [r7, #20]
 800566a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	09db      	lsrs	r3, r3, #7
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	2b7f      	cmp	r3, #127	@ 0x7f
 800567c:	d8f0      	bhi.n	8005660 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	617a      	str	r2, [r7, #20]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800568e:	2202      	movs	r2, #2
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f7ff f9d4 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	2001435c 	.word	0x2001435c
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056b6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ba:	f04f 0120 	mov.w	r1, #32
 80056be:	f381 8811 	msr	BASEPRI, r1
 80056c2:	607b      	str	r3, [r7, #4]
 80056c4:	4807      	ldr	r0, [pc, #28]	@ (80056e4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80056c6:	f7ff f8cc 	bl	8004862 <_PreparePacket>
 80056ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80056cc:	2203      	movs	r2, #3
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f7ff f9b5 	bl	8004a40 <_SendPacket>
  RECORD_END();
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f383 8811 	msr	BASEPRI, r3
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	2001435c 	.word	0x2001435c

080056e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056ee:	f3ef 8311 	mrs	r3, BASEPRI
 80056f2:	f04f 0120 	mov.w	r1, #32
 80056f6:	f381 8811 	msr	BASEPRI, r1
 80056fa:	607b      	str	r3, [r7, #4]
 80056fc:	4807      	ldr	r0, [pc, #28]	@ (800571c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80056fe:	f7ff f8b0 	bl	8004862 <_PreparePacket>
 8005702:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005704:	2212      	movs	r2, #18
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6838      	ldr	r0, [r7, #0]
 800570a:	f7ff f999 	bl	8004a40 <_SendPacket>
  RECORD_END();
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f383 8811 	msr	BASEPRI, r3
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	2001435c 	.word	0x2001435c

08005720 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005726:	f3ef 8311 	mrs	r3, BASEPRI
 800572a:	f04f 0120 	mov.w	r1, #32
 800572e:	f381 8811 	msr	BASEPRI, r1
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	4807      	ldr	r0, [pc, #28]	@ (8005754 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005736:	f7ff f894 	bl	8004862 <_PreparePacket>
 800573a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800573c:	2211      	movs	r2, #17
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6838      	ldr	r0, [r7, #0]
 8005742:	f7ff f97d 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f383 8811 	msr	BASEPRI, r3
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	2001435c 	.word	0x2001435c

08005758 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005760:	f3ef 8311 	mrs	r3, BASEPRI
 8005764:	f04f 0120 	mov.w	r1, #32
 8005768:	f381 8811 	msr	BASEPRI, r1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	4819      	ldr	r0, [pc, #100]	@ (80057d4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005770:	f7ff f877 	bl	8004862 <_PreparePacket>
 8005774:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800577a:	4b17      	ldr	r3, [pc, #92]	@ (80057d8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e00b      	b.n	80057a6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	61f9      	str	r1, [r7, #28]
 8005798:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	09db      	lsrs	r3, r3, #7
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057aa:	d8f0      	bhi.n	800578e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	61fa      	str	r2, [r7, #28]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80057bc:	2208      	movs	r2, #8
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6938      	ldr	r0, [r7, #16]
 80057c2:	f7ff f93d 	bl	8004a40 <_SendPacket>
  RECORD_END();
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f383 8811 	msr	BASEPRI, r3
}
 80057cc:	bf00      	nop
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	2001435c 	.word	0x2001435c
 80057d8:	2001432c 	.word	0x2001432c

080057dc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057e4:	f3ef 8311 	mrs	r3, BASEPRI
 80057e8:	f04f 0120 	mov.w	r1, #32
 80057ec:	f381 8811 	msr	BASEPRI, r1
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	4819      	ldr	r0, [pc, #100]	@ (8005858 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80057f4:	f7ff f835 	bl	8004862 <_PreparePacket>
 80057f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057fe:	4b17      	ldr	r3, [pc, #92]	@ (800585c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	e00b      	b.n	800582a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	1c59      	adds	r1, r3, #1
 800581a:	61f9      	str	r1, [r7, #28]
 800581c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	09db      	lsrs	r3, r3, #7
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b7f      	cmp	r3, #127	@ 0x7f
 800582e:	d8f0      	bhi.n	8005812 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	61fa      	str	r2, [r7, #28]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005840:	2204      	movs	r2, #4
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	6938      	ldr	r0, [r7, #16]
 8005846:	f7ff f8fb 	bl	8004a40 <_SendPacket>
  RECORD_END();
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f383 8811 	msr	BASEPRI, r3
}
 8005850:	bf00      	nop
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	2001435c 	.word	0x2001435c
 800585c:	2001432c 	.word	0x2001432c

08005860 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	4819      	ldr	r0, [pc, #100]	@ (80058dc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005878:	f7fe fff3 	bl	8004862 <_PreparePacket>
 800587c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005882:	4b17      	ldr	r3, [pc, #92]	@ (80058e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e00b      	b.n	80058ae <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	61f9      	str	r1, [r7, #28]
 80058a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b2:	d8f0      	bhi.n	8005896 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	61fa      	str	r2, [r7, #28]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80058c4:	2206      	movs	r2, #6
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	6938      	ldr	r0, [r7, #16]
 80058ca:	f7ff f8b9 	bl	8004a40 <_SendPacket>
  RECORD_END();
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f383 8811 	msr	BASEPRI, r3
}
 80058d4:	bf00      	nop
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	2001435c 	.word	0x2001435c
 80058e0:	2001432c 	.word	0x2001432c

080058e4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80058ec:	4b04      	ldr	r3, [pc, #16]	@ (8005900 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	1ad3      	subs	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	2001432c 	.word	0x2001432c

08005904 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b08c      	sub	sp, #48	@ 0x30
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800590e:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d06d      	beq.n	80059f2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005916:	4b39      	ldr	r3, [pc, #228]	@ (80059fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800591c:	2300      	movs	r3, #0
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005920:	e008      	b.n	8005934 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	3301      	adds	r3, #1
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005938:	429a      	cmp	r2, r3
 800593a:	d3f2      	bcc.n	8005922 <SEGGER_SYSVIEW_SendModule+0x1e>
 800593c:	e000      	b.n	8005940 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800593e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d055      	beq.n	80059f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005946:	f3ef 8311 	mrs	r3, BASEPRI
 800594a:	f04f 0120 	mov.w	r1, #32
 800594e:	f381 8811 	msr	BASEPRI, r1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	482a      	ldr	r0, [pc, #168]	@ (8005a00 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005956:	f7fe ff84 	bl	8004862 <_PreparePacket>
 800595a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	623b      	str	r3, [r7, #32]
 8005968:	e00b      	b.n	8005982 <SEGGER_SYSVIEW_SendModule+0x7e>
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	1c59      	adds	r1, r3, #1
 8005972:	6279      	str	r1, [r7, #36]	@ 0x24
 8005974:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	09db      	lsrs	r3, r3, #7
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	2b7f      	cmp	r3, #127	@ 0x7f
 8005986:	d8f0      	bhi.n	800596a <SEGGER_SYSVIEW_SendModule+0x66>
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	627a      	str	r2, [r7, #36]	@ 0x24
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e00b      	b.n	80059bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	61f9      	str	r1, [r7, #28]
 80059ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	09db      	lsrs	r3, r3, #7
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b7f      	cmp	r3, #127	@ 0x7f
 80059c0:	d8f0      	bhi.n	80059a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	61fa      	str	r2, [r7, #28]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2280      	movs	r2, #128	@ 0x80
 80059d8:	4619      	mov	r1, r3
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7fe fef4 	bl	80047c8 <_EncodeStr>
 80059e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80059e2:	2216      	movs	r2, #22
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	6938      	ldr	r0, [r7, #16]
 80059e8:	f7ff f82a 	bl	8004a40 <_SendPacket>
      RECORD_END();
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3730      	adds	r7, #48	@ 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20014354 	.word	0x20014354
 8005a00:	2001435c 	.word	0x2001435c

08005a04 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00f      	beq.n	8005a32 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a12:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f2      	bne.n	8005a18 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20014354 	.word	0x20014354

08005a40 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a46:	f3ef 8311 	mrs	r3, BASEPRI
 8005a4a:	f04f 0120 	mov.w	r1, #32
 8005a4e:	f381 8811 	msr	BASEPRI, r1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	4817      	ldr	r0, [pc, #92]	@ (8005ab4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a56:	f7fe ff04 	bl	8004862 <_PreparePacket>
 8005a5a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	4b14      	ldr	r3, [pc, #80]	@ (8005ab8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	e00b      	b.n	8005a84 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1c59      	adds	r1, r3, #1
 8005a74:	6179      	str	r1, [r7, #20]
 8005a76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	09db      	lsrs	r3, r3, #7
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a88:	d8f0      	bhi.n	8005a6c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	617a      	str	r2, [r7, #20]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a9a:	221b      	movs	r2, #27
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	68b8      	ldr	r0, [r7, #8]
 8005aa0:	f7fe ffce 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f383 8811 	msr	BASEPRI, r3
}
 8005aaa:	bf00      	nop
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2001435c 	.word	0x2001435c
 8005ab8:	20014358 	.word	0x20014358

08005abc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac8:	f04f 0120 	mov.w	r1, #32
 8005acc:	f381 8811 	msr	BASEPRI, r1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	4827      	ldr	r0, [pc, #156]	@ (8005b70 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ad4:	f7fe fec5 	bl	8004862 <_PreparePacket>
 8005ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ada:	2280      	movs	r2, #128	@ 0x80
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	6938      	ldr	r0, [r7, #16]
 8005ae0:	f7fe fe72 	bl	80047c8 <_EncodeStr>
 8005ae4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aea:	2301      	movs	r3, #1
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	e00b      	b.n	8005b08 <SEGGER_SYSVIEW_Warn+0x4c>
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005afa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b0c:	d8f0      	bhi.n	8005af0 <SEGGER_SYSVIEW_Warn+0x34>
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b14:	6a3a      	ldr	r2, [r7, #32]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	e00b      	b.n	8005b40 <SEGGER_SYSVIEW_Warn+0x84>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	61f9      	str	r1, [r7, #28]
 8005b32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	61fa      	str	r2, [r7, #28]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b56:	221a      	movs	r2, #26
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f7fe ff70 	bl	8004a40 <_SendPacket>
  RECORD_END();
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f383 8811 	msr	BASEPRI, r3
}
 8005b66:	bf00      	nop
 8005b68:	3728      	adds	r7, #40	@ 0x28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	2001435c 	.word	0x2001435c

08005b74 <memcmp>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	3901      	subs	r1, #1
 8005b78:	4402      	add	r2, r0
 8005b7a:	4290      	cmp	r0, r2
 8005b7c:	d101      	bne.n	8005b82 <memcmp+0xe>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e005      	b.n	8005b8e <memcmp+0x1a>
 8005b82:	7803      	ldrb	r3, [r0, #0]
 8005b84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d001      	beq.n	8005b90 <memcmp+0x1c>
 8005b8c:	1b18      	subs	r0, r3, r4
 8005b8e:	bd10      	pop	{r4, pc}
 8005b90:	3001      	adds	r0, #1
 8005b92:	e7f2      	b.n	8005b7a <memcmp+0x6>

08005b94 <memset>:
 8005b94:	4402      	add	r2, r0
 8005b96:	4603      	mov	r3, r0
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memset+0xa>
 8005b9c:	4770      	bx	lr
 8005b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba2:	e7f9      	b.n	8005b98 <memset+0x4>

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8005bdc <__libc_init_array+0x38>)
 8005ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8005be0 <__libc_init_array+0x3c>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8005be4 <__libc_init_array+0x40>)
 8005bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8005be8 <__libc_init_array+0x44>)
 8005bb8:	f000 f826 	bl	8005c08 <_init>
 8005bbc:	1b64      	subs	r4, r4, r5
 8005bbe:	10a4      	asrs	r4, r4, #2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08005da4 	.word	0x08005da4
 8005be0:	08005da4 	.word	0x08005da4
 8005be4:	08005da4 	.word	0x08005da4
 8005be8:	08005da8 	.word	0x08005da8

08005bec <memcpy>:
 8005bec:	440a      	add	r2, r1
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf4:	d100      	bne.n	8005bf8 <memcpy+0xc>
 8005bf6:	4770      	bx	lr
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c02:	4291      	cmp	r1, r2
 8005c04:	d1f9      	bne.n	8005bfa <memcpy+0xe>
 8005c06:	bd10      	pop	{r4, pc}

08005c08 <_init>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	bf00      	nop
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr

08005c14 <_fini>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr
